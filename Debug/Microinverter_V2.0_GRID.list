
Microinverter_V2.0_GRID.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000079cc  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08007ba4  08007ba4  00017ba4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007bb4  08007bb4  0002001c  2**0
                  CONTENTS
  4 .ARM          00000000  08007bb4  08007bb4  0002001c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007bb4  08007bb4  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007bb4  08007bb4  00017bb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007bb8  08007bb8  00017bb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08007bbc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000314  2000001c  08007bd8  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000330  08007bd8  00020330  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017075  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002db2  00000000  00000000  000370c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001628  00000000  00000000  00039e78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014e0  00000000  00000000  0003b4a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023513  00000000  00000000  0003c980  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000177f4  00000000  00000000  0005fe93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ef9a5  00000000  00000000  00077687  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0016702c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005f88  00000000  00000000  0016707c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000001c 	.word	0x2000001c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08007b8c 	.word	0x08007b8c

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000020 	.word	0x20000020
 8000214:	08007b8c 	.word	0x08007b8c

08000218 <LL_OPAMP_SetPGAGain>:
  *         @arg @ref LL_OPAMP_PGA_GAIN_32_OR_MINUS_31
  *         @arg @ref LL_OPAMP_PGA_GAIN_64_OR_MINUS_63
  * @retval None
  */
__STATIC_INLINE void LL_OPAMP_SetPGAGain(OPAMP_TypeDef *OPAMPx, uint32_t PGAGain)
{
 8000218:	b480      	push	{r7}
 800021a:	b083      	sub	sp, #12
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
 8000220:	6039      	str	r1, [r7, #0]
  MODIFY_REG(OPAMPx->CSR, OPAMP_CSR_PGGAIN_2 | OPAMP_CSR_PGGAIN_1 | OPAMP_CSR_PGGAIN_0, PGAGain);
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	681b      	ldr	r3, [r3, #0]
 8000226:	f423 32e0 	bic.w	r2, r3, #114688	; 0x1c000
 800022a:	683b      	ldr	r3, [r7, #0]
 800022c:	431a      	orrs	r2, r3
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	601a      	str	r2, [r3, #0]
}
 8000232:	bf00      	nop
 8000234:	370c      	adds	r7, #12
 8000236:	46bd      	mov	sp, r7
 8000238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800023c:	4770      	bx	lr

0800023e <LL_OPAMP_SetInputsMuxMode>:
  *         @arg @ref LL_OPAMP_INPUT_MUX_TIM20_CH6  (1)
  *         On this STM32 series, this value is not available on all devices. Refer to datasheet for details.
  * @retval None
  */
__STATIC_INLINE void LL_OPAMP_SetInputsMuxMode(OPAMP_TypeDef *OPAMPx, uint32_t InputsMuxMode)
{
 800023e:	b480      	push	{r7}
 8000240:	b083      	sub	sp, #12
 8000242:	af00      	add	r7, sp, #0
 8000244:	6078      	str	r0, [r7, #4]
 8000246:	6039      	str	r1, [r7, #0]
  MODIFY_REG(OPAMPx->TCMR, OPAMP_TCMR_T1CMEN | OPAMP_TCMR_T8CMEN | OPAMP_TCMR_T20CMEN, InputsMuxMode);
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	699b      	ldr	r3, [r3, #24]
 800024c:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8000250:	683b      	ldr	r3, [r7, #0]
 8000252:	431a      	orrs	r2, r3
 8000254:	687b      	ldr	r3, [r7, #4]
 8000256:	619a      	str	r2, [r3, #24]
}
 8000258:	bf00      	nop
 800025a:	370c      	adds	r7, #12
 800025c:	46bd      	mov	sp, r7
 800025e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000262:	4770      	bx	lr

08000264 <LL_OPAMP_SetInternalOutput>:
  *         @arg @ref LL_OPAMP_INTERNAL_OUPUT_DISABLED
  *         @arg @ref LL_OPAMP_INTERNAL_OUPUT_ENABLED
  * @retval None
  */
__STATIC_INLINE void LL_OPAMP_SetInternalOutput(OPAMP_TypeDef *OPAMPx, uint32_t InternalOutput)
{
 8000264:	b480      	push	{r7}
 8000266:	b083      	sub	sp, #12
 8000268:	af00      	add	r7, sp, #0
 800026a:	6078      	str	r0, [r7, #4]
 800026c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(OPAMPx->CSR, OPAMP_CSR_OPAMPINTEN, InternalOutput);
 800026e:	687b      	ldr	r3, [r7, #4]
 8000270:	681b      	ldr	r3, [r3, #0]
 8000272:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000276:	683b      	ldr	r3, [r7, #0]
 8000278:	431a      	orrs	r2, r3
 800027a:	687b      	ldr	r3, [r7, #4]
 800027c:	601a      	str	r2, [r3, #0]
}
 800027e:	bf00      	nop
 8000280:	370c      	adds	r7, #12
 8000282:	46bd      	mov	sp, r7
 8000284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000288:	4770      	bx	lr

0800028a <LL_OPAMP_SetTrimmingMode>:
  *         @arg @ref LL_OPAMP_TRIMMING_FACTORY
  *         @arg @ref LL_OPAMP_TRIMMING_USER
  * @retval None
  */
__STATIC_INLINE void LL_OPAMP_SetTrimmingMode(OPAMP_TypeDef *OPAMPx, uint32_t TrimmingMode)
{
 800028a:	b480      	push	{r7}
 800028c:	b083      	sub	sp, #12
 800028e:	af00      	add	r7, sp, #0
 8000290:	6078      	str	r0, [r7, #4]
 8000292:	6039      	str	r1, [r7, #0]
  MODIFY_REG(OPAMPx->CSR, OPAMP_CSR_USERTRIM, TrimmingMode);
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	f023 0210 	bic.w	r2, r3, #16
 800029c:	683b      	ldr	r3, [r7, #0]
 800029e:	431a      	orrs	r2, r3
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	601a      	str	r2, [r3, #0]
}
 80002a4:	bf00      	nop
 80002a6:	370c      	adds	r7, #12
 80002a8:	46bd      	mov	sp, r7
 80002aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ae:	4770      	bx	lr

080002b0 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80002b0:	b480      	push	{r7}
 80002b2:	b085      	sub	sp, #20
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80002b8:	4b08      	ldr	r3, [pc, #32]	; (80002dc <LL_AHB2_GRP1_EnableClock+0x2c>)
 80002ba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80002bc:	4907      	ldr	r1, [pc, #28]	; (80002dc <LL_AHB2_GRP1_EnableClock+0x2c>)
 80002be:	687b      	ldr	r3, [r7, #4]
 80002c0:	4313      	orrs	r3, r2
 80002c2:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80002c4:	4b05      	ldr	r3, [pc, #20]	; (80002dc <LL_AHB2_GRP1_EnableClock+0x2c>)
 80002c6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	4013      	ands	r3, r2
 80002cc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80002ce:	68fb      	ldr	r3, [r7, #12]
}
 80002d0:	bf00      	nop
 80002d2:	3714      	adds	r7, #20
 80002d4:	46bd      	mov	sp, r7
 80002d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002da:	4770      	bx	lr
 80002dc:	40021000 	.word	0x40021000

080002e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002e0:	b598      	push	{r3, r4, r7, lr}
 80002e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002e4:	f001 fb33 	bl	800194e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002e8:	f000 f984 	bl	80005f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002ec:	f000 fe4a 	bl	8000f84 <MX_GPIO_Init>
  MX_DMA_Init();
 80002f0:	f000 fe1e 	bl	8000f30 <MX_DMA_Init>
  MX_ADC1_Init();
 80002f4:	f000 f9ca 	bl	800068c <MX_ADC1_Init>
  MX_ADC2_Init();
 80002f8:	f000 fa96 	bl	8000828 <MX_ADC2_Init>
  MX_COMP1_Init();
 80002fc:	f000 fbc6 	bl	8000a8c <MX_COMP1_Init>
  MX_COMP4_Init();
 8000300:	f000 fbec 	bl	8000adc <MX_COMP4_Init>
  MX_DAC1_Init();
 8000304:	f000 fc10 	bl	8000b28 <MX_DAC1_Init>
  MX_DAC3_Init();
 8000308:	f000 fc56 	bl	8000bb8 <MX_DAC3_Init>
  MX_OPAMP2_Init();
 800030c:	f000 fc98 	bl	8000c40 <MX_OPAMP2_Init>
  MX_SPI3_Init();
 8000310:	f000 fcec 	bl	8000cec <MX_SPI3_Init>
  MX_TIM1_Init();
 8000314:	f000 fd28 	bl	8000d68 <MX_TIM1_Init>
  MX_ADC3_Init();
 8000318:	f000 fb52 	bl	80009c0 <MX_ADC3_Init>
  /* USER CODE BEGIN 2 */
  CORRECT_OPAMP6_Init();
 800031c:	f000 ff04 	bl	8001128 <CORRECT_OPAMP6_Init>

  //HAL_OPAMP_Start(&hopamp2);
  //HAL_OPAMP_Start(&hopamp6);
  OPAMP2->CSR |=OPAMP_CSR_OPAMPxEN; //OPAMP2 ENABLE   - IAC CURRENT OPAMP
 8000320:	4b96      	ldr	r3, [pc, #600]	; (800057c <main+0x29c>)
 8000322:	681b      	ldr	r3, [r3, #0]
 8000324:	4a95      	ldr	r2, [pc, #596]	; (800057c <main+0x29c>)
 8000326:	f043 0301 	orr.w	r3, r3, #1
 800032a:	6013      	str	r3, [r2, #0]
  OPAMP6->CSR |=OPAMP_CSR_OPAMPxEN; //OPAMP6 ENABLE   - NTC VOLTAGE OPAMP
 800032c:	4b94      	ldr	r3, [pc, #592]	; (8000580 <main+0x2a0>)
 800032e:	681b      	ldr	r3, [r3, #0]
 8000330:	4a93      	ldr	r2, [pc, #588]	; (8000580 <main+0x2a0>)
 8000332:	f043 0301 	orr.w	r3, r3, #1
 8000336:	6013      	str	r3, [r2, #0]

  HAL_ADCEx_Calibration_Start(&hadc1,ADC_DIFFERENTIAL_ENDED);
 8000338:	4992      	ldr	r1, [pc, #584]	; (8000584 <main+0x2a4>)
 800033a:	4893      	ldr	r0, [pc, #588]	; (8000588 <main+0x2a8>)
 800033c:	f002 fea0 	bl	8003080 <HAL_ADCEx_Calibration_Start>
  HAL_ADCEx_Calibration_Start(&hadc2,ADC_DIFFERENTIAL_ENDED);
 8000340:	4990      	ldr	r1, [pc, #576]	; (8000584 <main+0x2a4>)
 8000342:	4892      	ldr	r0, [pc, #584]	; (800058c <main+0x2ac>)
 8000344:	f002 fe9c 	bl	8003080 <HAL_ADCEx_Calibration_Start>
  //HAL_ADC_Start(&hadc2);
  //HAL_ADCEx_MultiModeStart_DMA(&hadc1, (uint32_t*)ADC12_BUFFER, ADC_BUFFER_SIZE);
  //HAL_TIM_Base_Start(&htim1);

  //DAC3 CHANNEL 1 - COMP1 input  (AC GRID OVERCURRENT LOW ) // 30% max val
  DAC1 ->DHR12R1 = (uint32_t)(OVERCURRENT_MID - OVERCURRENT_THS); //DAC3 CHANNEL 2 SET VALUE
 8000348:	4b91      	ldr	r3, [pc, #580]	; (8000590 <main+0x2b0>)
 800034a:	881b      	ldrh	r3, [r3, #0]
 800034c:	461a      	mov	r2, r3
 800034e:	4b91      	ldr	r3, [pc, #580]	; (8000594 <main+0x2b4>)
 8000350:	881b      	ldrh	r3, [r3, #0]
 8000352:	1ad2      	subs	r2, r2, r3
 8000354:	4b90      	ldr	r3, [pc, #576]	; (8000598 <main+0x2b8>)
 8000356:	609a      	str	r2, [r3, #8]
  DAC1->CR |= DAC_CR_EN1; //ENABLE DAC1 CHANNEL 1
 8000358:	4b8f      	ldr	r3, [pc, #572]	; (8000598 <main+0x2b8>)
 800035a:	681b      	ldr	r3, [r3, #0]
 800035c:	4a8e      	ldr	r2, [pc, #568]	; (8000598 <main+0x2b8>)
 800035e:	f043 0301 	orr.w	r3, r3, #1
 8000362:	6013      	str	r3, [r2, #0]
  while(!(DAC1->SR & DAC_SR_DAC1RDY)); //WAIT UNTIL DAC1 CHANNEL 1 IS READY
 8000364:	bf00      	nop
 8000366:	4b8c      	ldr	r3, [pc, #560]	; (8000598 <main+0x2b8>)
 8000368:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800036a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800036e:	2b00      	cmp	r3, #0
 8000370:	d0f9      	beq.n	8000366 <main+0x86>
  DAC1 ->SWTRIGR |= DAC_SWTRIGR_SWTRIG1;
 8000372:	4b89      	ldr	r3, [pc, #548]	; (8000598 <main+0x2b8>)
 8000374:	685b      	ldr	r3, [r3, #4]
 8000376:	4a88      	ldr	r2, [pc, #544]	; (8000598 <main+0x2b8>)
 8000378:	f043 0301 	orr.w	r3, r3, #1
 800037c:	6053      	str	r3, [r2, #4]

  //DAC1 CHANNEL 2
  DAC1 ->DHR12R2 = (uint32_t)ADC_DRIVERS_MID_VOLTAGE; //DAC1 CHANNEL 2 SET VALUE //1.25V - OPAMP ADC DRIVERS MID VOLTAGE
 800037e:	4b87      	ldr	r3, [pc, #540]	; (800059c <main+0x2bc>)
 8000380:	881a      	ldrh	r2, [r3, #0]
 8000382:	4b85      	ldr	r3, [pc, #532]	; (8000598 <main+0x2b8>)
 8000384:	615a      	str	r2, [r3, #20]
  DAC1->CR |= DAC_CR_EN2; //ENABLE DAC1 CHANNEL 2
 8000386:	4b84      	ldr	r3, [pc, #528]	; (8000598 <main+0x2b8>)
 8000388:	681b      	ldr	r3, [r3, #0]
 800038a:	4a83      	ldr	r2, [pc, #524]	; (8000598 <main+0x2b8>)
 800038c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000390:	6013      	str	r3, [r2, #0]
  while(!(DAC1->SR & DAC_SR_DAC2RDY)); //WAIT UNTIL DAC1 CHANNEL 2 IS READY
 8000392:	bf00      	nop
 8000394:	4b80      	ldr	r3, [pc, #512]	; (8000598 <main+0x2b8>)
 8000396:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000398:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800039c:	2b00      	cmp	r3, #0
 800039e:	d0f9      	beq.n	8000394 <main+0xb4>
  DAC1 ->SWTRIGR |= DAC_SWTRIGR_SWTRIG2;
 80003a0:	4b7d      	ldr	r3, [pc, #500]	; (8000598 <main+0x2b8>)
 80003a2:	685b      	ldr	r3, [r3, #4]
 80003a4:	4a7c      	ldr	r2, [pc, #496]	; (8000598 <main+0x2b8>)
 80003a6:	f043 0302 	orr.w	r3, r3, #2
 80003aa:	6053      	str	r3, [r2, #4]


  //DAC3 ->DHR12R1 = (uint32_t)(OVERCURRENT_MID - OVERCURRENT_THS); //DAC3 CHANNEL 2 SET VALUE
  DAC3 ->DHR12R1 = (uint32_t)IAC_OPAMP_MID_VOLTAGE; //DAC1 CHANNEL 2 SET VALUE // - IAC MID VOLTAGE
 80003ac:	4b7c      	ldr	r3, [pc, #496]	; (80005a0 <main+0x2c0>)
 80003ae:	881a      	ldrh	r2, [r3, #0]
 80003b0:	4b7c      	ldr	r3, [pc, #496]	; (80005a4 <main+0x2c4>)
 80003b2:	609a      	str	r2, [r3, #8]
  DAC3->CR |= DAC_CR_EN1; //ENABLE DAC1 CHANNEL 1
 80003b4:	4b7b      	ldr	r3, [pc, #492]	; (80005a4 <main+0x2c4>)
 80003b6:	681b      	ldr	r3, [r3, #0]
 80003b8:	4a7a      	ldr	r2, [pc, #488]	; (80005a4 <main+0x2c4>)
 80003ba:	f043 0301 	orr.w	r3, r3, #1
 80003be:	6013      	str	r3, [r2, #0]
  while(!(DAC3->SR & DAC_SR_DAC1RDY)); //WAIT UNTIL DAC3 IS READY
 80003c0:	bf00      	nop
 80003c2:	4b78      	ldr	r3, [pc, #480]	; (80005a4 <main+0x2c4>)
 80003c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80003c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d0f9      	beq.n	80003c2 <main+0xe2>
  DAC3 ->SWTRIGR |= DAC_SWTRIGR_SWTRIG1;
 80003ce:	4b75      	ldr	r3, [pc, #468]	; (80005a4 <main+0x2c4>)
 80003d0:	685b      	ldr	r3, [r3, #4]
 80003d2:	4a74      	ldr	r2, [pc, #464]	; (80005a4 <main+0x2c4>)
 80003d4:	f043 0301 	orr.w	r3, r3, #1
 80003d8:	6053      	str	r3, [r2, #4]

  //DAC3 CHANNEL 2 - COMP4 input (AC GRID OVERCURRENT HIGH)
  DAC3 ->DHR12R2 = (uint32_t)(OVERCURRENT_MID + OVERCURRENT_THS); //DAC3 CHANNEL 2 SET VALUE // 70% max val
 80003da:	4b6d      	ldr	r3, [pc, #436]	; (8000590 <main+0x2b0>)
 80003dc:	881b      	ldrh	r3, [r3, #0]
 80003de:	461a      	mov	r2, r3
 80003e0:	4b6c      	ldr	r3, [pc, #432]	; (8000594 <main+0x2b4>)
 80003e2:	881b      	ldrh	r3, [r3, #0]
 80003e4:	441a      	add	r2, r3
 80003e6:	4b6f      	ldr	r3, [pc, #444]	; (80005a4 <main+0x2c4>)
 80003e8:	615a      	str	r2, [r3, #20]
  DAC3->CR |= DAC_CR_EN2; //ENABLE DAC3 CHANNEL 2
 80003ea:	4b6e      	ldr	r3, [pc, #440]	; (80005a4 <main+0x2c4>)
 80003ec:	681b      	ldr	r3, [r3, #0]
 80003ee:	4a6d      	ldr	r2, [pc, #436]	; (80005a4 <main+0x2c4>)
 80003f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80003f4:	6013      	str	r3, [r2, #0]
  while(!(DAC3->SR & DAC_SR_DAC2RDY)); //WAIT UNTIL DAC3 CHANNEL 2 IS READY
 80003f6:	bf00      	nop
 80003f8:	4b6a      	ldr	r3, [pc, #424]	; (80005a4 <main+0x2c4>)
 80003fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80003fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000400:	2b00      	cmp	r3, #0
 8000402:	d0f9      	beq.n	80003f8 <main+0x118>
  DAC3 ->SWTRIGR |= DAC_SWTRIGR_SWTRIG2;
 8000404:	4b67      	ldr	r3, [pc, #412]	; (80005a4 <main+0x2c4>)
 8000406:	685b      	ldr	r3, [r3, #4]
 8000408:	4a66      	ldr	r2, [pc, #408]	; (80005a4 <main+0x2c4>)
 800040a:	f043 0302 	orr.w	r3, r3, #2
 800040e:	6053      	str	r3, [r2, #4]

  if (HAL_ADCEx_MultiModeStart_DMA(&hadc1, (uint32_t*)ADC12_BUFFER, ADC_BUFFER_SIZE) != HAL_OK)
 8000410:	2202      	movs	r2, #2
 8000412:	4965      	ldr	r1, [pc, #404]	; (80005a8 <main+0x2c8>)
 8000414:	485c      	ldr	r0, [pc, #368]	; (8000588 <main+0x2a8>)
 8000416:	f002 fe95 	bl	8003144 <HAL_ADCEx_MultiModeStart_DMA>
 800041a:	4603      	mov	r3, r0
 800041c:	2b00      	cmp	r3, #0
 800041e:	d001      	beq.n	8000424 <main+0x144>
  {
    Error_Handler();
 8000420:	f000 fee6 	bl	80011f0 <Error_Handler>
  }
  //HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADC12_BUFFER, ADC_BUFFER_SIZE);

  HAL_COMP_Start(&hcomp1);
 8000424:	4861      	ldr	r0, [pc, #388]	; (80005ac <main+0x2cc>)
 8000426:	f003 fec3 	bl	80041b0 <HAL_COMP_Start>
  HAL_COMP_Start(&hcomp4);
 800042a:	4861      	ldr	r0, [pc, #388]	; (80005b0 <main+0x2d0>)
 800042c:	f003 fec0 	bl	80041b0 <HAL_COMP_Start>

  //HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_2); // Overcurrent Out form Comp1/Comp4

   //HAL_TIM_OnePulse_Start_IT(&htim1, TIM_CHANNEL_2); // Overcurrent Out form Comp1/Comp4

   ptr_aqusitionDMA1_1 = &aqusitionDMA1_1;
 8000430:	4b60      	ldr	r3, [pc, #384]	; (80005b4 <main+0x2d4>)
 8000432:	4a61      	ldr	r2, [pc, #388]	; (80005b8 <main+0x2d8>)
 8000434:	601a      	str	r2, [r3, #0]

   ptr_SPI_TxBuffer =&SPI_TxBuffer[0];
 8000436:	4b61      	ldr	r3, [pc, #388]	; (80005bc <main+0x2dc>)
 8000438:	4a61      	ldr	r2, [pc, #388]	; (80005c0 <main+0x2e0>)
 800043a:	601a      	str	r2, [r3, #0]

   ptr_SPI_RxBuffer =&SPI_RxBuffer[0];
 800043c:	4b61      	ldr	r3, [pc, #388]	; (80005c4 <main+0x2e4>)
 800043e:	4a62      	ldr	r2, [pc, #392]	; (80005c8 <main+0x2e8>)
 8000440:	601a      	str	r2, [r3, #0]

   // Enable the SPI3 peripheral.
   SPI3->CR1 |=  ( SPI_CR1_SPE );
 8000442:	4b62      	ldr	r3, [pc, #392]	; (80005cc <main+0x2ec>)
 8000444:	681b      	ldr	r3, [r3, #0]
 8000446:	4a61      	ldr	r2, [pc, #388]	; (80005cc <main+0x2ec>)
 8000448:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800044c:	6013      	str	r3, [r2, #0]

   //HAL_TIM_OnePulse_Start_IT(&htim1, TIM_CHANNEL_2); // Overcurrent Out form Comp1/Comp4
   HAL_GPIO_WritePin(STATUS1_GPIO_Port, STATUS1_Pin, RESET);
 800044e:	2200      	movs	r2, #0
 8000450:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000454:	485e      	ldr	r0, [pc, #376]	; (80005d0 <main+0x2f0>)
 8000456:	f004 fd13 	bl	8004e80 <HAL_GPIO_WritePin>
  /* USER CODE BEGIN WHILE */
  while (1)
  {


		  if ((*ptr_aqusitionDMA1_1) == 1)
 800045a:	4b56      	ldr	r3, [pc, #344]	; (80005b4 <main+0x2d4>)
 800045c:	681b      	ldr	r3, [r3, #0]
 800045e:	781b      	ldrb	r3, [r3, #0]
 8000460:	2b01      	cmp	r3, #1
 8000462:	d1fa      	bne.n	800045a <main+0x17a>
		  {

				if (frequency_factor == 1) // divide transmit PWM Frequency by 2 - So 50 kHz / 2  = 25 kHz up to day
 8000464:	4b5b      	ldr	r3, [pc, #364]	; (80005d4 <main+0x2f4>)
 8000466:	781b      	ldrb	r3, [r3, #0]
 8000468:	2b01      	cmp	r3, #1
 800046a:	d14d      	bne.n	8000508 <main+0x228>
				{

				 IAC_ADC_VAL = (GetMSB(ADC12_BUFFER[1])+GetMSB(ADC12_BUFFER[0]))/2;
 800046c:	4b4e      	ldr	r3, [pc, #312]	; (80005a8 <main+0x2c8>)
 800046e:	685b      	ldr	r3, [r3, #4]
 8000470:	4618      	mov	r0, r3
 8000472:	f000 fe19 	bl	80010a8 <GetMSB>
 8000476:	4603      	mov	r3, r0
 8000478:	461c      	mov	r4, r3
 800047a:	4b4b      	ldr	r3, [pc, #300]	; (80005a8 <main+0x2c8>)
 800047c:	681b      	ldr	r3, [r3, #0]
 800047e:	4618      	mov	r0, r3
 8000480:	f000 fe12 	bl	80010a8 <GetMSB>
 8000484:	4603      	mov	r3, r0
 8000486:	4423      	add	r3, r4
 8000488:	0fda      	lsrs	r2, r3, #31
 800048a:	4413      	add	r3, r2
 800048c:	105b      	asrs	r3, r3, #1
 800048e:	b29a      	uxth	r2, r3
 8000490:	4b51      	ldr	r3, [pc, #324]	; (80005d8 <main+0x2f8>)
 8000492:	801a      	strh	r2, [r3, #0]
				 VAC_ADC_VAL = GetLSB(ADC12_BUFFER[0]);
 8000494:	4b44      	ldr	r3, [pc, #272]	; (80005a8 <main+0x2c8>)
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	4618      	mov	r0, r3
 800049a:	f000 fdf9 	bl	8001090 <GetLSB>
 800049e:	4603      	mov	r3, r0
 80004a0:	461a      	mov	r2, r3
 80004a2:	4b4e      	ldr	r3, [pc, #312]	; (80005dc <main+0x2fc>)
 80004a4:	801a      	strh	r2, [r3, #0]
				 HVDC_ADC_VAL = GetLSB(ADC12_BUFFER[1]);
 80004a6:	4b40      	ldr	r3, [pc, #256]	; (80005a8 <main+0x2c8>)
 80004a8:	685b      	ldr	r3, [r3, #4]
 80004aa:	4618      	mov	r0, r3
 80004ac:	f000 fdf0 	bl	8001090 <GetLSB>
 80004b0:	4603      	mov	r3, r0
 80004b2:	461a      	mov	r2, r3
 80004b4:	4b4a      	ldr	r3, [pc, #296]	; (80005e0 <main+0x300>)
 80004b6:	801a      	strh	r2, [r3, #0]

				 SPI_TxBuffer[0] = IAC_ADC_VAL;
 80004b8:	4b47      	ldr	r3, [pc, #284]	; (80005d8 <main+0x2f8>)
 80004ba:	881a      	ldrh	r2, [r3, #0]
 80004bc:	4b40      	ldr	r3, [pc, #256]	; (80005c0 <main+0x2e0>)
 80004be:	801a      	strh	r2, [r3, #0]
				 SPI_TxBuffer[1] = VAC_ADC_VAL;
 80004c0:	4b46      	ldr	r3, [pc, #280]	; (80005dc <main+0x2fc>)
 80004c2:	881a      	ldrh	r2, [r3, #0]
 80004c4:	4b3e      	ldr	r3, [pc, #248]	; (80005c0 <main+0x2e0>)
 80004c6:	805a      	strh	r2, [r3, #2]
				 SPI_TxBuffer[2] = HVDC_ADC_VAL;
 80004c8:	4b45      	ldr	r3, [pc, #276]	; (80005e0 <main+0x300>)
 80004ca:	881a      	ldrh	r2, [r3, #0]
 80004cc:	4b3c      	ldr	r3, [pc, #240]	; (80005c0 <main+0x2e0>)
 80004ce:	809a      	strh	r2, [r3, #4]

				 delay_cycles(21);
 80004d0:	2015      	movs	r0, #21
 80004d2:	f000 fe77 	bl	80011c4 <delay_cycles>

				 SPIx_Transfer2(SPI3,ptr_SPI_TxBuffer,ptr_SPI_RxBuffer,SPI_TX_BUFFER_SIZE);
 80004d6:	4b39      	ldr	r3, [pc, #228]	; (80005bc <main+0x2dc>)
 80004d8:	6819      	ldr	r1, [r3, #0]
 80004da:	4b3a      	ldr	r3, [pc, #232]	; (80005c4 <main+0x2e4>)
 80004dc:	681a      	ldr	r2, [r3, #0]
 80004de:	2303      	movs	r3, #3
 80004e0:	483a      	ldr	r0, [pc, #232]	; (80005cc <main+0x2ec>)
 80004e2:	f000 fdee 	bl	80010c2 <SPIx_Transfer2>
				 //tmp_jdr3 = ADC2 -> JDR3;
				 //tmp_jdr4 = ADC2 -> JDR4;

				 //INJ_IAC_ADC_VAL = (uint16_t)(tmp_jdr1 + tmp_jdr2 + tmp_jdr3 + tmp_jdr4);

				 frequency_factor++;
 80004e6:	4b3b      	ldr	r3, [pc, #236]	; (80005d4 <main+0x2f4>)
 80004e8:	781b      	ldrb	r3, [r3, #0]
 80004ea:	3301      	adds	r3, #1
 80004ec:	b2da      	uxtb	r2, r3
 80004ee:	4b39      	ldr	r3, [pc, #228]	; (80005d4 <main+0x2f4>)
 80004f0:	701a      	strb	r2, [r3, #0]


				 Status_Val = SPI_RxBuffer[0];
 80004f2:	4b35      	ldr	r3, [pc, #212]	; (80005c8 <main+0x2e8>)
 80004f4:	881a      	ldrh	r2, [r3, #0]
 80004f6:	4b3b      	ldr	r3, [pc, #236]	; (80005e4 <main+0x304>)
 80004f8:	801a      	strh	r2, [r3, #0]

				 HAL_GPIO_WritePin(STATUS1_GPIO_Port, STATUS1_Pin, RESET);
 80004fa:	2200      	movs	r2, #0
 80004fc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000500:	4833      	ldr	r0, [pc, #204]	; (80005d0 <main+0x2f0>)
 8000502:	f004 fcbd 	bl	8004e80 <HAL_GPIO_WritePin>
 8000506:	e034      	b.n	8000572 <main+0x292>
					//IAC_AVG=((uint32_t)(IAC_ADC_VAL + IAC_ADC_VAL_2) / 2);
					//IAC_ADC_VAL = (uint16_t)IAC_AVG;



					frequency_factor = 1;
 8000508:	4b32      	ldr	r3, [pc, #200]	; (80005d4 <main+0x2f4>)
 800050a:	2201      	movs	r2, #1
 800050c:	701a      	strb	r2, [r3, #0]


					  if(Status_Val == 0x15) // GRID INSERTION
 800050e:	4b35      	ldr	r3, [pc, #212]	; (80005e4 <main+0x304>)
 8000510:	881b      	ldrh	r3, [r3, #0]
 8000512:	2b15      	cmp	r3, #21
 8000514:	d127      	bne.n	8000566 <main+0x286>
					  {
						  if(OC_PROT_ON < 2000)
 8000516:	4b34      	ldr	r3, [pc, #208]	; (80005e8 <main+0x308>)
 8000518:	881b      	ldrh	r3, [r3, #0]
 800051a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800051e:	d205      	bcs.n	800052c <main+0x24c>
							  {
								  OC_PROT_ON++;
 8000520:	4b31      	ldr	r3, [pc, #196]	; (80005e8 <main+0x308>)
 8000522:	881b      	ldrh	r3, [r3, #0]
 8000524:	3301      	adds	r3, #1
 8000526:	b29a      	uxth	r2, r3
 8000528:	4b2f      	ldr	r3, [pc, #188]	; (80005e8 <main+0x308>)
 800052a:	801a      	strh	r2, [r3, #0]
							  }
						  if(OC_PROT_ON == 2000)
 800052c:	4b2e      	ldr	r3, [pc, #184]	; (80005e8 <main+0x308>)
 800052e:	881b      	ldrh	r3, [r3, #0]
 8000530:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000534:	d103      	bne.n	800053e <main+0x25e>
							  {



								  OC_PROT_ON = 2001;
 8000536:	4b2c      	ldr	r3, [pc, #176]	; (80005e8 <main+0x308>)
 8000538:	f240 72d1 	movw	r2, #2001	; 0x7d1
 800053c:	801a      	strh	r2, [r3, #0]
							  }
						  /* Enable the TIM Capture/Compare 2 interrupt */
						  __HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC2);
 800053e:	4b2b      	ldr	r3, [pc, #172]	; (80005ec <main+0x30c>)
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	68da      	ldr	r2, [r3, #12]
 8000544:	4b29      	ldr	r3, [pc, #164]	; (80005ec <main+0x30c>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	f042 0204 	orr.w	r2, r2, #4
 800054c:	60da      	str	r2, [r3, #12]
						  /* Set or reset the CCxE Bit */
						  TIM1->CCER |= (uint32_t)(TIM_CCx_ENABLE << (TIM_CHANNEL_2 & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800054e:	4b28      	ldr	r3, [pc, #160]	; (80005f0 <main+0x310>)
 8000550:	6a1b      	ldr	r3, [r3, #32]
 8000552:	4a27      	ldr	r2, [pc, #156]	; (80005f0 <main+0x310>)
 8000554:	f043 0310 	orr.w	r3, r3, #16
 8000558:	6213      	str	r3, [r2, #32]
						  /* Enable the main output */
						  TIM1->BDTR |= (TIM_BDTR_MOE);
 800055a:	4b25      	ldr	r3, [pc, #148]	; (80005f0 <main+0x310>)
 800055c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800055e:	4a24      	ldr	r2, [pc, #144]	; (80005f0 <main+0x310>)
 8000560:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000564:	6453      	str	r3, [r2, #68]	; 0x44

						  //HAL_GPIO_WritePin(STATUS1_GPIO_Port, STATUS1_Pin, SET);
					  }
					  HAL_GPIO_WritePin(STATUS1_GPIO_Port, STATUS1_Pin, RESET);
 8000566:	2200      	movs	r2, #0
 8000568:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800056c:	4818      	ldr	r0, [pc, #96]	; (80005d0 <main+0x2f0>)
 800056e:	f004 fc87 	bl	8004e80 <HAL_GPIO_WritePin>
				}

				*ptr_aqusitionDMA1_1 = 0;
 8000572:	4b10      	ldr	r3, [pc, #64]	; (80005b4 <main+0x2d4>)
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	2200      	movs	r2, #0
 8000578:	701a      	strb	r2, [r3, #0]
		  if ((*ptr_aqusitionDMA1_1) == 1)
 800057a:	e76e      	b.n	800045a <main+0x17a>
 800057c:	40010304 	.word	0x40010304
 8000580:	40010314 	.word	0x40010314
 8000584:	407f0000 	.word	0x407f0000
 8000588:	20000038 	.word	0x20000038
 800058c:	200000a4 	.word	0x200000a4
 8000590:	20000006 	.word	0x20000006
 8000594:	20000004 	.word	0x20000004
 8000598:	50000800 	.word	0x50000800
 800059c:	20000000 	.word	0x20000000
 80005a0:	20000002 	.word	0x20000002
 80005a4:	50001000 	.word	0x50001000
 80005a8:	200002fc 	.word	0x200002fc
 80005ac:	200001dc 	.word	0x200001dc
 80005b0:	20000200 	.word	0x20000200
 80005b4:	20000308 	.word	0x20000308
 80005b8:	20000304 	.word	0x20000304
 80005bc:	2000031c 	.word	0x2000031c
 80005c0:	2000030c 	.word	0x2000030c
 80005c4:	20000320 	.word	0x20000320
 80005c8:	20000314 	.word	0x20000314
 80005cc:	40003c00 	.word	0x40003c00
 80005d0:	48000800 	.word	0x48000800
 80005d4:	2000000e 	.word	0x2000000e
 80005d8:	2000000a 	.word	0x2000000a
 80005dc:	20000008 	.word	0x20000008
 80005e0:	2000000c 	.word	0x2000000c
 80005e4:	20000326 	.word	0x20000326
 80005e8:	20000324 	.word	0x20000324
 80005ec:	200002b0 	.word	0x200002b0
 80005f0:	40012c00 	.word	0x40012c00

080005f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b094      	sub	sp, #80	; 0x50
 80005f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005fa:	f107 0318 	add.w	r3, r7, #24
 80005fe:	2238      	movs	r2, #56	; 0x38
 8000600:	2100      	movs	r1, #0
 8000602:	4618      	mov	r0, r3
 8000604:	f007 faba 	bl	8007b7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000608:	1d3b      	adds	r3, r7, #4
 800060a:	2200      	movs	r2, #0
 800060c:	601a      	str	r2, [r3, #0]
 800060e:	605a      	str	r2, [r3, #4]
 8000610:	609a      	str	r2, [r3, #8]
 8000612:	60da      	str	r2, [r3, #12]
 8000614:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000616:	2000      	movs	r0, #0
 8000618:	f004 fc4a 	bl	8004eb0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800061c:	2302      	movs	r3, #2
 800061e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000620:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000624:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000626:	2340      	movs	r3, #64	; 0x40
 8000628:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800062a:	2302      	movs	r3, #2
 800062c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800062e:	2302      	movs	r3, #2
 8000630:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000632:	2304      	movs	r3, #4
 8000634:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000636:	2355      	movs	r3, #85	; 0x55
 8000638:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 800063a:	2306      	movs	r3, #6
 800063c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800063e:	2302      	movs	r3, #2
 8000640:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000642:	2302      	movs	r3, #2
 8000644:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000646:	f107 0318 	add.w	r3, r7, #24
 800064a:	4618      	mov	r0, r3
 800064c:	f004 fce4 	bl	8005018 <HAL_RCC_OscConfig>
 8000650:	4603      	mov	r3, r0
 8000652:	2b00      	cmp	r3, #0
 8000654:	d001      	beq.n	800065a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000656:	f000 fdcb 	bl	80011f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800065a:	230f      	movs	r3, #15
 800065c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800065e:	2303      	movs	r3, #3
 8000660:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000662:	2300      	movs	r3, #0
 8000664:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000666:	2300      	movs	r3, #0
 8000668:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800066a:	2300      	movs	r3, #0
 800066c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800066e:	1d3b      	adds	r3, r7, #4
 8000670:	2104      	movs	r1, #4
 8000672:	4618      	mov	r0, r3
 8000674:	f004 ffe8 	bl	8005648 <HAL_RCC_ClockConfig>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d001      	beq.n	8000682 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800067e:	f000 fdb7 	bl	80011f0 <Error_Handler>
  }
}
 8000682:	bf00      	nop
 8000684:	3750      	adds	r7, #80	; 0x50
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}
	...

0800068c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b09a      	sub	sp, #104	; 0x68
 8000690:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000692:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000696:	2200      	movs	r2, #0
 8000698:	601a      	str	r2, [r3, #0]
 800069a:	605a      	str	r2, [r3, #4]
 800069c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800069e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80006a2:	2220      	movs	r2, #32
 80006a4:	2100      	movs	r1, #0
 80006a6:	4618      	mov	r0, r3
 80006a8:	f007 fa68 	bl	8007b7c <memset>
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 80006ac:	463b      	mov	r3, r7
 80006ae:	223c      	movs	r2, #60	; 0x3c
 80006b0:	2100      	movs	r1, #0
 80006b2:	4618      	mov	r0, r3
 80006b4:	f007 fa62 	bl	8007b7c <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80006b8:	4b56      	ldr	r3, [pc, #344]	; (8000814 <MX_ADC1_Init+0x188>)
 80006ba:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80006be:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80006c0:	4b54      	ldr	r3, [pc, #336]	; (8000814 <MX_ADC1_Init+0x188>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006c6:	4b53      	ldr	r3, [pc, #332]	; (8000814 <MX_ADC1_Init+0x188>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006cc:	4b51      	ldr	r3, [pc, #324]	; (8000814 <MX_ADC1_Init+0x188>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80006d2:	4b50      	ldr	r3, [pc, #320]	; (8000814 <MX_ADC1_Init+0x188>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80006d8:	4b4e      	ldr	r3, [pc, #312]	; (8000814 <MX_ADC1_Init+0x188>)
 80006da:	2201      	movs	r2, #1
 80006dc:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80006de:	4b4d      	ldr	r3, [pc, #308]	; (8000814 <MX_ADC1_Init+0x188>)
 80006e0:	2208      	movs	r2, #8
 80006e2:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80006e4:	4b4b      	ldr	r3, [pc, #300]	; (8000814 <MX_ADC1_Init+0x188>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80006ea:	4b4a      	ldr	r3, [pc, #296]	; (8000814 <MX_ADC1_Init+0x188>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 2;
 80006f0:	4b48      	ldr	r3, [pc, #288]	; (8000814 <MX_ADC1_Init+0x188>)
 80006f2:	2202      	movs	r2, #2
 80006f4:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006f6:	4b47      	ldr	r3, [pc, #284]	; (8000814 <MX_ADC1_Init+0x188>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_EXT_IT11;
 80006fe:	4b45      	ldr	r3, [pc, #276]	; (8000814 <MX_ADC1_Init+0x188>)
 8000700:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8000704:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_FALLING;
 8000706:	4b43      	ldr	r3, [pc, #268]	; (8000814 <MX_ADC1_Init+0x188>)
 8000708:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800070c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800070e:	4b41      	ldr	r3, [pc, #260]	; (8000814 <MX_ADC1_Init+0x188>)
 8000710:	2201      	movs	r2, #1
 8000712:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000716:	4b3f      	ldr	r3, [pc, #252]	; (8000814 <MX_ADC1_Init+0x188>)
 8000718:	2200      	movs	r2, #0
 800071a:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = ENABLE;
 800071c:	4b3d      	ldr	r3, [pc, #244]	; (8000814 <MX_ADC1_Init+0x188>)
 800071e:	2201      	movs	r2, #1
 8000720:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  hadc1.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_8;
 8000724:	4b3b      	ldr	r3, [pc, #236]	; (8000814 <MX_ADC1_Init+0x188>)
 8000726:	2208      	movs	r2, #8
 8000728:	645a      	str	r2, [r3, #68]	; 0x44
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_NONE;
 800072a:	4b3a      	ldr	r3, [pc, #232]	; (8000814 <MX_ADC1_Init+0x188>)
 800072c:	2200      	movs	r2, #0
 800072e:	649a      	str	r2, [r3, #72]	; 0x48
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8000730:	4b38      	ldr	r3, [pc, #224]	; (8000814 <MX_ADC1_Init+0x188>)
 8000732:	2200      	movs	r2, #0
 8000734:	64da      	str	r2, [r3, #76]	; 0x4c
  hadc1.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 8000736:	4b37      	ldr	r3, [pc, #220]	; (8000814 <MX_ADC1_Init+0x188>)
 8000738:	2201      	movs	r2, #1
 800073a:	651a      	str	r2, [r3, #80]	; 0x50
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800073c:	4835      	ldr	r0, [pc, #212]	; (8000814 <MX_ADC1_Init+0x188>)
 800073e:	f001 fbbf 	bl	8001ec0 <HAL_ADC_Init>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d001      	beq.n	800074c <MX_ADC1_Init+0xc0>
  {
    Error_Handler();
 8000748:	f000 fd52 	bl	80011f0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_DUALMODE_REGINTERL_INJECSIMULT;
 800074c:	2303      	movs	r3, #3
 800074e:	65fb      	str	r3, [r7, #92]	; 0x5c
  multimode.DMAAccessMode = ADC_DMAACCESSMODE_12_10_BITS;
 8000750:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000754:	663b      	str	r3, [r7, #96]	; 0x60
  multimode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_1CYCLE;
 8000756:	2300      	movs	r3, #0
 8000758:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800075a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800075e:	4619      	mov	r1, r3
 8000760:	482c      	ldr	r0, [pc, #176]	; (8000814 <MX_ADC1_Init+0x188>)
 8000762:	f003 fab9 	bl	8003cd8 <HAL_ADCEx_MultiModeConfigChannel>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d001      	beq.n	8000770 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 800076c:	f000 fd40 	bl	80011f0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000770:	4b29      	ldr	r3, [pc, #164]	; (8000818 <MX_ADC1_Init+0x18c>)
 8000772:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000774:	2306      	movs	r3, #6
 8000776:	643b      	str	r3, [r7, #64]	; 0x40
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000778:	2300      	movs	r3, #0
 800077a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 800077c:	4b27      	ldr	r3, [pc, #156]	; (800081c <MX_ADC1_Init+0x190>)
 800077e:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000780:	2304      	movs	r3, #4
 8000782:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfig.Offset = 0;
 8000784:	2300      	movs	r3, #0
 8000786:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000788:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800078c:	4619      	mov	r1, r3
 800078e:	4821      	ldr	r0, [pc, #132]	; (8000814 <MX_ADC1_Init+0x188>)
 8000790:	f001 fd68 	bl	8002264 <HAL_ADC_ConfigChannel>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d001      	beq.n	800079e <MX_ADC1_Init+0x112>
  {
    Error_Handler();
 800079a:	f000 fd29 	bl	80011f0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800079e:	4b20      	ldr	r3, [pc, #128]	; (8000820 <MX_ADC1_Init+0x194>)
 80007a0:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80007a2:	230c      	movs	r3, #12
 80007a4:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007a6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80007aa:	4619      	mov	r1, r3
 80007ac:	4819      	ldr	r0, [pc, #100]	; (8000814 <MX_ADC1_Init+0x188>)
 80007ae:	f001 fd59 	bl	8002264 <HAL_ADC_ConfigChannel>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d001      	beq.n	80007bc <MX_ADC1_Init+0x130>
  {
    Error_Handler();
 80007b8:	f000 fd1a 	bl	80011f0 <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_5;
 80007bc:	4b19      	ldr	r3, [pc, #100]	; (8000824 <MX_ADC1_Init+0x198>)
 80007be:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 80007c0:	2309      	movs	r3, #9
 80007c2:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80007c4:	2300      	movs	r3, #0
 80007c6:	60bb      	str	r3, [r7, #8]
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 80007c8:	237f      	movs	r3, #127	; 0x7f
 80007ca:	60fb      	str	r3, [r7, #12]
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 80007cc:	2304      	movs	r3, #4
 80007ce:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedOffset = 0;
 80007d0:	2300      	movs	r3, #0
 80007d2:	617b      	str	r3, [r7, #20]
  sConfigInjected.InjectedNbrOfConversion = 1;
 80007d4:	2301      	movs	r3, #1
 80007d6:	623b      	str	r3, [r7, #32]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 80007d8:	2300      	movs	r3, #0
 80007da:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sConfigInjected.AutoInjectedConv = DISABLE;
 80007de:	2300      	movs	r3, #0
 80007e0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  sConfigInjected.QueueInjectedContext = DISABLE;
 80007e4:	2300      	movs	r3, #0
 80007e6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  sConfigInjected.ExternalTrigInjecConv = ADC_INJECTED_SOFTWARE_START;
 80007ea:	2300      	movs	r3, #0
 80007ec:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_NONE;
 80007ee:	2300      	movs	r3, #0
 80007f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigInjected.InjecOversamplingMode = DISABLE;
 80007f2:	2300      	movs	r3, #0
 80007f4:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 80007f8:	463b      	mov	r3, r7
 80007fa:	4619      	mov	r1, r3
 80007fc:	4805      	ldr	r0, [pc, #20]	; (8000814 <MX_ADC1_Init+0x188>)
 80007fe:	f002 fd51 	bl	80032a4 <HAL_ADCEx_InjectedConfigChannel>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d001      	beq.n	800080c <MX_ADC1_Init+0x180>
  {
    Error_Handler();
 8000808:	f000 fcf2 	bl	80011f0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800080c:	bf00      	nop
 800080e:	3768      	adds	r7, #104	; 0x68
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}
 8000814:	20000038 	.word	0x20000038
 8000818:	04300002 	.word	0x04300002
 800081c:	407f0000 	.word	0x407f0000
 8000820:	0c900008 	.word	0x0c900008
 8000824:	14f00020 	.word	0x14f00020

08000828 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b098      	sub	sp, #96	; 0x60
 800082c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800082e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000832:	2220      	movs	r2, #32
 8000834:	2100      	movs	r1, #0
 8000836:	4618      	mov	r0, r3
 8000838:	f007 f9a0 	bl	8007b7c <memset>
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 800083c:	1d3b      	adds	r3, r7, #4
 800083e:	223c      	movs	r2, #60	; 0x3c
 8000840:	2100      	movs	r1, #0
 8000842:	4618      	mov	r0, r3
 8000844:	f007 f99a 	bl	8007b7c <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000848:	4b59      	ldr	r3, [pc, #356]	; (80009b0 <MX_ADC2_Init+0x188>)
 800084a:	4a5a      	ldr	r2, [pc, #360]	; (80009b4 <MX_ADC2_Init+0x18c>)
 800084c:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800084e:	4b58      	ldr	r3, [pc, #352]	; (80009b0 <MX_ADC2_Init+0x188>)
 8000850:	2200      	movs	r2, #0
 8000852:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000854:	4b56      	ldr	r3, [pc, #344]	; (80009b0 <MX_ADC2_Init+0x188>)
 8000856:	2200      	movs	r2, #0
 8000858:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800085a:	4b55      	ldr	r3, [pc, #340]	; (80009b0 <MX_ADC2_Init+0x188>)
 800085c:	2200      	movs	r2, #0
 800085e:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8000860:	4b53      	ldr	r3, [pc, #332]	; (80009b0 <MX_ADC2_Init+0x188>)
 8000862:	2200      	movs	r2, #0
 8000864:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000866:	4b52      	ldr	r3, [pc, #328]	; (80009b0 <MX_ADC2_Init+0x188>)
 8000868:	2201      	movs	r2, #1
 800086a:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800086c:	4b50      	ldr	r3, [pc, #320]	; (80009b0 <MX_ADC2_Init+0x188>)
 800086e:	2208      	movs	r2, #8
 8000870:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000872:	4b4f      	ldr	r3, [pc, #316]	; (80009b0 <MX_ADC2_Init+0x188>)
 8000874:	2200      	movs	r2, #0
 8000876:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000878:	4b4d      	ldr	r3, [pc, #308]	; (80009b0 <MX_ADC2_Init+0x188>)
 800087a:	2200      	movs	r2, #0
 800087c:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 2;
 800087e:	4b4c      	ldr	r3, [pc, #304]	; (80009b0 <MX_ADC2_Init+0x188>)
 8000880:	2202      	movs	r2, #2
 8000882:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000884:	4b4a      	ldr	r3, [pc, #296]	; (80009b0 <MX_ADC2_Init+0x188>)
 8000886:	2200      	movs	r2, #0
 8000888:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800088c:	4b48      	ldr	r3, [pc, #288]	; (80009b0 <MX_ADC2_Init+0x188>)
 800088e:	2200      	movs	r2, #0
 8000890:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000894:	4b46      	ldr	r3, [pc, #280]	; (80009b0 <MX_ADC2_Init+0x188>)
 8000896:	2200      	movs	r2, #0
 8000898:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = ENABLE;
 800089a:	4b45      	ldr	r3, [pc, #276]	; (80009b0 <MX_ADC2_Init+0x188>)
 800089c:	2201      	movs	r2, #1
 800089e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  hadc2.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_8;
 80008a2:	4b43      	ldr	r3, [pc, #268]	; (80009b0 <MX_ADC2_Init+0x188>)
 80008a4:	2208      	movs	r2, #8
 80008a6:	645a      	str	r2, [r3, #68]	; 0x44
  hadc2.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_NONE;
 80008a8:	4b41      	ldr	r3, [pc, #260]	; (80009b0 <MX_ADC2_Init+0x188>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	649a      	str	r2, [r3, #72]	; 0x48
  hadc2.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 80008ae:	4b40      	ldr	r3, [pc, #256]	; (80009b0 <MX_ADC2_Init+0x188>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	64da      	str	r2, [r3, #76]	; 0x4c
  hadc2.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 80008b4:	4b3e      	ldr	r3, [pc, #248]	; (80009b0 <MX_ADC2_Init+0x188>)
 80008b6:	2201      	movs	r2, #1
 80008b8:	651a      	str	r2, [r3, #80]	; 0x50
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80008ba:	483d      	ldr	r0, [pc, #244]	; (80009b0 <MX_ADC2_Init+0x188>)
 80008bc:	f001 fb00 	bl	8001ec0 <HAL_ADC_Init>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d001      	beq.n	80008ca <MX_ADC2_Init+0xa2>
  {
    Error_Handler();
 80008c6:	f000 fc93 	bl	80011f0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80008ca:	4b3b      	ldr	r3, [pc, #236]	; (80009b8 <MX_ADC2_Init+0x190>)
 80008cc:	643b      	str	r3, [r7, #64]	; 0x40
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008ce:	2306      	movs	r3, #6
 80008d0:	647b      	str	r3, [r7, #68]	; 0x44
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80008d2:	2300      	movs	r3, #0
 80008d4:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 80008d6:	4b39      	ldr	r3, [pc, #228]	; (80009bc <MX_ADC2_Init+0x194>)
 80008d8:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80008da:	2304      	movs	r3, #4
 80008dc:	653b      	str	r3, [r7, #80]	; 0x50
  sConfig.Offset = 0;
 80008de:	2300      	movs	r3, #0
 80008e0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80008e2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80008e6:	4619      	mov	r1, r3
 80008e8:	4831      	ldr	r0, [pc, #196]	; (80009b0 <MX_ADC2_Init+0x188>)
 80008ea:	f001 fcbb 	bl	8002264 <HAL_ADC_ConfigChannel>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d001      	beq.n	80008f8 <MX_ADC2_Init+0xd0>
  {
    Error_Handler();
 80008f4:	f000 fc7c 	bl	80011f0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80008f8:	230c      	movs	r3, #12
 80008fa:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80008fc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000900:	4619      	mov	r1, r3
 8000902:	482b      	ldr	r0, [pc, #172]	; (80009b0 <MX_ADC2_Init+0x188>)
 8000904:	f001 fcae 	bl	8002264 <HAL_ADC_ConfigChannel>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <MX_ADC2_Init+0xea>
  {
    Error_Handler();
 800090e:	f000 fc6f 	bl	80011f0 <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_4;
 8000912:	4b29      	ldr	r3, [pc, #164]	; (80009b8 <MX_ADC2_Init+0x190>)
 8000914:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8000916:	2309      	movs	r3, #9
 8000918:	60bb      	str	r3, [r7, #8]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800091a:	2300      	movs	r3, #0
 800091c:	60fb      	str	r3, [r7, #12]
  sConfigInjected.InjectedSingleDiff = ADC_DIFFERENTIAL_ENDED;
 800091e:	4b27      	ldr	r3, [pc, #156]	; (80009bc <MX_ADC2_Init+0x194>)
 8000920:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 8000922:	2304      	movs	r3, #4
 8000924:	617b      	str	r3, [r7, #20]
  sConfigInjected.InjectedOffset = 0;
 8000926:	2300      	movs	r3, #0
 8000928:	61bb      	str	r3, [r7, #24]
  sConfigInjected.InjectedNbrOfConversion = 4;
 800092a:	2304      	movs	r3, #4
 800092c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 800092e:	2300      	movs	r3, #0
 8000930:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sConfigInjected.AutoInjectedConv = DISABLE;
 8000934:	2300      	movs	r3, #0
 8000936:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sConfigInjected.QueueInjectedContext = DISABLE;
 800093a:	2300      	movs	r3, #0
 800093c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sConfigInjected.InjecOversamplingMode = DISABLE;
 8000940:	2300      	movs	r3, #0
 8000942:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8000946:	1d3b      	adds	r3, r7, #4
 8000948:	4619      	mov	r1, r3
 800094a:	4819      	ldr	r0, [pc, #100]	; (80009b0 <MX_ADC2_Init+0x188>)
 800094c:	f002 fcaa 	bl	80032a4 <HAL_ADCEx_InjectedConfigChannel>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <MX_ADC2_Init+0x132>
  {
    Error_Handler();
 8000956:	f000 fc4b 	bl	80011f0 <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 800095a:	f240 130f 	movw	r3, #271	; 0x10f
 800095e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8000960:	1d3b      	adds	r3, r7, #4
 8000962:	4619      	mov	r1, r3
 8000964:	4812      	ldr	r0, [pc, #72]	; (80009b0 <MX_ADC2_Init+0x188>)
 8000966:	f002 fc9d 	bl	80032a4 <HAL_ADCEx_InjectedConfigChannel>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d001      	beq.n	8000974 <MX_ADC2_Init+0x14c>
  {
    Error_Handler();
 8000970:	f000 fc3e 	bl	80011f0 <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_3;
 8000974:	f240 2315 	movw	r3, #533	; 0x215
 8000978:	60bb      	str	r3, [r7, #8]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 800097a:	1d3b      	adds	r3, r7, #4
 800097c:	4619      	mov	r1, r3
 800097e:	480c      	ldr	r0, [pc, #48]	; (80009b0 <MX_ADC2_Init+0x188>)
 8000980:	f002 fc90 	bl	80032a4 <HAL_ADCEx_InjectedConfigChannel>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	d001      	beq.n	800098e <MX_ADC2_Init+0x166>
  {
    Error_Handler();
 800098a:	f000 fc31 	bl	80011f0 <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_4;
 800098e:	f240 331b 	movw	r3, #795	; 0x31b
 8000992:	60bb      	str	r3, [r7, #8]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8000994:	1d3b      	adds	r3, r7, #4
 8000996:	4619      	mov	r1, r3
 8000998:	4805      	ldr	r0, [pc, #20]	; (80009b0 <MX_ADC2_Init+0x188>)
 800099a:	f002 fc83 	bl	80032a4 <HAL_ADCEx_InjectedConfigChannel>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d001      	beq.n	80009a8 <MX_ADC2_Init+0x180>
  {
    Error_Handler();
 80009a4:	f000 fc24 	bl	80011f0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80009a8:	bf00      	nop
 80009aa:	3760      	adds	r7, #96	; 0x60
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	200000a4 	.word	0x200000a4
 80009b4:	50000100 	.word	0x50000100
 80009b8:	10c00010 	.word	0x10c00010
 80009bc:	407f0000 	.word	0x407f0000

080009c0 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b088      	sub	sp, #32
 80009c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80009c6:	463b      	mov	r3, r7
 80009c8:	2220      	movs	r2, #32
 80009ca:	2100      	movs	r1, #0
 80009cc:	4618      	mov	r0, r3
 80009ce:	f007 f8d5 	bl	8007b7c <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 80009d2:	4b2b      	ldr	r3, [pc, #172]	; (8000a80 <MX_ADC3_Init+0xc0>)
 80009d4:	4a2b      	ldr	r2, [pc, #172]	; (8000a84 <MX_ADC3_Init+0xc4>)
 80009d6:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80009d8:	4b29      	ldr	r3, [pc, #164]	; (8000a80 <MX_ADC3_Init+0xc0>)
 80009da:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80009de:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80009e0:	4b27      	ldr	r3, [pc, #156]	; (8000a80 <MX_ADC3_Init+0xc0>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80009e6:	4b26      	ldr	r3, [pc, #152]	; (8000a80 <MX_ADC3_Init+0xc0>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	60da      	str	r2, [r3, #12]
  hadc3.Init.GainCompensation = 0;
 80009ec:	4b24      	ldr	r3, [pc, #144]	; (8000a80 <MX_ADC3_Init+0xc0>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	611a      	str	r2, [r3, #16]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80009f2:	4b23      	ldr	r3, [pc, #140]	; (8000a80 <MX_ADC3_Init+0xc0>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	615a      	str	r2, [r3, #20]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80009f8:	4b21      	ldr	r3, [pc, #132]	; (8000a80 <MX_ADC3_Init+0xc0>)
 80009fa:	2204      	movs	r2, #4
 80009fc:	619a      	str	r2, [r3, #24]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80009fe:	4b20      	ldr	r3, [pc, #128]	; (8000a80 <MX_ADC3_Init+0xc0>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000a04:	4b1e      	ldr	r3, [pc, #120]	; (8000a80 <MX_ADC3_Init+0xc0>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	775a      	strb	r2, [r3, #29]
  hadc3.Init.NbrOfConversion = 1;
 8000a0a:	4b1d      	ldr	r3, [pc, #116]	; (8000a80 <MX_ADC3_Init+0xc0>)
 8000a0c:	2201      	movs	r2, #1
 8000a0e:	621a      	str	r2, [r3, #32]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000a10:	4b1b      	ldr	r3, [pc, #108]	; (8000a80 <MX_ADC3_Init+0xc0>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a18:	4b19      	ldr	r3, [pc, #100]	; (8000a80 <MX_ADC3_Init+0xc0>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a1e:	4b18      	ldr	r3, [pc, #96]	; (8000a80 <MX_ADC3_Init+0xc0>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000a24:	4b16      	ldr	r3, [pc, #88]	; (8000a80 <MX_ADC3_Init+0xc0>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000a2c:	4b14      	ldr	r3, [pc, #80]	; (8000a80 <MX_ADC3_Init+0xc0>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc3.Init.OversamplingMode = DISABLE;
 8000a32:	4b13      	ldr	r3, [pc, #76]	; (8000a80 <MX_ADC3_Init+0xc0>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000a3a:	4811      	ldr	r0, [pc, #68]	; (8000a80 <MX_ADC3_Init+0xc0>)
 8000a3c:	f001 fa40 	bl	8001ec0 <HAL_ADC_Init>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d001      	beq.n	8000a4a <MX_ADC3_Init+0x8a>
  {
    Error_Handler();
 8000a46:	f000 fbd3 	bl	80011f0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000a4a:	4b0f      	ldr	r3, [pc, #60]	; (8000a88 <MX_ADC3_Init+0xc8>)
 8000a4c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a4e:	2306      	movs	r3, #6
 8000a50:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000a52:	2300      	movs	r3, #0
 8000a54:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000a56:	237f      	movs	r3, #127	; 0x7f
 8000a58:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000a5a:	2304      	movs	r3, #4
 8000a5c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000a62:	463b      	mov	r3, r7
 8000a64:	4619      	mov	r1, r3
 8000a66:	4806      	ldr	r0, [pc, #24]	; (8000a80 <MX_ADC3_Init+0xc0>)
 8000a68:	f001 fbfc 	bl	8002264 <HAL_ADC_ConfigChannel>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d001      	beq.n	8000a76 <MX_ADC3_Init+0xb6>
  {
    Error_Handler();
 8000a72:	f000 fbbd 	bl	80011f0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000a76:	bf00      	nop
 8000a78:	3720      	adds	r7, #32
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	20000110 	.word	0x20000110
 8000a84:	50000400 	.word	0x50000400
 8000a88:	14f00020 	.word	0x14f00020

08000a8c <MX_COMP1_Init>:
  * @brief COMP1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP1_Init(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	af00      	add	r7, sp, #0
  /* USER CODE END COMP1_Init 0 */

  /* USER CODE BEGIN COMP1_Init 1 */

  /* USER CODE END COMP1_Init 1 */
  hcomp1.Instance = COMP1;
 8000a90:	4b10      	ldr	r3, [pc, #64]	; (8000ad4 <MX_COMP1_Init+0x48>)
 8000a92:	4a11      	ldr	r2, [pc, #68]	; (8000ad8 <MX_COMP1_Init+0x4c>)
 8000a94:	601a      	str	r2, [r3, #0]
  hcomp1.Init.InputPlus = COMP_INPUT_PLUS_IO2;
 8000a96:	4b0f      	ldr	r3, [pc, #60]	; (8000ad4 <MX_COMP1_Init+0x48>)
 8000a98:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a9c:	605a      	str	r2, [r3, #4]
  hcomp1.Init.InputMinus = COMP_INPUT_MINUS_DAC1_CH1;
 8000a9e:	4b0d      	ldr	r3, [pc, #52]	; (8000ad4 <MX_COMP1_Init+0x48>)
 8000aa0:	2250      	movs	r2, #80	; 0x50
 8000aa2:	609a      	str	r2, [r3, #8]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_INVERTED;
 8000aa4:	4b0b      	ldr	r3, [pc, #44]	; (8000ad4 <MX_COMP1_Init+0x48>)
 8000aa6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000aaa:	611a      	str	r2, [r3, #16]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_30MV;
 8000aac:	4b09      	ldr	r3, [pc, #36]	; (8000ad4 <MX_COMP1_Init+0x48>)
 8000aae:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000ab2:	60da      	str	r2, [r3, #12]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8000ab4:	4b07      	ldr	r3, [pc, #28]	; (8000ad4 <MX_COMP1_Init+0x48>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	615a      	str	r2, [r3, #20]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8000aba:	4b06      	ldr	r3, [pc, #24]	; (8000ad4 <MX_COMP1_Init+0x48>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	619a      	str	r2, [r3, #24]
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 8000ac0:	4804      	ldr	r0, [pc, #16]	; (8000ad4 <MX_COMP1_Init+0x48>)
 8000ac2:	f003 fa99 	bl	8003ff8 <HAL_COMP_Init>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d001      	beq.n	8000ad0 <MX_COMP1_Init+0x44>
  {
    Error_Handler();
 8000acc:	f000 fb90 	bl	80011f0 <Error_Handler>
  }
  /* USER CODE BEGIN COMP1_Init 2 */

  /* USER CODE END COMP1_Init 2 */

}
 8000ad0:	bf00      	nop
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	200001dc 	.word	0x200001dc
 8000ad8:	40010200 	.word	0x40010200

08000adc <MX_COMP4_Init>:
  * @brief COMP4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP4_Init(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0
  /* USER CODE END COMP4_Init 0 */

  /* USER CODE BEGIN COMP4_Init 1 */

  /* USER CODE END COMP4_Init 1 */
  hcomp4.Instance = COMP4;
 8000ae0:	4b0f      	ldr	r3, [pc, #60]	; (8000b20 <MX_COMP4_Init+0x44>)
 8000ae2:	4a10      	ldr	r2, [pc, #64]	; (8000b24 <MX_COMP4_Init+0x48>)
 8000ae4:	601a      	str	r2, [r3, #0]
  hcomp4.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 8000ae6:	4b0e      	ldr	r3, [pc, #56]	; (8000b20 <MX_COMP4_Init+0x44>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	605a      	str	r2, [r3, #4]
  hcomp4.Init.InputMinus = COMP_INPUT_MINUS_DAC3_CH2;
 8000aec:	4b0c      	ldr	r3, [pc, #48]	; (8000b20 <MX_COMP4_Init+0x44>)
 8000aee:	2240      	movs	r2, #64	; 0x40
 8000af0:	609a      	str	r2, [r3, #8]
  hcomp4.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8000af2:	4b0b      	ldr	r3, [pc, #44]	; (8000b20 <MX_COMP4_Init+0x44>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	611a      	str	r2, [r3, #16]
  hcomp4.Init.Hysteresis = COMP_HYSTERESIS_30MV;
 8000af8:	4b09      	ldr	r3, [pc, #36]	; (8000b20 <MX_COMP4_Init+0x44>)
 8000afa:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000afe:	60da      	str	r2, [r3, #12]
  hcomp4.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8000b00:	4b07      	ldr	r3, [pc, #28]	; (8000b20 <MX_COMP4_Init+0x44>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	615a      	str	r2, [r3, #20]
  hcomp4.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8000b06:	4b06      	ldr	r3, [pc, #24]	; (8000b20 <MX_COMP4_Init+0x44>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	619a      	str	r2, [r3, #24]
  if (HAL_COMP_Init(&hcomp4) != HAL_OK)
 8000b0c:	4804      	ldr	r0, [pc, #16]	; (8000b20 <MX_COMP4_Init+0x44>)
 8000b0e:	f003 fa73 	bl	8003ff8 <HAL_COMP_Init>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d001      	beq.n	8000b1c <MX_COMP4_Init+0x40>
  {
    Error_Handler();
 8000b18:	f000 fb6a 	bl	80011f0 <Error_Handler>
  }
  /* USER CODE BEGIN COMP4_Init 2 */

  /* USER CODE END COMP4_Init 2 */

}
 8000b1c:	bf00      	nop
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	20000200 	.word	0x20000200
 8000b24:	4001020c 	.word	0x4001020c

08000b28 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b08c      	sub	sp, #48	; 0x30
 8000b2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000b2e:	463b      	mov	r3, r7
 8000b30:	2230      	movs	r2, #48	; 0x30
 8000b32:	2100      	movs	r1, #0
 8000b34:	4618      	mov	r0, r3
 8000b36:	f007 f821 	bl	8007b7c <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000b3a:	4b1d      	ldr	r3, [pc, #116]	; (8000bb0 <MX_DAC1_Init+0x88>)
 8000b3c:	4a1d      	ldr	r2, [pc, #116]	; (8000bb4 <MX_DAC1_Init+0x8c>)
 8000b3e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000b40:	481b      	ldr	r0, [pc, #108]	; (8000bb0 <MX_DAC1_Init+0x88>)
 8000b42:	f003 fc8c 	bl	800445e <HAL_DAC_Init>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d001      	beq.n	8000b50 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000b4c:	f000 fb50 	bl	80011f0 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8000b50:	2302      	movs	r3, #2
 8000b52:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8000b54:	2300      	movs	r3, #0
 8000b56:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000b60:	2300      	movs	r3, #0
 8000b62:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8000b64:	2300      	movs	r3, #0
 8000b66:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 8000b68:	2302      	movs	r3, #2
 8000b6a:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_INTERNAL;
 8000b6c:	2302      	movs	r3, #2
 8000b6e:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000b70:	2300      	movs	r3, #0
 8000b72:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000b74:	463b      	mov	r3, r7
 8000b76:	2200      	movs	r2, #0
 8000b78:	4619      	mov	r1, r3
 8000b7a:	480d      	ldr	r0, [pc, #52]	; (8000bb0 <MX_DAC1_Init+0x88>)
 8000b7c:	f003 fc92 	bl	80044a4 <HAL_DAC_ConfigChannel>
 8000b80:	4603      	mov	r3, r0
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d001      	beq.n	8000b8a <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 8000b86:	f000 fb33 	bl	80011f0 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 8000b8e:	2301      	movs	r3, #1
 8000b90:	61bb      	str	r3, [r7, #24]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000b92:	463b      	mov	r3, r7
 8000b94:	2210      	movs	r2, #16
 8000b96:	4619      	mov	r1, r3
 8000b98:	4805      	ldr	r0, [pc, #20]	; (8000bb0 <MX_DAC1_Init+0x88>)
 8000b9a:	f003 fc83 	bl	80044a4 <HAL_DAC_ConfigChannel>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d001      	beq.n	8000ba8 <MX_DAC1_Init+0x80>
  {
    Error_Handler();
 8000ba4:	f000 fb24 	bl	80011f0 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000ba8:	bf00      	nop
 8000baa:	3730      	adds	r7, #48	; 0x30
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}
 8000bb0:	20000224 	.word	0x20000224
 8000bb4:	50000800 	.word	0x50000800

08000bb8 <MX_DAC3_Init>:
  * @brief DAC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC3_Init(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b08c      	sub	sp, #48	; 0x30
 8000bbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC3_Init 0 */

  /* USER CODE END DAC3_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000bbe:	463b      	mov	r3, r7
 8000bc0:	2230      	movs	r2, #48	; 0x30
 8000bc2:	2100      	movs	r1, #0
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f006 ffd9 	bl	8007b7c <memset>

  /* USER CODE END DAC3_Init 1 */

  /** DAC Initialization
  */
  hdac3.Instance = DAC3;
 8000bca:	4b1b      	ldr	r3, [pc, #108]	; (8000c38 <MX_DAC3_Init+0x80>)
 8000bcc:	4a1b      	ldr	r2, [pc, #108]	; (8000c3c <MX_DAC3_Init+0x84>)
 8000bce:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac3) != HAL_OK)
 8000bd0:	4819      	ldr	r0, [pc, #100]	; (8000c38 <MX_DAC3_Init+0x80>)
 8000bd2:	f003 fc44 	bl	800445e <HAL_DAC_Init>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d001      	beq.n	8000be0 <MX_DAC3_Init+0x28>
  {
    Error_Handler();
 8000bdc:	f000 fb08 	bl	80011f0 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8000be0:	2302      	movs	r3, #2
 8000be2:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8000be4:	2300      	movs	r3, #0
 8000be6:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8000be8:	2300      	movs	r3, #0
 8000bea:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000bec:	2300      	movs	r3, #0
 8000bee:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 8000bf8:	2302      	movs	r3, #2
 8000bfa:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_INTERNAL;
 8000bfc:	2302      	movs	r3, #2
 8000bfe:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000c00:	2300      	movs	r3, #0
 8000c02:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac3, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000c04:	463b      	mov	r3, r7
 8000c06:	2200      	movs	r2, #0
 8000c08:	4619      	mov	r1, r3
 8000c0a:	480b      	ldr	r0, [pc, #44]	; (8000c38 <MX_DAC3_Init+0x80>)
 8000c0c:	f003 fc4a 	bl	80044a4 <HAL_DAC_ConfigChannel>
 8000c10:	4603      	mov	r3, r0
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d001      	beq.n	8000c1a <MX_DAC3_Init+0x62>
  {
    Error_Handler();
 8000c16:	f000 faeb 	bl	80011f0 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac3, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000c1a:	463b      	mov	r3, r7
 8000c1c:	2210      	movs	r2, #16
 8000c1e:	4619      	mov	r1, r3
 8000c20:	4805      	ldr	r0, [pc, #20]	; (8000c38 <MX_DAC3_Init+0x80>)
 8000c22:	f003 fc3f 	bl	80044a4 <HAL_DAC_ConfigChannel>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d001      	beq.n	8000c30 <MX_DAC3_Init+0x78>
  {
    Error_Handler();
 8000c2c:	f000 fae0 	bl	80011f0 <Error_Handler>
  }
  /* USER CODE BEGIN DAC3_Init 2 */

  /* USER CODE END DAC3_Init 2 */

}
 8000c30:	bf00      	nop
 8000c32:	3730      	adds	r7, #48	; 0x30
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	20000238 	.word	0x20000238
 8000c3c:	50001000 	.word	0x50001000

08000c40 <MX_OPAMP2_Init>:
  * @brief OPAMP2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP2_Init(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b08a      	sub	sp, #40	; 0x28
 8000c44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OPAMP2_Init 0 */

  /* USER CODE END OPAMP2_Init 0 */

  LL_OPAMP_InitTypeDef OPAMP_InitStruct = {0};
 8000c46:	f107 0318 	add.w	r3, r7, #24
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	601a      	str	r2, [r3, #0]
 8000c4e:	605a      	str	r2, [r3, #4]
 8000c50:	609a      	str	r2, [r3, #8]
 8000c52:	60da      	str	r2, [r3, #12]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c54:	463b      	mov	r3, r7
 8000c56:	2200      	movs	r2, #0
 8000c58:	601a      	str	r2, [r3, #0]
 8000c5a:	605a      	str	r2, [r3, #4]
 8000c5c:	609a      	str	r2, [r3, #8]
 8000c5e:	60da      	str	r2, [r3, #12]
 8000c60:	611a      	str	r2, [r3, #16]
 8000c62:	615a      	str	r2, [r3, #20]

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8000c64:	2001      	movs	r0, #1
 8000c66:	f7ff fb23 	bl	80002b0 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8000c6a:	2002      	movs	r0, #2
 8000c6c:	f7ff fb20 	bl	80002b0 <LL_AHB2_GRP1_EnableClock>
  /**OPAMP2 GPIO Configuration
  PA6   ------> OPAMP2_VOUT
  PB0   ------> OPAMP2_VINP
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 8000c70:	2340      	movs	r3, #64	; 0x40
 8000c72:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000c74:	2303      	movs	r3, #3
 8000c76:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c7c:	463b      	mov	r3, r7
 8000c7e:	4619      	mov	r1, r3
 8000c80:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c84:	f006 fe95 	bl	80079b2 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 8000c88:	2301      	movs	r3, #1
 8000c8a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000c8c:	2303      	movs	r3, #3
 8000c8e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000c90:	2300      	movs	r3, #0
 8000c92:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c94:	463b      	mov	r3, r7
 8000c96:	4619      	mov	r1, r3
 8000c98:	4812      	ldr	r0, [pc, #72]	; (8000ce4 <MX_OPAMP2_Init+0xa4>)
 8000c9a:	f006 fe8a 	bl	80079b2 <LL_GPIO_Init>

  /* USER CODE BEGIN OPAMP2_Init 1 */

  /* USER CODE END OPAMP2_Init 1 */
  OPAMP_InitStruct.PowerMode = LL_OPAMP_POWERMODE_HIGHSPEED;
 8000c9e:	2380      	movs	r3, #128	; 0x80
 8000ca0:	61bb      	str	r3, [r7, #24]
  OPAMP_InitStruct.FunctionalMode = LL_OPAMP_MODE_PGA;
 8000ca2:	2340      	movs	r3, #64	; 0x40
 8000ca4:	61fb      	str	r3, [r7, #28]
  OPAMP_InitStruct.InputNonInverting = LL_OPAMP_INPUT_NONINVERT_IO2;
 8000ca6:	2308      	movs	r3, #8
 8000ca8:	623b      	str	r3, [r7, #32]
  OPAMP_InitStruct.InputInverting = LL_OPAMP_INPUT_INVERT_CONNECT_NO;
 8000caa:	2340      	movs	r3, #64	; 0x40
 8000cac:	627b      	str	r3, [r7, #36]	; 0x24
  LL_OPAMP_Init(OPAMP2, &OPAMP_InitStruct);
 8000cae:	f107 0318 	add.w	r3, r7, #24
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	480c      	ldr	r0, [pc, #48]	; (8000ce8 <MX_OPAMP2_Init+0xa8>)
 8000cb6:	f006 fefe 	bl	8007ab6 <LL_OPAMP_Init>
  LL_OPAMP_SetInputsMuxMode(OPAMP2, LL_OPAMP_INPUT_MUX_DISABLE);
 8000cba:	2100      	movs	r1, #0
 8000cbc:	480a      	ldr	r0, [pc, #40]	; (8000ce8 <MX_OPAMP2_Init+0xa8>)
 8000cbe:	f7ff fabe 	bl	800023e <LL_OPAMP_SetInputsMuxMode>
  LL_OPAMP_SetInternalOutput(OPAMP2, LL_OPAMP_INTERNAL_OUPUT_DISABLED);
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	4808      	ldr	r0, [pc, #32]	; (8000ce8 <MX_OPAMP2_Init+0xa8>)
 8000cc6:	f7ff facd 	bl	8000264 <LL_OPAMP_SetInternalOutput>
  LL_OPAMP_SetPGAGain(OPAMP2, LL_OPAMP_PGA_GAIN_2_OR_MINUS_1);
 8000cca:	2100      	movs	r1, #0
 8000ccc:	4806      	ldr	r0, [pc, #24]	; (8000ce8 <MX_OPAMP2_Init+0xa8>)
 8000cce:	f7ff faa3 	bl	8000218 <LL_OPAMP_SetPGAGain>
  LL_OPAMP_SetTrimmingMode(OPAMP2, LL_OPAMP_TRIMMING_FACTORY);
 8000cd2:	2100      	movs	r1, #0
 8000cd4:	4804      	ldr	r0, [pc, #16]	; (8000ce8 <MX_OPAMP2_Init+0xa8>)
 8000cd6:	f7ff fad8 	bl	800028a <LL_OPAMP_SetTrimmingMode>
  /* USER CODE BEGIN OPAMP2_Init 2 */

  /* USER CODE END OPAMP2_Init 2 */

}
 8000cda:	bf00      	nop
 8000cdc:	3728      	adds	r7, #40	; 0x28
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	48000400 	.word	0x48000400
 8000ce8:	40010304 	.word	0x40010304

08000cec <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000cf0:	4b1b      	ldr	r3, [pc, #108]	; (8000d60 <MX_SPI3_Init+0x74>)
 8000cf2:	4a1c      	ldr	r2, [pc, #112]	; (8000d64 <MX_SPI3_Init+0x78>)
 8000cf4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000cf6:	4b1a      	ldr	r3, [pc, #104]	; (8000d60 <MX_SPI3_Init+0x74>)
 8000cf8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000cfc:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000cfe:	4b18      	ldr	r3, [pc, #96]	; (8000d60 <MX_SPI3_Init+0x74>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 8000d04:	4b16      	ldr	r3, [pc, #88]	; (8000d60 <MX_SPI3_Init+0x74>)
 8000d06:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 8000d0a:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d0c:	4b14      	ldr	r3, [pc, #80]	; (8000d60 <MX_SPI3_Init+0x74>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d12:	4b13      	ldr	r3, [pc, #76]	; (8000d60 <MX_SPI3_Init+0x74>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000d18:	4b11      	ldr	r3, [pc, #68]	; (8000d60 <MX_SPI3_Init+0x74>)
 8000d1a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d1e:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000d20:	4b0f      	ldr	r3, [pc, #60]	; (8000d60 <MX_SPI3_Init+0x74>)
 8000d22:	2210      	movs	r2, #16
 8000d24:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d26:	4b0e      	ldr	r3, [pc, #56]	; (8000d60 <MX_SPI3_Init+0x74>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d2c:	4b0c      	ldr	r3, [pc, #48]	; (8000d60 <MX_SPI3_Init+0x74>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d32:	4b0b      	ldr	r3, [pc, #44]	; (8000d60 <MX_SPI3_Init+0x74>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000d38:	4b09      	ldr	r3, [pc, #36]	; (8000d60 <MX_SPI3_Init+0x74>)
 8000d3a:	2207      	movs	r2, #7
 8000d3c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000d3e:	4b08      	ldr	r3, [pc, #32]	; (8000d60 <MX_SPI3_Init+0x74>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000d44:	4b06      	ldr	r3, [pc, #24]	; (8000d60 <MX_SPI3_Init+0x74>)
 8000d46:	2208      	movs	r2, #8
 8000d48:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000d4a:	4805      	ldr	r0, [pc, #20]	; (8000d60 <MX_SPI3_Init+0x74>)
 8000d4c:	f005 f8a8 	bl	8005ea0 <HAL_SPI_Init>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d001      	beq.n	8000d5a <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000d56:	f000 fa4b 	bl	80011f0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000d5a:	bf00      	nop
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	2000024c 	.word	0x2000024c
 8000d64:	40003c00 	.word	0x40003c00

08000d68 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b09e      	sub	sp, #120	; 0x78
 8000d6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d6e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000d72:	2200      	movs	r2, #0
 8000d74:	601a      	str	r2, [r3, #0]
 8000d76:	605a      	str	r2, [r3, #4]
 8000d78:	609a      	str	r2, [r3, #8]
 8000d7a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d7c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000d80:	2200      	movs	r2, #0
 8000d82:	601a      	str	r2, [r3, #0]
 8000d84:	605a      	str	r2, [r3, #4]
 8000d86:	609a      	str	r2, [r3, #8]
  TIMEx_BreakInputConfigTypeDef sBreakInputConfig = {0};
 8000d88:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	601a      	str	r2, [r3, #0]
 8000d90:	605a      	str	r2, [r3, #4]
 8000d92:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d94:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000d98:	2200      	movs	r2, #0
 8000d9a:	601a      	str	r2, [r3, #0]
 8000d9c:	605a      	str	r2, [r3, #4]
 8000d9e:	609a      	str	r2, [r3, #8]
 8000da0:	60da      	str	r2, [r3, #12]
 8000da2:	611a      	str	r2, [r3, #16]
 8000da4:	615a      	str	r2, [r3, #20]
 8000da6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000da8:	463b      	mov	r3, r7
 8000daa:	2234      	movs	r2, #52	; 0x34
 8000dac:	2100      	movs	r1, #0
 8000dae:	4618      	mov	r0, r3
 8000db0:	f006 fee4 	bl	8007b7c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000db4:	4b5c      	ldr	r3, [pc, #368]	; (8000f28 <MX_TIM1_Init+0x1c0>)
 8000db6:	4a5d      	ldr	r2, [pc, #372]	; (8000f2c <MX_TIM1_Init+0x1c4>)
 8000db8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000dba:	4b5b      	ldr	r3, [pc, #364]	; (8000f28 <MX_TIM1_Init+0x1c0>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dc0:	4b59      	ldr	r3, [pc, #356]	; (8000f28 <MX_TIM1_Init+0x1c0>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000dc6:	4b58      	ldr	r3, [pc, #352]	; (8000f28 <MX_TIM1_Init+0x1c0>)
 8000dc8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000dcc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dce:	4b56      	ldr	r3, [pc, #344]	; (8000f28 <MX_TIM1_Init+0x1c0>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000dd4:	4b54      	ldr	r3, [pc, #336]	; (8000f28 <MX_TIM1_Init+0x1c0>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dda:	4b53      	ldr	r3, [pc, #332]	; (8000f28 <MX_TIM1_Init+0x1c0>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000de0:	4851      	ldr	r0, [pc, #324]	; (8000f28 <MX_TIM1_Init+0x1c0>)
 8000de2:	f005 f908 	bl	8005ff6 <HAL_TIM_Base_Init>
 8000de6:	4603      	mov	r3, r0
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d001      	beq.n	8000df0 <MX_TIM1_Init+0x88>
  {
    Error_Handler();
 8000dec:	f000 fa00 	bl	80011f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000df0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000df4:	66bb      	str	r3, [r7, #104]	; 0x68
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000df6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	484a      	ldr	r0, [pc, #296]	; (8000f28 <MX_TIM1_Init+0x1c0>)
 8000dfe:	f005 fc9f 	bl	8006740 <HAL_TIM_ConfigClockSource>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d001      	beq.n	8000e0c <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8000e08:	f000 f9f2 	bl	80011f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000e0c:	4846      	ldr	r0, [pc, #280]	; (8000f28 <MX_TIM1_Init+0x1c0>)
 8000e0e:	f005 f949 	bl	80060a4 <HAL_TIM_PWM_Init>
 8000e12:	4603      	mov	r3, r0
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d001      	beq.n	8000e1c <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 8000e18:	f000 f9ea 	bl	80011f0 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim1, TIM_OPMODE_SINGLE) != HAL_OK)
 8000e1c:	2108      	movs	r1, #8
 8000e1e:	4842      	ldr	r0, [pc, #264]	; (8000f28 <MX_TIM1_Init+0x1c0>)
 8000e20:	f005 f9a1 	bl	8006166 <HAL_TIM_OnePulse_Init>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d001      	beq.n	8000e2e <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8000e2a:	f000 f9e1 	bl	80011f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000e2e:	2320      	movs	r3, #32
 8000e30:	65fb      	str	r3, [r7, #92]	; 0x5c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000e32:	2300      	movs	r3, #0
 8000e34:	663b      	str	r3, [r7, #96]	; 0x60
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e36:	2300      	movs	r3, #0
 8000e38:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000e3a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000e3e:	4619      	mov	r1, r3
 8000e40:	4839      	ldr	r0, [pc, #228]	; (8000f28 <MX_TIM1_Init+0x1c0>)
 8000e42:	f006 fa17 	bl	8007274 <HAL_TIMEx_MasterConfigSynchronization>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d001      	beq.n	8000e50 <MX_TIM1_Init+0xe8>
  {
    Error_Handler();
 8000e4c:	f000 f9d0 	bl	80011f0 <Error_Handler>
  }
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_COMP1;
 8000e50:	2302      	movs	r3, #2
 8000e52:	653b      	str	r3, [r7, #80]	; 0x50
  sBreakInputConfig.Enable = TIM_BREAKINPUTSOURCE_ENABLE;
 8000e54:	2301      	movs	r3, #1
 8000e56:	657b      	str	r3, [r7, #84]	; 0x54
  sBreakInputConfig.Polarity = TIM_BREAKINPUTSOURCE_POLARITY_HIGH;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 8000e5c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000e60:	461a      	mov	r2, r3
 8000e62:	2101      	movs	r1, #1
 8000e64:	4830      	ldr	r0, [pc, #192]	; (8000f28 <MX_TIM1_Init+0x1c0>)
 8000e66:	f006 fb45 	bl	80074f4 <HAL_TIMEx_ConfigBreakInput>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d001      	beq.n	8000e74 <MX_TIM1_Init+0x10c>
  {
    Error_Handler();
 8000e70:	f000 f9be 	bl	80011f0 <Error_Handler>
  }
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_COMP4;
 8000e74:	2310      	movs	r3, #16
 8000e76:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 8000e78:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000e7c:	461a      	mov	r2, r3
 8000e7e:	2101      	movs	r1, #1
 8000e80:	4829      	ldr	r0, [pc, #164]	; (8000f28 <MX_TIM1_Init+0x1c0>)
 8000e82:	f006 fb37 	bl	80074f4 <HAL_TIMEx_ConfigBreakInput>
 8000e86:	4603      	mov	r3, r0
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d001      	beq.n	8000e90 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8000e8c:	f000 f9b0 	bl	80011f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e90:	2360      	movs	r3, #96	; 0x60
 8000e92:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 65535;
 8000e94:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e98:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8000e9a:	2302      	movs	r3, #2
 8000e9c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8000ea2:	2304      	movs	r3, #4
 8000ea4:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_SET;
 8000ea6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000eaa:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000eac:	2300      	movs	r3, #0
 8000eae:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000eb0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000eb4:	2204      	movs	r2, #4
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	481b      	ldr	r0, [pc, #108]	; (8000f28 <MX_TIM1_Init+0x1c0>)
 8000eba:	f005 fb2d 	bl	8006518 <HAL_TIM_PWM_ConfigChannel>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d001      	beq.n	8000ec8 <MX_TIM1_Init+0x160>
  {
    Error_Handler();
 8000ec4:	f000 f994 	bl	80011f0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8000ec8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000ecc:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 8000ece:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ed2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 8000edc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ee0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000ee2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ee6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 5;
 8000ee8:	2305      	movs	r3, #5
 8000eea:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000eec:	2300      	movs	r3, #0
 8000eee:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000ef4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000ef8:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000efa:	2300      	movs	r3, #0
 8000efc:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000efe:	2300      	movs	r3, #0
 8000f00:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000f02:	2300      	movs	r3, #0
 8000f04:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000f06:	463b      	mov	r3, r7
 8000f08:	4619      	mov	r1, r3
 8000f0a:	4807      	ldr	r0, [pc, #28]	; (8000f28 <MX_TIM1_Init+0x1c0>)
 8000f0c:	f006 fa40 	bl	8007390 <HAL_TIMEx_ConfigBreakDeadTime>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d001      	beq.n	8000f1a <MX_TIM1_Init+0x1b2>
  {
    Error_Handler();
 8000f16:	f000 f96b 	bl	80011f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000f1a:	4803      	ldr	r0, [pc, #12]	; (8000f28 <MX_TIM1_Init+0x1c0>)
 8000f1c:	f000 fc50 	bl	80017c0 <HAL_TIM_MspPostInit>

}
 8000f20:	bf00      	nop
 8000f22:	3778      	adds	r7, #120	; 0x78
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	200002b0 	.word	0x200002b0
 8000f2c:	40012c00 	.word	0x40012c00

08000f30 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b082      	sub	sp, #8
 8000f34:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000f36:	4b12      	ldr	r3, [pc, #72]	; (8000f80 <MX_DMA_Init+0x50>)
 8000f38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f3a:	4a11      	ldr	r2, [pc, #68]	; (8000f80 <MX_DMA_Init+0x50>)
 8000f3c:	f043 0304 	orr.w	r3, r3, #4
 8000f40:	6493      	str	r3, [r2, #72]	; 0x48
 8000f42:	4b0f      	ldr	r3, [pc, #60]	; (8000f80 <MX_DMA_Init+0x50>)
 8000f44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f46:	f003 0304 	and.w	r3, r3, #4
 8000f4a:	607b      	str	r3, [r7, #4]
 8000f4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f4e:	4b0c      	ldr	r3, [pc, #48]	; (8000f80 <MX_DMA_Init+0x50>)
 8000f50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f52:	4a0b      	ldr	r2, [pc, #44]	; (8000f80 <MX_DMA_Init+0x50>)
 8000f54:	f043 0301 	orr.w	r3, r3, #1
 8000f58:	6493      	str	r3, [r2, #72]	; 0x48
 8000f5a:	4b09      	ldr	r3, [pc, #36]	; (8000f80 <MX_DMA_Init+0x50>)
 8000f5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f5e:	f003 0301 	and.w	r3, r3, #1
 8000f62:	603b      	str	r3, [r7, #0]
 8000f64:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 8000f66:	2200      	movs	r2, #0
 8000f68:	2101      	movs	r1, #1
 8000f6a:	200b      	movs	r0, #11
 8000f6c:	f003 fa43 	bl	80043f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000f70:	200b      	movs	r0, #11
 8000f72:	f003 fa5a 	bl	800442a <HAL_NVIC_EnableIRQ>

}
 8000f76:	bf00      	nop
 8000f78:	3708      	adds	r7, #8
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	40021000 	.word	0x40021000

08000f84 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b08a      	sub	sp, #40	; 0x28
 8000f88:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f8a:	f107 0314 	add.w	r3, r7, #20
 8000f8e:	2200      	movs	r2, #0
 8000f90:	601a      	str	r2, [r3, #0]
 8000f92:	605a      	str	r2, [r3, #4]
 8000f94:	609a      	str	r2, [r3, #8]
 8000f96:	60da      	str	r2, [r3, #12]
 8000f98:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f9a:	4b33      	ldr	r3, [pc, #204]	; (8001068 <MX_GPIO_Init+0xe4>)
 8000f9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f9e:	4a32      	ldr	r2, [pc, #200]	; (8001068 <MX_GPIO_Init+0xe4>)
 8000fa0:	f043 0304 	orr.w	r3, r3, #4
 8000fa4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fa6:	4b30      	ldr	r3, [pc, #192]	; (8001068 <MX_GPIO_Init+0xe4>)
 8000fa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000faa:	f003 0304 	and.w	r3, r3, #4
 8000fae:	613b      	str	r3, [r7, #16]
 8000fb0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000fb2:	4b2d      	ldr	r3, [pc, #180]	; (8001068 <MX_GPIO_Init+0xe4>)
 8000fb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fb6:	4a2c      	ldr	r2, [pc, #176]	; (8001068 <MX_GPIO_Init+0xe4>)
 8000fb8:	f043 0320 	orr.w	r3, r3, #32
 8000fbc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fbe:	4b2a      	ldr	r3, [pc, #168]	; (8001068 <MX_GPIO_Init+0xe4>)
 8000fc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fc2:	f003 0320 	and.w	r3, r3, #32
 8000fc6:	60fb      	str	r3, [r7, #12]
 8000fc8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fca:	4b27      	ldr	r3, [pc, #156]	; (8001068 <MX_GPIO_Init+0xe4>)
 8000fcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fce:	4a26      	ldr	r2, [pc, #152]	; (8001068 <MX_GPIO_Init+0xe4>)
 8000fd0:	f043 0301 	orr.w	r3, r3, #1
 8000fd4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fd6:	4b24      	ldr	r3, [pc, #144]	; (8001068 <MX_GPIO_Init+0xe4>)
 8000fd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fda:	f003 0301 	and.w	r3, r3, #1
 8000fde:	60bb      	str	r3, [r7, #8]
 8000fe0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fe2:	4b21      	ldr	r3, [pc, #132]	; (8001068 <MX_GPIO_Init+0xe4>)
 8000fe4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fe6:	4a20      	ldr	r2, [pc, #128]	; (8001068 <MX_GPIO_Init+0xe4>)
 8000fe8:	f043 0302 	orr.w	r3, r3, #2
 8000fec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fee:	4b1e      	ldr	r3, [pc, #120]	; (8001068 <MX_GPIO_Init+0xe4>)
 8000ff0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ff2:	f003 0302 	and.w	r3, r3, #2
 8000ff6:	607b      	str	r3, [r7, #4]
 8000ff8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(STATUS1_GPIO_Port, STATUS1_Pin, GPIO_PIN_RESET);
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001000:	481a      	ldr	r0, [pc, #104]	; (800106c <MX_GPIO_Init+0xe8>)
 8001002:	f003 ff3d 	bl	8004e80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : STATUS1_Pin */
  GPIO_InitStruct.Pin = STATUS1_Pin;
 8001006:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800100a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800100c:	2301      	movs	r3, #1
 800100e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001010:	2300      	movs	r3, #0
 8001012:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001014:	2300      	movs	r3, #0
 8001016:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(STATUS1_GPIO_Port, &GPIO_InitStruct);
 8001018:	f107 0314 	add.w	r3, r7, #20
 800101c:	4619      	mov	r1, r3
 800101e:	4813      	ldr	r0, [pc, #76]	; (800106c <MX_GPIO_Init+0xe8>)
 8001020:	f003 fdac 	bl	8004b7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_10;
 8001024:	f44f 6382 	mov.w	r3, #1040	; 0x410
 8001028:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800102a:	2300      	movs	r3, #0
 800102c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102e:	2300      	movs	r3, #0
 8001030:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001032:	f107 0314 	add.w	r3, r7, #20
 8001036:	4619      	mov	r1, r3
 8001038:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800103c:	f003 fd9e 	bl	8004b7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001040:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001044:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001046:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800104a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104c:	2300      	movs	r3, #0
 800104e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001050:	f107 0314 	add.w	r3, r7, #20
 8001054:	4619      	mov	r1, r3
 8001056:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800105a:	f003 fd8f 	bl	8004b7c <HAL_GPIO_Init>

}
 800105e:	bf00      	nop
 8001060:	3728      	adds	r7, #40	; 0x28
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	40021000 	.word	0x40021000
 800106c:	48000800 	.word	0x48000800

08001070 <HAL_TIMEx_BreakCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001070:	b480      	push	{r7}
 8001072:	b083      	sub	sp, #12
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  if(Status_Val != 0x15) // NO GRID INSERTION
 8001078:	4b04      	ldr	r3, [pc, #16]	; (800108c <HAL_TIMEx_BreakCallback+0x1c>)
 800107a:	881b      	ldrh	r3, [r3, #0]
 800107c:	2b15      	cmp	r3, #21

	  }
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800107e:	bf00      	nop
 8001080:	370c      	adds	r7, #12
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr
 800108a:	bf00      	nop
 800108c:	20000326 	.word	0x20000326

08001090 <GetLSB>:

uint16_t GetLSB(uint32_t intValue)
{
 8001090:	b480      	push	{r7}
 8001092:	b083      	sub	sp, #12
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
	return (intValue & 0x0000FFFF);
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	b29b      	uxth	r3, r3
}
 800109c:	4618      	mov	r0, r3
 800109e:	370c      	adds	r7, #12
 80010a0:	46bd      	mov	sp, r7
 80010a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a6:	4770      	bx	lr

080010a8 <GetMSB>:

uint16_t GetMSB(uint32_t intValue)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b083      	sub	sp, #12
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
    return ((intValue & 0xFFFF0000)) >> 16;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	0c1b      	lsrs	r3, r3, #16
 80010b4:	b29b      	uxth	r3, r3
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	370c      	adds	r7, #12
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr

080010c2 <SPIx_Transfer2>:
  while ( !( SPIx->SR & SPI_SR_TXE ) ) {};
  // Send the bytes.
  *( uint16_t* )&( SPIx->DR ) = dat;
}

void SPIx_Transfer2(SPI_TypeDef *SPIx, uint16_t *outp, uint16_t *inp, uint16_t count) {
 80010c2:	b480      	push	{r7}
 80010c4:	b085      	sub	sp, #20
 80010c6:	af00      	add	r7, sp, #0
 80010c8:	60f8      	str	r0, [r7, #12]
 80010ca:	60b9      	str	r1, [r7, #8]
 80010cc:	607a      	str	r2, [r7, #4]
 80010ce:	807b      	strh	r3, [r7, #2]
    while(count--) {
 80010d0:	e01d      	b.n	800110e <SPIx_Transfer2+0x4c>
        while(!(SPIx->SR & SPI_SR_TXE))
 80010d2:	bf00      	nop
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	689b      	ldr	r3, [r3, #8]
 80010d8:	f003 0302 	and.w	r3, r3, #2
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d0f9      	beq.n	80010d4 <SPIx_Transfer2+0x12>
            ;
        *(volatile uint16_t *)&SPIx->DR = *outp++;
 80010e0:	68bb      	ldr	r3, [r7, #8]
 80010e2:	1c9a      	adds	r2, r3, #2
 80010e4:	60ba      	str	r2, [r7, #8]
 80010e6:	68fa      	ldr	r2, [r7, #12]
 80010e8:	320c      	adds	r2, #12
 80010ea:	881b      	ldrh	r3, [r3, #0]
 80010ec:	8013      	strh	r3, [r2, #0]
        while(!(SPIx->SR & SPI_SR_RXNE))
 80010ee:	bf00      	nop
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	689b      	ldr	r3, [r3, #8]
 80010f4:	f003 0301 	and.w	r3, r3, #1
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d0f9      	beq.n	80010f0 <SPIx_Transfer2+0x2e>
            ;
        *inp++ = *(volatile uint16_t *)&SPIx->DR;
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	f103 020c 	add.w	r2, r3, #12
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	1c99      	adds	r1, r3, #2
 8001106:	6079      	str	r1, [r7, #4]
 8001108:	8812      	ldrh	r2, [r2, #0]
 800110a:	b292      	uxth	r2, r2
 800110c:	801a      	strh	r2, [r3, #0]
    while(count--) {
 800110e:	887b      	ldrh	r3, [r7, #2]
 8001110:	1e5a      	subs	r2, r3, #1
 8001112:	807a      	strh	r2, [r7, #2]
 8001114:	2b00      	cmp	r3, #0
 8001116:	d1dc      	bne.n	80010d2 <SPIx_Transfer2+0x10>
    }
}
 8001118:	bf00      	nop
 800111a:	bf00      	nop
 800111c:	3714      	adds	r7, #20
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr
	...

08001128 <CORRECT_OPAMP6_Init>:

static void CORRECT_OPAMP6_Init(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b08a      	sub	sp, #40	; 0x28
 800112c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OPAMP6_Init 0 */

  /* USER CODE END OPAMP6_Init 0 */

  LL_OPAMP_InitTypeDef OPAMP_InitStruct = {0};
 800112e:	f107 0318 	add.w	r3, r7, #24
 8001132:	2200      	movs	r2, #0
 8001134:	601a      	str	r2, [r3, #0]
 8001136:	605a      	str	r2, [r3, #4]
 8001138:	609a      	str	r2, [r3, #8]
 800113a:	60da      	str	r2, [r3, #12]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800113c:	463b      	mov	r3, r7
 800113e:	2200      	movs	r2, #0
 8001140:	601a      	str	r2, [r3, #0]
 8001142:	605a      	str	r2, [r3, #4]
 8001144:	609a      	str	r2, [r3, #8]
 8001146:	60da      	str	r2, [r3, #12]
 8001148:	611a      	str	r2, [r3, #16]
 800114a:	615a      	str	r2, [r3, #20]

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 800114c:	2002      	movs	r0, #2
 800114e:	f7ff f8af 	bl	80002b0 <LL_AHB2_GRP1_EnableClock>
  /**OPAMP6 GPIO Configuration
  PB11   ------> OPAMP6_VOUT
  PB13   ------> OPAMP6_VINP
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_11;
 8001152:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001156:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001158:	2303      	movs	r3, #3
 800115a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800115c:	2300      	movs	r3, #0
 800115e:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001160:	463b      	mov	r3, r7
 8001162:	4619      	mov	r1, r3
 8001164:	4815      	ldr	r0, [pc, #84]	; (80011bc <CORRECT_OPAMP6_Init+0x94>)
 8001166:	f006 fc24 	bl	80079b2 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_13;
 800116a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800116e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001170:	2303      	movs	r3, #3
 8001172:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001174:	2300      	movs	r3, #0
 8001176:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001178:	463b      	mov	r3, r7
 800117a:	4619      	mov	r1, r3
 800117c:	480f      	ldr	r0, [pc, #60]	; (80011bc <CORRECT_OPAMP6_Init+0x94>)
 800117e:	f006 fc18 	bl	80079b2 <LL_GPIO_Init>

  /* USER CODE BEGIN OPAMP6_Init 1 */

  /* USER CODE END OPAMP6_Init 1 */
  OPAMP_InitStruct.PowerMode = LL_OPAMP_POWERMODE_HIGHSPEED;
 8001182:	2380      	movs	r3, #128	; 0x80
 8001184:	61bb      	str	r3, [r7, #24]
  OPAMP_InitStruct.FunctionalMode = LL_OPAMP_MODE_FOLLOWER;
 8001186:	2360      	movs	r3, #96	; 0x60
 8001188:	61fb      	str	r3, [r7, #28]
  OPAMP_InitStruct.InputNonInverting = LL_OPAMP_INPUT_NONINVERT_DAC;
 800118a:	230c      	movs	r3, #12
 800118c:	623b      	str	r3, [r7, #32]
  LL_OPAMP_Init(OPAMP6, &OPAMP_InitStruct);
 800118e:	f107 0318 	add.w	r3, r7, #24
 8001192:	4619      	mov	r1, r3
 8001194:	480a      	ldr	r0, [pc, #40]	; (80011c0 <CORRECT_OPAMP6_Init+0x98>)
 8001196:	f006 fc8e 	bl	8007ab6 <LL_OPAMP_Init>
  LL_OPAMP_SetInputsMuxMode(OPAMP6, LL_OPAMP_INPUT_MUX_DISABLE);
 800119a:	2100      	movs	r1, #0
 800119c:	4808      	ldr	r0, [pc, #32]	; (80011c0 <CORRECT_OPAMP6_Init+0x98>)
 800119e:	f7ff f84e 	bl	800023e <LL_OPAMP_SetInputsMuxMode>
  LL_OPAMP_SetInternalOutput(OPAMP6, LL_OPAMP_INTERNAL_OUPUT_DISABLED);
 80011a2:	2100      	movs	r1, #0
 80011a4:	4806      	ldr	r0, [pc, #24]	; (80011c0 <CORRECT_OPAMP6_Init+0x98>)
 80011a6:	f7ff f85d 	bl	8000264 <LL_OPAMP_SetInternalOutput>
  LL_OPAMP_SetTrimmingMode(OPAMP6, LL_OPAMP_TRIMMING_FACTORY);
 80011aa:	2100      	movs	r1, #0
 80011ac:	4804      	ldr	r0, [pc, #16]	; (80011c0 <CORRECT_OPAMP6_Init+0x98>)
 80011ae:	f7ff f86c 	bl	800028a <LL_OPAMP_SetTrimmingMode>
  /* USER CODE BEGIN OPAMP6_Init 2 */
  //OPAMP_InitStruct.InputNonInverting = LL_OPAMP_INPUT_NONINVERT_DAC; !!!!!!!!!!!!!
  /* USER CODE END OPAMP6_Init 2 */

}
 80011b2:	bf00      	nop
 80011b4:	3728      	adds	r7, #40	; 0x28
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	48000400 	.word	0x48000400
 80011c0:	40010314 	.word	0x40010314

080011c4 <delay_cycles>:
    }
  }
}

void __attribute__( ( optimize( "O0" ) ) )
delay_cycles( uint32_t cyc ) {
 80011c4:	b480      	push	{r7}
 80011c6:	b085      	sub	sp, #20
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  for ( uint32_t d_i = 0; d_i < cyc; ++d_i ) { asm( "NOP" ); }
 80011cc:	2300      	movs	r3, #0
 80011ce:	60fb      	str	r3, [r7, #12]
 80011d0:	e003      	b.n	80011da <delay_cycles+0x16>
 80011d2:	bf00      	nop
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	3301      	adds	r3, #1
 80011d8:	60fb      	str	r3, [r7, #12]
 80011da:	68fa      	ldr	r2, [r7, #12]
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	429a      	cmp	r2, r3
 80011e0:	d3f7      	bcc.n	80011d2 <delay_cycles+0xe>
}
 80011e2:	bf00      	nop
 80011e4:	bf00      	nop
 80011e6:	3714      	adds	r7, #20
 80011e8:	46bd      	mov	sp, r7
 80011ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ee:	4770      	bx	lr

080011f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011f4:	b672      	cpsid	i
}
 80011f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011f8:	e7fe      	b.n	80011f8 <Error_Handler+0x8>
	...

080011fc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b082      	sub	sp, #8
 8001200:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001202:	4b0f      	ldr	r3, [pc, #60]	; (8001240 <HAL_MspInit+0x44>)
 8001204:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001206:	4a0e      	ldr	r2, [pc, #56]	; (8001240 <HAL_MspInit+0x44>)
 8001208:	f043 0301 	orr.w	r3, r3, #1
 800120c:	6613      	str	r3, [r2, #96]	; 0x60
 800120e:	4b0c      	ldr	r3, [pc, #48]	; (8001240 <HAL_MspInit+0x44>)
 8001210:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001212:	f003 0301 	and.w	r3, r3, #1
 8001216:	607b      	str	r3, [r7, #4]
 8001218:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800121a:	4b09      	ldr	r3, [pc, #36]	; (8001240 <HAL_MspInit+0x44>)
 800121c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800121e:	4a08      	ldr	r2, [pc, #32]	; (8001240 <HAL_MspInit+0x44>)
 8001220:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001224:	6593      	str	r3, [r2, #88]	; 0x58
 8001226:	4b06      	ldr	r3, [pc, #24]	; (8001240 <HAL_MspInit+0x44>)
 8001228:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800122a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800122e:	603b      	str	r3, [r7, #0]
 8001230:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001232:	f003 fee1 	bl	8004ff8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001236:	bf00      	nop
 8001238:	3708      	adds	r7, #8
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	40021000 	.word	0x40021000

08001244 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b0a6      	sub	sp, #152	; 0x98
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800124c:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001250:	2200      	movs	r2, #0
 8001252:	601a      	str	r2, [r3, #0]
 8001254:	605a      	str	r2, [r3, #4]
 8001256:	609a      	str	r2, [r3, #8]
 8001258:	60da      	str	r2, [r3, #12]
 800125a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800125c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001260:	2250      	movs	r2, #80	; 0x50
 8001262:	2100      	movs	r1, #0
 8001264:	4618      	mov	r0, r3
 8001266:	f006 fc89 	bl	8007b7c <memset>
  if(hadc->Instance==ADC1)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001272:	f040 80a5 	bne.w	80013c0 <HAL_ADC_MspInit+0x17c>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001276:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800127a:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 800127c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001280:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001282:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001286:	4618      	mov	r0, r3
 8001288:	f004 fbce 	bl	8005a28 <HAL_RCCEx_PeriphCLKConfig>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 8001292:	f7ff ffad 	bl	80011f0 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001296:	4baa      	ldr	r3, [pc, #680]	; (8001540 <HAL_ADC_MspInit+0x2fc>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	3301      	adds	r3, #1
 800129c:	4aa8      	ldr	r2, [pc, #672]	; (8001540 <HAL_ADC_MspInit+0x2fc>)
 800129e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80012a0:	4ba7      	ldr	r3, [pc, #668]	; (8001540 <HAL_ADC_MspInit+0x2fc>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	2b01      	cmp	r3, #1
 80012a6:	d10b      	bne.n	80012c0 <HAL_ADC_MspInit+0x7c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80012a8:	4ba6      	ldr	r3, [pc, #664]	; (8001544 <HAL_ADC_MspInit+0x300>)
 80012aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ac:	4aa5      	ldr	r2, [pc, #660]	; (8001544 <HAL_ADC_MspInit+0x300>)
 80012ae:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80012b2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012b4:	4ba3      	ldr	r3, [pc, #652]	; (8001544 <HAL_ADC_MspInit+0x300>)
 80012b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80012bc:	633b      	str	r3, [r7, #48]	; 0x30
 80012be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80012c0:	4ba0      	ldr	r3, [pc, #640]	; (8001544 <HAL_ADC_MspInit+0x300>)
 80012c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012c4:	4a9f      	ldr	r2, [pc, #636]	; (8001544 <HAL_ADC_MspInit+0x300>)
 80012c6:	f043 0320 	orr.w	r3, r3, #32
 80012ca:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012cc:	4b9d      	ldr	r3, [pc, #628]	; (8001544 <HAL_ADC_MspInit+0x300>)
 80012ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012d0:	f003 0320 	and.w	r3, r3, #32
 80012d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80012d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012d8:	4b9a      	ldr	r3, [pc, #616]	; (8001544 <HAL_ADC_MspInit+0x300>)
 80012da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012dc:	4a99      	ldr	r2, [pc, #612]	; (8001544 <HAL_ADC_MspInit+0x300>)
 80012de:	f043 0301 	orr.w	r3, r3, #1
 80012e2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012e4:	4b97      	ldr	r3, [pc, #604]	; (8001544 <HAL_ADC_MspInit+0x300>)
 80012e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012e8:	f003 0301 	and.w	r3, r3, #1
 80012ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80012ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012f0:	4b94      	ldr	r3, [pc, #592]	; (8001544 <HAL_ADC_MspInit+0x300>)
 80012f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012f4:	4a93      	ldr	r2, [pc, #588]	; (8001544 <HAL_ADC_MspInit+0x300>)
 80012f6:	f043 0302 	orr.w	r3, r3, #2
 80012fa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012fc:	4b91      	ldr	r3, [pc, #580]	; (8001544 <HAL_ADC_MspInit+0x300>)
 80012fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001300:	f003 0302 	and.w	r3, r3, #2
 8001304:	627b      	str	r3, [r7, #36]	; 0x24
 8001306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    PA2     ------> ADC1_IN3
    PA3     ------> ADC1_IN4
    PB12     ------> ADC1_IN11
    PB14     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = VAC_BF_RELAY_Pin;
 8001308:	2301      	movs	r3, #1
 800130a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800130e:	2303      	movs	r3, #3
 8001310:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001314:	2300      	movs	r3, #0
 8001316:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(VAC_BF_RELAY_GPIO_Port, &GPIO_InitStruct);
 800131a:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800131e:	4619      	mov	r1, r3
 8001320:	4889      	ldr	r0, [pc, #548]	; (8001548 <HAL_ADC_MspInit+0x304>)
 8001322:	f003 fc2b 	bl	8004b7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VAC_ADC1_IN1_Pin|VAC_ADC1_IN2_Pin|HVDC_ADC1_IN3_Pin|HVDC_ADC1_IN4_Pin;
 8001326:	230f      	movs	r3, #15
 8001328:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800132c:	2303      	movs	r3, #3
 800132e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001332:	2300      	movs	r3, #0
 8001334:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001338:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800133c:	4619      	mov	r1, r3
 800133e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001342:	f003 fc1b 	bl	8004b7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SHUNT_NTC_ADC1_IN11_Pin|IAC_REF_Pin;
 8001346:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 800134a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800134e:	2303      	movs	r3, #3
 8001350:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001354:	2300      	movs	r3, #0
 8001356:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800135a:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800135e:	4619      	mov	r1, r3
 8001360:	487a      	ldr	r0, [pc, #488]	; (800154c <HAL_ADC_MspInit+0x308>)
 8001362:	f003 fc0b 	bl	8004b7c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001366:	4b7a      	ldr	r3, [pc, #488]	; (8001550 <HAL_ADC_MspInit+0x30c>)
 8001368:	4a7a      	ldr	r2, [pc, #488]	; (8001554 <HAL_ADC_MspInit+0x310>)
 800136a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800136c:	4b78      	ldr	r3, [pc, #480]	; (8001550 <HAL_ADC_MspInit+0x30c>)
 800136e:	2205      	movs	r2, #5
 8001370:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001372:	4b77      	ldr	r3, [pc, #476]	; (8001550 <HAL_ADC_MspInit+0x30c>)
 8001374:	2200      	movs	r2, #0
 8001376:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001378:	4b75      	ldr	r3, [pc, #468]	; (8001550 <HAL_ADC_MspInit+0x30c>)
 800137a:	2200      	movs	r2, #0
 800137c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800137e:	4b74      	ldr	r3, [pc, #464]	; (8001550 <HAL_ADC_MspInit+0x30c>)
 8001380:	2280      	movs	r2, #128	; 0x80
 8001382:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001384:	4b72      	ldr	r3, [pc, #456]	; (8001550 <HAL_ADC_MspInit+0x30c>)
 8001386:	f44f 7200 	mov.w	r2, #512	; 0x200
 800138a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800138c:	4b70      	ldr	r3, [pc, #448]	; (8001550 <HAL_ADC_MspInit+0x30c>)
 800138e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001392:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001394:	4b6e      	ldr	r3, [pc, #440]	; (8001550 <HAL_ADC_MspInit+0x30c>)
 8001396:	2220      	movs	r2, #32
 8001398:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 800139a:	4b6d      	ldr	r3, [pc, #436]	; (8001550 <HAL_ADC_MspInit+0x30c>)
 800139c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80013a0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80013a2:	486b      	ldr	r0, [pc, #428]	; (8001550 <HAL_ADC_MspInit+0x30c>)
 80013a4:	f003 fa26 	bl	80047f4 <HAL_DMA_Init>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d001      	beq.n	80013b2 <HAL_ADC_MspInit+0x16e>
    {
      Error_Handler();
 80013ae:	f7ff ff1f 	bl	80011f0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	4a66      	ldr	r2, [pc, #408]	; (8001550 <HAL_ADC_MspInit+0x30c>)
 80013b6:	655a      	str	r2, [r3, #84]	; 0x54
 80013b8:	4a65      	ldr	r2, [pc, #404]	; (8001550 <HAL_ADC_MspInit+0x30c>)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80013be:	e0ba      	b.n	8001536 <HAL_ADC_MspInit+0x2f2>
  else if(hadc->Instance==ADC2)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4a64      	ldr	r2, [pc, #400]	; (8001558 <HAL_ADC_MspInit+0x314>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d178      	bne.n	80014bc <HAL_ADC_MspInit+0x278>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80013ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80013ce:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 80013d0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80013d4:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013d6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80013da:	4618      	mov	r0, r3
 80013dc:	f004 fb24 	bl	8005a28 <HAL_RCCEx_PeriphCLKConfig>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d001      	beq.n	80013ea <HAL_ADC_MspInit+0x1a6>
      Error_Handler();
 80013e6:	f7ff ff03 	bl	80011f0 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80013ea:	4b55      	ldr	r3, [pc, #340]	; (8001540 <HAL_ADC_MspInit+0x2fc>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	3301      	adds	r3, #1
 80013f0:	4a53      	ldr	r2, [pc, #332]	; (8001540 <HAL_ADC_MspInit+0x2fc>)
 80013f2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80013f4:	4b52      	ldr	r3, [pc, #328]	; (8001540 <HAL_ADC_MspInit+0x2fc>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	2b01      	cmp	r3, #1
 80013fa:	d10b      	bne.n	8001414 <HAL_ADC_MspInit+0x1d0>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80013fc:	4b51      	ldr	r3, [pc, #324]	; (8001544 <HAL_ADC_MspInit+0x300>)
 80013fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001400:	4a50      	ldr	r2, [pc, #320]	; (8001544 <HAL_ADC_MspInit+0x300>)
 8001402:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001406:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001408:	4b4e      	ldr	r3, [pc, #312]	; (8001544 <HAL_ADC_MspInit+0x300>)
 800140a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800140c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001410:	623b      	str	r3, [r7, #32]
 8001412:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001414:	4b4b      	ldr	r3, [pc, #300]	; (8001544 <HAL_ADC_MspInit+0x300>)
 8001416:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001418:	4a4a      	ldr	r2, [pc, #296]	; (8001544 <HAL_ADC_MspInit+0x300>)
 800141a:	f043 0301 	orr.w	r3, r3, #1
 800141e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001420:	4b48      	ldr	r3, [pc, #288]	; (8001544 <HAL_ADC_MspInit+0x300>)
 8001422:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001424:	f003 0301 	and.w	r3, r3, #1
 8001428:	61fb      	str	r3, [r7, #28]
 800142a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800142c:	4b45      	ldr	r3, [pc, #276]	; (8001544 <HAL_ADC_MspInit+0x300>)
 800142e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001430:	4a44      	ldr	r2, [pc, #272]	; (8001544 <HAL_ADC_MspInit+0x300>)
 8001432:	f043 0304 	orr.w	r3, r3, #4
 8001436:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001438:	4b42      	ldr	r3, [pc, #264]	; (8001544 <HAL_ADC_MspInit+0x300>)
 800143a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800143c:	f003 0304 	and.w	r3, r3, #4
 8001440:	61bb      	str	r3, [r7, #24]
 8001442:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001444:	4b3f      	ldr	r3, [pc, #252]	; (8001544 <HAL_ADC_MspInit+0x300>)
 8001446:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001448:	4a3e      	ldr	r2, [pc, #248]	; (8001544 <HAL_ADC_MspInit+0x300>)
 800144a:	f043 0302 	orr.w	r3, r3, #2
 800144e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001450:	4b3c      	ldr	r3, [pc, #240]	; (8001544 <HAL_ADC_MspInit+0x300>)
 8001452:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001454:	f003 0302 	and.w	r3, r3, #2
 8001458:	617b      	str	r3, [r7, #20]
 800145a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = IAC_ADC2_IN4_Pin;
 800145c:	2380      	movs	r3, #128	; 0x80
 800145e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001462:	2303      	movs	r3, #3
 8001464:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001468:	2300      	movs	r3, #0
 800146a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(IAC_ADC2_IN4_GPIO_Port, &GPIO_InitStruct);
 800146e:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001472:	4619      	mov	r1, r3
 8001474:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001478:	f003 fb80 	bl	8004b7c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = IAC_ADC2_IN5_Pin;
 800147c:	2310      	movs	r3, #16
 800147e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001482:	2303      	movs	r3, #3
 8001484:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001488:	2300      	movs	r3, #0
 800148a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(IAC_ADC2_IN5_GPIO_Port, &GPIO_InitStruct);
 800148e:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001492:	4619      	mov	r1, r3
 8001494:	4831      	ldr	r0, [pc, #196]	; (800155c <HAL_ADC_MspInit+0x318>)
 8001496:	f003 fb71 	bl	8004b7c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VINMON_Pin;
 800149a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800149e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014a2:	2303      	movs	r3, #3
 80014a4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a8:	2300      	movs	r3, #0
 80014aa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(VINMON_GPIO_Port, &GPIO_InitStruct);
 80014ae:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80014b2:	4619      	mov	r1, r3
 80014b4:	4825      	ldr	r0, [pc, #148]	; (800154c <HAL_ADC_MspInit+0x308>)
 80014b6:	f003 fb61 	bl	8004b7c <HAL_GPIO_Init>
}
 80014ba:	e03c      	b.n	8001536 <HAL_ADC_MspInit+0x2f2>
  else if(hadc->Instance==ADC3)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4a27      	ldr	r2, [pc, #156]	; (8001560 <HAL_ADC_MspInit+0x31c>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d137      	bne.n	8001536 <HAL_ADC_MspInit+0x2f2>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 80014c6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80014ca:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 80014cc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80014d0:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014d2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80014d6:	4618      	mov	r0, r3
 80014d8:	f004 faa6 	bl	8005a28 <HAL_RCCEx_PeriphCLKConfig>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d001      	beq.n	80014e6 <HAL_ADC_MspInit+0x2a2>
      Error_Handler();
 80014e2:	f7ff fe85 	bl	80011f0 <Error_Handler>
    __HAL_RCC_ADC345_CLK_ENABLE();
 80014e6:	4b17      	ldr	r3, [pc, #92]	; (8001544 <HAL_ADC_MspInit+0x300>)
 80014e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014ea:	4a16      	ldr	r2, [pc, #88]	; (8001544 <HAL_ADC_MspInit+0x300>)
 80014ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014f2:	4b14      	ldr	r3, [pc, #80]	; (8001544 <HAL_ADC_MspInit+0x300>)
 80014f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014fa:	613b      	str	r3, [r7, #16]
 80014fc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014fe:	4b11      	ldr	r3, [pc, #68]	; (8001544 <HAL_ADC_MspInit+0x300>)
 8001500:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001502:	4a10      	ldr	r2, [pc, #64]	; (8001544 <HAL_ADC_MspInit+0x300>)
 8001504:	f043 0302 	orr.w	r3, r3, #2
 8001508:	64d3      	str	r3, [r2, #76]	; 0x4c
 800150a:	4b0e      	ldr	r3, [pc, #56]	; (8001544 <HAL_ADC_MspInit+0x300>)
 800150c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800150e:	f003 0302 	and.w	r3, r3, #2
 8001512:	60fb      	str	r3, [r7, #12]
 8001514:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TMON_SHUNT_NTC_Pin;
 8001516:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800151a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800151e:	2303      	movs	r3, #3
 8001520:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001524:	2300      	movs	r3, #0
 8001526:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(TMON_SHUNT_NTC_GPIO_Port, &GPIO_InitStruct);
 800152a:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800152e:	4619      	mov	r1, r3
 8001530:	4806      	ldr	r0, [pc, #24]	; (800154c <HAL_ADC_MspInit+0x308>)
 8001532:	f003 fb23 	bl	8004b7c <HAL_GPIO_Init>
}
 8001536:	bf00      	nop
 8001538:	3798      	adds	r7, #152	; 0x98
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	20000328 	.word	0x20000328
 8001544:	40021000 	.word	0x40021000
 8001548:	48001400 	.word	0x48001400
 800154c:	48000400 	.word	0x48000400
 8001550:	2000017c 	.word	0x2000017c
 8001554:	40020008 	.word	0x40020008
 8001558:	50000100 	.word	0x50000100
 800155c:	48000800 	.word	0x48000800
 8001560:	50000400 	.word	0x50000400

08001564 <HAL_COMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcomp: COMP handle pointer
* @retval None
*/
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b08a      	sub	sp, #40	; 0x28
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800156c:	f107 0314 	add.w	r3, r7, #20
 8001570:	2200      	movs	r2, #0
 8001572:	601a      	str	r2, [r3, #0]
 8001574:	605a      	str	r2, [r3, #4]
 8001576:	609a      	str	r2, [r3, #8]
 8001578:	60da      	str	r2, [r3, #12]
 800157a:	611a      	str	r2, [r3, #16]
  if(hcomp->Instance==COMP1)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4a1e      	ldr	r2, [pc, #120]	; (80015fc <HAL_COMP_MspInit+0x98>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d118      	bne.n	80015b8 <HAL_COMP_MspInit+0x54>
  {
  /* USER CODE BEGIN COMP1_MspInit 0 */

  /* USER CODE END COMP1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001586:	4b1e      	ldr	r3, [pc, #120]	; (8001600 <HAL_COMP_MspInit+0x9c>)
 8001588:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800158a:	4a1d      	ldr	r2, [pc, #116]	; (8001600 <HAL_COMP_MspInit+0x9c>)
 800158c:	f043 0302 	orr.w	r3, r3, #2
 8001590:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001592:	4b1b      	ldr	r3, [pc, #108]	; (8001600 <HAL_COMP_MspInit+0x9c>)
 8001594:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001596:	f003 0302 	and.w	r3, r3, #2
 800159a:	613b      	str	r3, [r7, #16]
 800159c:	693b      	ldr	r3, [r7, #16]
    /**COMP1 GPIO Configuration
    PB1     ------> COMP1_INP
    */
    GPIO_InitStruct.Pin = IAC_COMP1_INP_Pin;
 800159e:	2302      	movs	r3, #2
 80015a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015a2:	2303      	movs	r3, #3
 80015a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a6:	2300      	movs	r3, #0
 80015a8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(IAC_COMP1_INP_GPIO_Port, &GPIO_InitStruct);
 80015aa:	f107 0314 	add.w	r3, r7, #20
 80015ae:	4619      	mov	r1, r3
 80015b0:	4814      	ldr	r0, [pc, #80]	; (8001604 <HAL_COMP_MspInit+0xa0>)
 80015b2:	f003 fae3 	bl	8004b7c <HAL_GPIO_Init>
  /* USER CODE BEGIN COMP4_MspInit 1 */

  /* USER CODE END COMP4_MspInit 1 */
  }

}
 80015b6:	e01c      	b.n	80015f2 <HAL_COMP_MspInit+0x8e>
  else if(hcomp->Instance==COMP4)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4a12      	ldr	r2, [pc, #72]	; (8001608 <HAL_COMP_MspInit+0xa4>)
 80015be:	4293      	cmp	r3, r2
 80015c0:	d117      	bne.n	80015f2 <HAL_COMP_MspInit+0x8e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015c2:	4b0f      	ldr	r3, [pc, #60]	; (8001600 <HAL_COMP_MspInit+0x9c>)
 80015c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015c6:	4a0e      	ldr	r2, [pc, #56]	; (8001600 <HAL_COMP_MspInit+0x9c>)
 80015c8:	f043 0302 	orr.w	r3, r3, #2
 80015cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015ce:	4b0c      	ldr	r3, [pc, #48]	; (8001600 <HAL_COMP_MspInit+0x9c>)
 80015d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015d2:	f003 0302 	and.w	r3, r3, #2
 80015d6:	60fb      	str	r3, [r7, #12]
 80015d8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = IAC_PGA2_VIN_COMP4_INP_Pin;
 80015da:	2301      	movs	r3, #1
 80015dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015de:	2303      	movs	r3, #3
 80015e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e2:	2300      	movs	r3, #0
 80015e4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(IAC_PGA2_VIN_COMP4_INP_GPIO_Port, &GPIO_InitStruct);
 80015e6:	f107 0314 	add.w	r3, r7, #20
 80015ea:	4619      	mov	r1, r3
 80015ec:	4805      	ldr	r0, [pc, #20]	; (8001604 <HAL_COMP_MspInit+0xa0>)
 80015ee:	f003 fac5 	bl	8004b7c <HAL_GPIO_Init>
}
 80015f2:	bf00      	nop
 80015f4:	3728      	adds	r7, #40	; 0x28
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	40010200 	.word	0x40010200
 8001600:	40021000 	.word	0x40021000
 8001604:	48000400 	.word	0x48000400
 8001608:	4001020c 	.word	0x4001020c

0800160c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b08a      	sub	sp, #40	; 0x28
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001614:	f107 0314 	add.w	r3, r7, #20
 8001618:	2200      	movs	r2, #0
 800161a:	601a      	str	r2, [r3, #0]
 800161c:	605a      	str	r2, [r3, #4]
 800161e:	609a      	str	r2, [r3, #8]
 8001620:	60da      	str	r2, [r3, #12]
 8001622:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4a1e      	ldr	r2, [pc, #120]	; (80016a4 <HAL_DAC_MspInit+0x98>)
 800162a:	4293      	cmp	r3, r2
 800162c:	d125      	bne.n	800167a <HAL_DAC_MspInit+0x6e>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 800162e:	4b1e      	ldr	r3, [pc, #120]	; (80016a8 <HAL_DAC_MspInit+0x9c>)
 8001630:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001632:	4a1d      	ldr	r2, [pc, #116]	; (80016a8 <HAL_DAC_MspInit+0x9c>)
 8001634:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001638:	64d3      	str	r3, [r2, #76]	; 0x4c
 800163a:	4b1b      	ldr	r3, [pc, #108]	; (80016a8 <HAL_DAC_MspInit+0x9c>)
 800163c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800163e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001642:	613b      	str	r3, [r7, #16]
 8001644:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001646:	4b18      	ldr	r3, [pc, #96]	; (80016a8 <HAL_DAC_MspInit+0x9c>)
 8001648:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800164a:	4a17      	ldr	r2, [pc, #92]	; (80016a8 <HAL_DAC_MspInit+0x9c>)
 800164c:	f043 0301 	orr.w	r3, r3, #1
 8001650:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001652:	4b15      	ldr	r3, [pc, #84]	; (80016a8 <HAL_DAC_MspInit+0x9c>)
 8001654:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001656:	f003 0301 	and.w	r3, r3, #1
 800165a:	60fb      	str	r3, [r7, #12]
 800165c:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800165e:	2320      	movs	r3, #32
 8001660:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001662:	2303      	movs	r3, #3
 8001664:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001666:	2300      	movs	r3, #0
 8001668:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800166a:	f107 0314 	add.w	r3, r7, #20
 800166e:	4619      	mov	r1, r3
 8001670:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001674:	f003 fa82 	bl	8004b7c <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC3_MspInit 1 */

  /* USER CODE END DAC3_MspInit 1 */
  }

}
 8001678:	e010      	b.n	800169c <HAL_DAC_MspInit+0x90>
  else if(hdac->Instance==DAC3)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4a0b      	ldr	r2, [pc, #44]	; (80016ac <HAL_DAC_MspInit+0xa0>)
 8001680:	4293      	cmp	r3, r2
 8001682:	d10b      	bne.n	800169c <HAL_DAC_MspInit+0x90>
    __HAL_RCC_DAC3_CLK_ENABLE();
 8001684:	4b08      	ldr	r3, [pc, #32]	; (80016a8 <HAL_DAC_MspInit+0x9c>)
 8001686:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001688:	4a07      	ldr	r2, [pc, #28]	; (80016a8 <HAL_DAC_MspInit+0x9c>)
 800168a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800168e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001690:	4b05      	ldr	r3, [pc, #20]	; (80016a8 <HAL_DAC_MspInit+0x9c>)
 8001692:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001694:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001698:	60bb      	str	r3, [r7, #8]
 800169a:	68bb      	ldr	r3, [r7, #8]
}
 800169c:	bf00      	nop
 800169e:	3728      	adds	r7, #40	; 0x28
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	50000800 	.word	0x50000800
 80016a8:	40021000 	.word	0x40021000
 80016ac:	50001000 	.word	0x50001000

080016b0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b08a      	sub	sp, #40	; 0x28
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016b8:	f107 0314 	add.w	r3, r7, #20
 80016bc:	2200      	movs	r2, #0
 80016be:	601a      	str	r2, [r3, #0]
 80016c0:	605a      	str	r2, [r3, #4]
 80016c2:	609a      	str	r2, [r3, #8]
 80016c4:	60da      	str	r2, [r3, #12]
 80016c6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4a25      	ldr	r2, [pc, #148]	; (8001764 <HAL_SPI_MspInit+0xb4>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d144      	bne.n	800175c <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80016d2:	4b25      	ldr	r3, [pc, #148]	; (8001768 <HAL_SPI_MspInit+0xb8>)
 80016d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016d6:	4a24      	ldr	r2, [pc, #144]	; (8001768 <HAL_SPI_MspInit+0xb8>)
 80016d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80016dc:	6593      	str	r3, [r2, #88]	; 0x58
 80016de:	4b22      	ldr	r3, [pc, #136]	; (8001768 <HAL_SPI_MspInit+0xb8>)
 80016e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016e2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80016e6:	613b      	str	r3, [r7, #16]
 80016e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016ea:	4b1f      	ldr	r3, [pc, #124]	; (8001768 <HAL_SPI_MspInit+0xb8>)
 80016ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016ee:	4a1e      	ldr	r2, [pc, #120]	; (8001768 <HAL_SPI_MspInit+0xb8>)
 80016f0:	f043 0304 	orr.w	r3, r3, #4
 80016f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016f6:	4b1c      	ldr	r3, [pc, #112]	; (8001768 <HAL_SPI_MspInit+0xb8>)
 80016f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016fa:	f003 0304 	and.w	r3, r3, #4
 80016fe:	60fb      	str	r3, [r7, #12]
 8001700:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001702:	4b19      	ldr	r3, [pc, #100]	; (8001768 <HAL_SPI_MspInit+0xb8>)
 8001704:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001706:	4a18      	ldr	r2, [pc, #96]	; (8001768 <HAL_SPI_MspInit+0xb8>)
 8001708:	f043 0302 	orr.w	r3, r3, #2
 800170c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800170e:	4b16      	ldr	r3, [pc, #88]	; (8001768 <HAL_SPI_MspInit+0xb8>)
 8001710:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001712:	f003 0302 	and.w	r3, r3, #2
 8001716:	60bb      	str	r3, [r7, #8]
 8001718:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800171a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800171e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001720:	2302      	movs	r3, #2
 8001722:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001724:	2300      	movs	r3, #0
 8001726:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001728:	2302      	movs	r3, #2
 800172a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800172c:	2306      	movs	r3, #6
 800172e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001730:	f107 0314 	add.w	r3, r7, #20
 8001734:	4619      	mov	r1, r3
 8001736:	480d      	ldr	r0, [pc, #52]	; (800176c <HAL_SPI_MspInit+0xbc>)
 8001738:	f003 fa20 	bl	8004b7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800173c:	2320      	movs	r3, #32
 800173e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001740:	2302      	movs	r3, #2
 8001742:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001744:	2300      	movs	r3, #0
 8001746:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001748:	2302      	movs	r3, #2
 800174a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800174c:	2306      	movs	r3, #6
 800174e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001750:	f107 0314 	add.w	r3, r7, #20
 8001754:	4619      	mov	r1, r3
 8001756:	4806      	ldr	r0, [pc, #24]	; (8001770 <HAL_SPI_MspInit+0xc0>)
 8001758:	f003 fa10 	bl	8004b7c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800175c:	bf00      	nop
 800175e:	3728      	adds	r7, #40	; 0x28
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}
 8001764:	40003c00 	.word	0x40003c00
 8001768:	40021000 	.word	0x40021000
 800176c:	48000800 	.word	0x48000800
 8001770:	48000400 	.word	0x48000400

08001774 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b084      	sub	sp, #16
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a0d      	ldr	r2, [pc, #52]	; (80017b8 <HAL_TIM_Base_MspInit+0x44>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d113      	bne.n	80017ae <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001786:	4b0d      	ldr	r3, [pc, #52]	; (80017bc <HAL_TIM_Base_MspInit+0x48>)
 8001788:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800178a:	4a0c      	ldr	r2, [pc, #48]	; (80017bc <HAL_TIM_Base_MspInit+0x48>)
 800178c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001790:	6613      	str	r3, [r2, #96]	; 0x60
 8001792:	4b0a      	ldr	r3, [pc, #40]	; (80017bc <HAL_TIM_Base_MspInit+0x48>)
 8001794:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001796:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800179a:	60fb      	str	r3, [r7, #12]
 800179c:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 800179e:	2200      	movs	r2, #0
 80017a0:	2100      	movs	r1, #0
 80017a2:	2018      	movs	r0, #24
 80017a4:	f002 fe27 	bl	80043f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 80017a8:	2018      	movs	r0, #24
 80017aa:	f002 fe3e 	bl	800442a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80017ae:	bf00      	nop
 80017b0:	3710      	adds	r7, #16
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	40012c00 	.word	0x40012c00
 80017bc:	40021000 	.word	0x40021000

080017c0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b088      	sub	sp, #32
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017c8:	f107 030c 	add.w	r3, r7, #12
 80017cc:	2200      	movs	r2, #0
 80017ce:	601a      	str	r2, [r3, #0]
 80017d0:	605a      	str	r2, [r3, #4]
 80017d2:	609a      	str	r2, [r3, #8]
 80017d4:	60da      	str	r2, [r3, #12]
 80017d6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a12      	ldr	r2, [pc, #72]	; (8001828 <HAL_TIM_MspPostInit+0x68>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d11d      	bne.n	800181e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017e2:	4b12      	ldr	r3, [pc, #72]	; (800182c <HAL_TIM_MspPostInit+0x6c>)
 80017e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017e6:	4a11      	ldr	r2, [pc, #68]	; (800182c <HAL_TIM_MspPostInit+0x6c>)
 80017e8:	f043 0301 	orr.w	r3, r3, #1
 80017ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017ee:	4b0f      	ldr	r3, [pc, #60]	; (800182c <HAL_TIM_MspPostInit+0x6c>)
 80017f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017f2:	f003 0301 	and.w	r3, r3, #1
 80017f6:	60bb      	str	r3, [r7, #8]
 80017f8:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = OC_OUT_Pin;
 80017fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80017fe:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001800:	2302      	movs	r3, #2
 8001802:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001804:	2302      	movs	r3, #2
 8001806:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001808:	2302      	movs	r3, #2
 800180a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 800180c:	2306      	movs	r3, #6
 800180e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(OC_OUT_GPIO_Port, &GPIO_InitStruct);
 8001810:	f107 030c 	add.w	r3, r7, #12
 8001814:	4619      	mov	r1, r3
 8001816:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800181a:	f003 f9af 	bl	8004b7c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800181e:	bf00      	nop
 8001820:	3720      	adds	r7, #32
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	40012c00 	.word	0x40012c00
 800182c:	40021000 	.word	0x40021000

08001830 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001830:	b480      	push	{r7}
 8001832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001834:	e7fe      	b.n	8001834 <NMI_Handler+0x4>

08001836 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001836:	b480      	push	{r7}
 8001838:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800183a:	e7fe      	b.n	800183a <HardFault_Handler+0x4>

0800183c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800183c:	b480      	push	{r7}
 800183e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001840:	e7fe      	b.n	8001840 <MemManage_Handler+0x4>

08001842 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001842:	b480      	push	{r7}
 8001844:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001846:	e7fe      	b.n	8001846 <BusFault_Handler+0x4>

08001848 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001848:	b480      	push	{r7}
 800184a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800184c:	e7fe      	b.n	800184c <UsageFault_Handler+0x4>

0800184e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800184e:	b480      	push	{r7}
 8001850:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001852:	bf00      	nop
 8001854:	46bd      	mov	sp, r7
 8001856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185a:	4770      	bx	lr

0800185c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800185c:	b480      	push	{r7}
 800185e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001860:	bf00      	nop
 8001862:	46bd      	mov	sp, r7
 8001864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001868:	4770      	bx	lr

0800186a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800186a:	b480      	push	{r7}
 800186c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800186e:	bf00      	nop
 8001870:	46bd      	mov	sp, r7
 8001872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001876:	4770      	bx	lr

08001878 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800187c:	f000 f8ba 	bl	80019f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001880:	bf00      	nop
 8001882:	bd80      	pop	{r7, pc}

08001884 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */
	  if (DMA1->ISR & DMA_ISR_TCIF1)
 8001888:	4b0b      	ldr	r3, [pc, #44]	; (80018b8 <DMA1_Channel1_IRQHandler+0x34>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f003 0302 	and.w	r3, r3, #2
 8001890:	2b00      	cmp	r3, #0
 8001892:	d00e      	beq.n	80018b2 <DMA1_Channel1_IRQHandler+0x2e>
	  {
		HAL_GPIO_WritePin(STATUS1_GPIO_Port, STATUS1_Pin, SET);
 8001894:	2201      	movs	r2, #1
 8001896:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800189a:	4808      	ldr	r0, [pc, #32]	; (80018bc <DMA1_Channel1_IRQHandler+0x38>)
 800189c:	f003 faf0 	bl	8004e80 <HAL_GPIO_WritePin>
		aqusitionDMA1_1 = 1;
 80018a0:	4b07      	ldr	r3, [pc, #28]	; (80018c0 <DMA1_Channel1_IRQHandler+0x3c>)
 80018a2:	2201      	movs	r2, #1
 80018a4:	701a      	strb	r2, [r3, #0]
		//DMA1_CLEAR_IT = 1;
		DMA1->IFCR |= (DMA_IFCR_CTCIF1 || DMA_IFCR_CHTIF1 || DMA_IFCR_CTEIF1);
 80018a6:	4b04      	ldr	r3, [pc, #16]	; (80018b8 <DMA1_Channel1_IRQHandler+0x34>)
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	4a03      	ldr	r2, [pc, #12]	; (80018b8 <DMA1_Channel1_IRQHandler+0x34>)
 80018ac:	f043 0301 	orr.w	r3, r3, #1
 80018b0:	6053      	str	r3, [r2, #4]
	  }
  /* USER CODE END DMA1_Channel1_IRQn 0 */
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80018b2:	bf00      	nop
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	40020000 	.word	0x40020000
 80018bc:	48000800 	.word	0x48000800
 80018c0:	20000304 	.word	0x20000304

080018c4 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80018c8:	4802      	ldr	r0, [pc, #8]	; (80018d4 <TIM1_BRK_TIM15_IRQHandler+0x10>)
 80018ca:	f004 fca6 	bl	800621a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 80018ce:	bf00      	nop
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	200002b0 	.word	0x200002b0

080018d8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80018d8:	b480      	push	{r7}
 80018da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80018dc:	4b06      	ldr	r3, [pc, #24]	; (80018f8 <SystemInit+0x20>)
 80018de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018e2:	4a05      	ldr	r2, [pc, #20]	; (80018f8 <SystemInit+0x20>)
 80018e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018ec:	bf00      	nop
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr
 80018f6:	bf00      	nop
 80018f8:	e000ed00 	.word	0xe000ed00

080018fc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80018fc:	480d      	ldr	r0, [pc, #52]	; (8001934 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80018fe:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001900:	480d      	ldr	r0, [pc, #52]	; (8001938 <LoopForever+0x6>)
  ldr r1, =_edata
 8001902:	490e      	ldr	r1, [pc, #56]	; (800193c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001904:	4a0e      	ldr	r2, [pc, #56]	; (8001940 <LoopForever+0xe>)
  movs r3, #0
 8001906:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001908:	e002      	b.n	8001910 <LoopCopyDataInit>

0800190a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800190a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800190c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800190e:	3304      	adds	r3, #4

08001910 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001910:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001912:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001914:	d3f9      	bcc.n	800190a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001916:	4a0b      	ldr	r2, [pc, #44]	; (8001944 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001918:	4c0b      	ldr	r4, [pc, #44]	; (8001948 <LoopForever+0x16>)
  movs r3, #0
 800191a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800191c:	e001      	b.n	8001922 <LoopFillZerobss>

0800191e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800191e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001920:	3204      	adds	r2, #4

08001922 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001922:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001924:	d3fb      	bcc.n	800191e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001926:	f7ff ffd7 	bl	80018d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800192a:	f006 f903 	bl	8007b34 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800192e:	f7fe fcd7 	bl	80002e0 <main>

08001932 <LoopForever>:

LoopForever:
    b LoopForever
 8001932:	e7fe      	b.n	8001932 <LoopForever>
  ldr   r0, =_estack
 8001934:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 8001938:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800193c:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8001940:	08007bbc 	.word	0x08007bbc
  ldr r2, =_sbss
 8001944:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8001948:	20000330 	.word	0x20000330

0800194c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800194c:	e7fe      	b.n	800194c <ADC1_2_IRQHandler>

0800194e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800194e:	b580      	push	{r7, lr}
 8001950:	b082      	sub	sp, #8
 8001952:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001954:	2300      	movs	r3, #0
 8001956:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001958:	2003      	movs	r0, #3
 800195a:	f002 fd41 	bl	80043e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800195e:	200f      	movs	r0, #15
 8001960:	f000 f80e 	bl	8001980 <HAL_InitTick>
 8001964:	4603      	mov	r3, r0
 8001966:	2b00      	cmp	r3, #0
 8001968:	d002      	beq.n	8001970 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800196a:	2301      	movs	r3, #1
 800196c:	71fb      	strb	r3, [r7, #7]
 800196e:	e001      	b.n	8001974 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001970:	f7ff fc44 	bl	80011fc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001974:	79fb      	ldrb	r3, [r7, #7]

}
 8001976:	4618      	mov	r0, r3
 8001978:	3708      	adds	r7, #8
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}
	...

08001980 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b084      	sub	sp, #16
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001988:	2300      	movs	r3, #0
 800198a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800198c:	4b16      	ldr	r3, [pc, #88]	; (80019e8 <HAL_InitTick+0x68>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d022      	beq.n	80019da <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001994:	4b15      	ldr	r3, [pc, #84]	; (80019ec <HAL_InitTick+0x6c>)
 8001996:	681a      	ldr	r2, [r3, #0]
 8001998:	4b13      	ldr	r3, [pc, #76]	; (80019e8 <HAL_InitTick+0x68>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80019a0:	fbb1 f3f3 	udiv	r3, r1, r3
 80019a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80019a8:	4618      	mov	r0, r3
 80019aa:	f002 fd4c 	bl	8004446 <HAL_SYSTICK_Config>
 80019ae:	4603      	mov	r3, r0
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d10f      	bne.n	80019d4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2b0f      	cmp	r3, #15
 80019b8:	d809      	bhi.n	80019ce <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019ba:	2200      	movs	r2, #0
 80019bc:	6879      	ldr	r1, [r7, #4]
 80019be:	f04f 30ff 	mov.w	r0, #4294967295
 80019c2:	f002 fd18 	bl	80043f6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80019c6:	4a0a      	ldr	r2, [pc, #40]	; (80019f0 <HAL_InitTick+0x70>)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6013      	str	r3, [r2, #0]
 80019cc:	e007      	b.n	80019de <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80019ce:	2301      	movs	r3, #1
 80019d0:	73fb      	strb	r3, [r7, #15]
 80019d2:	e004      	b.n	80019de <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80019d4:	2301      	movs	r3, #1
 80019d6:	73fb      	strb	r3, [r7, #15]
 80019d8:	e001      	b.n	80019de <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80019da:	2301      	movs	r3, #1
 80019dc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80019de:	7bfb      	ldrb	r3, [r7, #15]
}
 80019e0:	4618      	mov	r0, r3
 80019e2:	3710      	adds	r7, #16
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	20000018 	.word	0x20000018
 80019ec:	20000010 	.word	0x20000010
 80019f0:	20000014 	.word	0x20000014

080019f4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019f8:	4b05      	ldr	r3, [pc, #20]	; (8001a10 <HAL_IncTick+0x1c>)
 80019fa:	681a      	ldr	r2, [r3, #0]
 80019fc:	4b05      	ldr	r3, [pc, #20]	; (8001a14 <HAL_IncTick+0x20>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4413      	add	r3, r2
 8001a02:	4a03      	ldr	r2, [pc, #12]	; (8001a10 <HAL_IncTick+0x1c>)
 8001a04:	6013      	str	r3, [r2, #0]
}
 8001a06:	bf00      	nop
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0e:	4770      	bx	lr
 8001a10:	2000032c 	.word	0x2000032c
 8001a14:	20000018 	.word	0x20000018

08001a18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	af00      	add	r7, sp, #0
  return uwTick;
 8001a1c:	4b03      	ldr	r3, [pc, #12]	; (8001a2c <HAL_GetTick+0x14>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	46bd      	mov	sp, r7
 8001a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a28:	4770      	bx	lr
 8001a2a:	bf00      	nop
 8001a2c:	2000032c 	.word	0x2000032c

08001a30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b084      	sub	sp, #16
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a38:	f7ff ffee 	bl	8001a18 <HAL_GetTick>
 8001a3c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a48:	d004      	beq.n	8001a54 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a4a:	4b09      	ldr	r3, [pc, #36]	; (8001a70 <HAL_Delay+0x40>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	68fa      	ldr	r2, [r7, #12]
 8001a50:	4413      	add	r3, r2
 8001a52:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a54:	bf00      	nop
 8001a56:	f7ff ffdf 	bl	8001a18 <HAL_GetTick>
 8001a5a:	4602      	mov	r2, r0
 8001a5c:	68bb      	ldr	r3, [r7, #8]
 8001a5e:	1ad3      	subs	r3, r2, r3
 8001a60:	68fa      	ldr	r2, [r7, #12]
 8001a62:	429a      	cmp	r2, r3
 8001a64:	d8f7      	bhi.n	8001a56 <HAL_Delay+0x26>
  {
  }
}
 8001a66:	bf00      	nop
 8001a68:	bf00      	nop
 8001a6a:	3710      	adds	r7, #16
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}
 8001a70:	20000018 	.word	0x20000018

08001a74 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001a74:	b480      	push	{r7}
 8001a76:	b083      	sub	sp, #12
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
 8001a7c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	689b      	ldr	r3, [r3, #8]
 8001a82:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	431a      	orrs	r2, r3
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	609a      	str	r2, [r3, #8]
}
 8001a8e:	bf00      	nop
 8001a90:	370c      	adds	r7, #12
 8001a92:	46bd      	mov	sp, r7
 8001a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a98:	4770      	bx	lr

08001a9a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001a9a:	b480      	push	{r7}
 8001a9c:	b083      	sub	sp, #12
 8001a9e:	af00      	add	r7, sp, #0
 8001aa0:	6078      	str	r0, [r7, #4]
 8001aa2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	689b      	ldr	r3, [r3, #8]
 8001aa8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	431a      	orrs	r2, r3
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	609a      	str	r2, [r3, #8]
}
 8001ab4:	bf00      	nop
 8001ab6:	370c      	adds	r7, #12
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abe:	4770      	bx	lr

08001ac0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b083      	sub	sp, #12
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	689b      	ldr	r3, [r3, #8]
 8001acc:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	370c      	adds	r7, #12
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ada:	4770      	bx	lr

08001adc <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b087      	sub	sp, #28
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	60f8      	str	r0, [r7, #12]
 8001ae4:	60b9      	str	r1, [r7, #8]
 8001ae6:	607a      	str	r2, [r7, #4]
 8001ae8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	3360      	adds	r3, #96	; 0x60
 8001aee:	461a      	mov	r2, r3
 8001af0:	68bb      	ldr	r3, [r7, #8]
 8001af2:	009b      	lsls	r3, r3, #2
 8001af4:	4413      	add	r3, r2
 8001af6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	681a      	ldr	r2, [r3, #0]
 8001afc:	4b08      	ldr	r3, [pc, #32]	; (8001b20 <LL_ADC_SetOffset+0x44>)
 8001afe:	4013      	ands	r3, r2
 8001b00:	687a      	ldr	r2, [r7, #4]
 8001b02:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001b06:	683a      	ldr	r2, [r7, #0]
 8001b08:	430a      	orrs	r2, r1
 8001b0a:	4313      	orrs	r3, r2
 8001b0c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001b10:	697b      	ldr	r3, [r7, #20]
 8001b12:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001b14:	bf00      	nop
 8001b16:	371c      	adds	r7, #28
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1e:	4770      	bx	lr
 8001b20:	03fff000 	.word	0x03fff000

08001b24 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b085      	sub	sp, #20
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
 8001b2c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	3360      	adds	r3, #96	; 0x60
 8001b32:	461a      	mov	r2, r3
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	009b      	lsls	r3, r3, #2
 8001b38:	4413      	add	r3, r2
 8001b3a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	3714      	adds	r7, #20
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4e:	4770      	bx	lr

08001b50 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b087      	sub	sp, #28
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	60f8      	str	r0, [r7, #12]
 8001b58:	60b9      	str	r1, [r7, #8]
 8001b5a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	3360      	adds	r3, #96	; 0x60
 8001b60:	461a      	mov	r2, r3
 8001b62:	68bb      	ldr	r3, [r7, #8]
 8001b64:	009b      	lsls	r3, r3, #2
 8001b66:	4413      	add	r3, r2
 8001b68:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001b6a:	697b      	ldr	r3, [r7, #20]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	431a      	orrs	r2, r3
 8001b76:	697b      	ldr	r3, [r7, #20]
 8001b78:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001b7a:	bf00      	nop
 8001b7c:	371c      	adds	r7, #28
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b84:	4770      	bx	lr

08001b86 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001b86:	b480      	push	{r7}
 8001b88:	b087      	sub	sp, #28
 8001b8a:	af00      	add	r7, sp, #0
 8001b8c:	60f8      	str	r0, [r7, #12]
 8001b8e:	60b9      	str	r1, [r7, #8]
 8001b90:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	3360      	adds	r3, #96	; 0x60
 8001b96:	461a      	mov	r2, r3
 8001b98:	68bb      	ldr	r3, [r7, #8]
 8001b9a:	009b      	lsls	r3, r3, #2
 8001b9c:	4413      	add	r3, r2
 8001b9e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	431a      	orrs	r2, r3
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001bb0:	bf00      	nop
 8001bb2:	371c      	adds	r7, #28
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bba:	4770      	bx	lr

08001bbc <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b087      	sub	sp, #28
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	60f8      	str	r0, [r7, #12]
 8001bc4:	60b9      	str	r1, [r7, #8]
 8001bc6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	3360      	adds	r3, #96	; 0x60
 8001bcc:	461a      	mov	r2, r3
 8001bce:	68bb      	ldr	r3, [r7, #8]
 8001bd0:	009b      	lsls	r3, r3, #2
 8001bd2:	4413      	add	r3, r2
 8001bd4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001bd6:	697b      	ldr	r3, [r7, #20]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	431a      	orrs	r2, r3
 8001be2:	697b      	ldr	r3, [r7, #20]
 8001be4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001be6:	bf00      	nop
 8001be8:	371c      	adds	r7, #28
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr

08001bf2 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001bf2:	b480      	push	{r7}
 8001bf4:	b083      	sub	sp, #12
 8001bf6:	af00      	add	r7, sp, #0
 8001bf8:	6078      	str	r0, [r7, #4]
 8001bfa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	695b      	ldr	r3, [r3, #20]
 8001c00:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	431a      	orrs	r2, r3
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	615a      	str	r2, [r3, #20]
}
 8001c0c:	bf00      	nop
 8001c0e:	370c      	adds	r7, #12
 8001c10:	46bd      	mov	sp, r7
 8001c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c16:	4770      	bx	lr

08001c18 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b083      	sub	sp, #12
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	68db      	ldr	r3, [r3, #12]
 8001c24:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d101      	bne.n	8001c30 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	e000      	b.n	8001c32 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001c30:	2300      	movs	r3, #0
}
 8001c32:	4618      	mov	r0, r3
 8001c34:	370c      	adds	r7, #12
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr

08001c3e <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001c3e:	b480      	push	{r7}
 8001c40:	b087      	sub	sp, #28
 8001c42:	af00      	add	r7, sp, #0
 8001c44:	60f8      	str	r0, [r7, #12]
 8001c46:	60b9      	str	r1, [r7, #8]
 8001c48:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	3330      	adds	r3, #48	; 0x30
 8001c4e:	461a      	mov	r2, r3
 8001c50:	68bb      	ldr	r3, [r7, #8]
 8001c52:	0a1b      	lsrs	r3, r3, #8
 8001c54:	009b      	lsls	r3, r3, #2
 8001c56:	f003 030c 	and.w	r3, r3, #12
 8001c5a:	4413      	add	r3, r2
 8001c5c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c5e:	697b      	ldr	r3, [r7, #20]
 8001c60:	681a      	ldr	r2, [r3, #0]
 8001c62:	68bb      	ldr	r3, [r7, #8]
 8001c64:	f003 031f 	and.w	r3, r3, #31
 8001c68:	211f      	movs	r1, #31
 8001c6a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c6e:	43db      	mvns	r3, r3
 8001c70:	401a      	ands	r2, r3
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	0e9b      	lsrs	r3, r3, #26
 8001c76:	f003 011f 	and.w	r1, r3, #31
 8001c7a:	68bb      	ldr	r3, [r7, #8]
 8001c7c:	f003 031f 	and.w	r3, r3, #31
 8001c80:	fa01 f303 	lsl.w	r3, r1, r3
 8001c84:	431a      	orrs	r2, r3
 8001c86:	697b      	ldr	r3, [r7, #20]
 8001c88:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001c8a:	bf00      	nop
 8001c8c:	371c      	adds	r7, #28
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr

08001c96 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001c96:	b480      	push	{r7}
 8001c98:	b087      	sub	sp, #28
 8001c9a:	af00      	add	r7, sp, #0
 8001c9c:	60f8      	str	r0, [r7, #12]
 8001c9e:	60b9      	str	r1, [r7, #8]
 8001ca0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	3314      	adds	r3, #20
 8001ca6:	461a      	mov	r2, r3
 8001ca8:	68bb      	ldr	r3, [r7, #8]
 8001caa:	0e5b      	lsrs	r3, r3, #25
 8001cac:	009b      	lsls	r3, r3, #2
 8001cae:	f003 0304 	and.w	r3, r3, #4
 8001cb2:	4413      	add	r3, r2
 8001cb4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001cb6:	697b      	ldr	r3, [r7, #20]
 8001cb8:	681a      	ldr	r2, [r3, #0]
 8001cba:	68bb      	ldr	r3, [r7, #8]
 8001cbc:	0d1b      	lsrs	r3, r3, #20
 8001cbe:	f003 031f 	and.w	r3, r3, #31
 8001cc2:	2107      	movs	r1, #7
 8001cc4:	fa01 f303 	lsl.w	r3, r1, r3
 8001cc8:	43db      	mvns	r3, r3
 8001cca:	401a      	ands	r2, r3
 8001ccc:	68bb      	ldr	r3, [r7, #8]
 8001cce:	0d1b      	lsrs	r3, r3, #20
 8001cd0:	f003 031f 	and.w	r3, r3, #31
 8001cd4:	6879      	ldr	r1, [r7, #4]
 8001cd6:	fa01 f303 	lsl.w	r3, r1, r3
 8001cda:	431a      	orrs	r2, r3
 8001cdc:	697b      	ldr	r3, [r7, #20]
 8001cde:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001ce0:	bf00      	nop
 8001ce2:	371c      	adds	r7, #28
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cea:	4770      	bx	lr

08001cec <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b085      	sub	sp, #20
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	60f8      	str	r0, [r7, #12]
 8001cf4:	60b9      	str	r1, [r7, #8]
 8001cf6:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	4a0f      	ldr	r2, [pc, #60]	; (8001d38 <LL_ADC_SetChannelSingleDiff+0x4c>)
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d10a      	bne.n	8001d16 <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001d06:	68bb      	ldr	r3, [r7, #8]
 8001d08:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d0c:	431a      	orrs	r2, r3
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 8001d14:	e00a      	b.n	8001d2c <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001d1c:	68bb      	ldr	r3, [r7, #8]
 8001d1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d22:	43db      	mvns	r3, r3
 8001d24:	401a      	ands	r2, r3
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8001d2c:	bf00      	nop
 8001d2e:	3714      	adds	r7, #20
 8001d30:	46bd      	mov	sp, r7
 8001d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d36:	4770      	bx	lr
 8001d38:	407f0000 	.word	0x407f0000

08001d3c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b083      	sub	sp, #12
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	689b      	ldr	r3, [r3, #8]
 8001d48:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001d4c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001d50:	687a      	ldr	r2, [r7, #4]
 8001d52:	6093      	str	r3, [r2, #8]
}
 8001d54:	bf00      	nop
 8001d56:	370c      	adds	r7, #12
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5e:	4770      	bx	lr

08001d60 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b083      	sub	sp, #12
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	689b      	ldr	r3, [r3, #8]
 8001d6c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001d70:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001d74:	d101      	bne.n	8001d7a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001d76:	2301      	movs	r3, #1
 8001d78:	e000      	b.n	8001d7c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001d7a:	2300      	movs	r3, #0
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	370c      	adds	r7, #12
 8001d80:	46bd      	mov	sp, r7
 8001d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d86:	4770      	bx	lr

08001d88 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b083      	sub	sp, #12
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	689b      	ldr	r3, [r3, #8]
 8001d94:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001d98:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001d9c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001da4:	bf00      	nop
 8001da6:	370c      	adds	r7, #12
 8001da8:	46bd      	mov	sp, r7
 8001daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dae:	4770      	bx	lr

08001db0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b083      	sub	sp, #12
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	689b      	ldr	r3, [r3, #8]
 8001dbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dc0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001dc4:	d101      	bne.n	8001dca <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	e000      	b.n	8001dcc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001dca:	2300      	movs	r3, #0
}
 8001dcc:	4618      	mov	r0, r3
 8001dce:	370c      	adds	r7, #12
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd6:	4770      	bx	lr

08001dd8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b083      	sub	sp, #12
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	689b      	ldr	r3, [r3, #8]
 8001de4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001de8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001dec:	f043 0201 	orr.w	r2, r3, #1
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001df4:	bf00      	nop
 8001df6:	370c      	adds	r7, #12
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfe:	4770      	bx	lr

08001e00 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b083      	sub	sp, #12
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	689b      	ldr	r3, [r3, #8]
 8001e0c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001e10:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001e14:	f043 0202 	orr.w	r2, r3, #2
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001e1c:	bf00      	nop
 8001e1e:	370c      	adds	r7, #12
 8001e20:	46bd      	mov	sp, r7
 8001e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e26:	4770      	bx	lr

08001e28 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b083      	sub	sp, #12
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	689b      	ldr	r3, [r3, #8]
 8001e34:	f003 0301 	and.w	r3, r3, #1
 8001e38:	2b01      	cmp	r3, #1
 8001e3a:	d101      	bne.n	8001e40 <LL_ADC_IsEnabled+0x18>
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	e000      	b.n	8001e42 <LL_ADC_IsEnabled+0x1a>
 8001e40:	2300      	movs	r3, #0
}
 8001e42:	4618      	mov	r0, r3
 8001e44:	370c      	adds	r7, #12
 8001e46:	46bd      	mov	sp, r7
 8001e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4c:	4770      	bx	lr

08001e4e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8001e4e:	b480      	push	{r7}
 8001e50:	b083      	sub	sp, #12
 8001e52:	af00      	add	r7, sp, #0
 8001e54:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	689b      	ldr	r3, [r3, #8]
 8001e5a:	f003 0302 	and.w	r3, r3, #2
 8001e5e:	2b02      	cmp	r3, #2
 8001e60:	d101      	bne.n	8001e66 <LL_ADC_IsDisableOngoing+0x18>
 8001e62:	2301      	movs	r3, #1
 8001e64:	e000      	b.n	8001e68 <LL_ADC_IsDisableOngoing+0x1a>
 8001e66:	2300      	movs	r3, #0
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	370c      	adds	r7, #12
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e72:	4770      	bx	lr

08001e74 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b083      	sub	sp, #12
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	689b      	ldr	r3, [r3, #8]
 8001e80:	f003 0304 	and.w	r3, r3, #4
 8001e84:	2b04      	cmp	r3, #4
 8001e86:	d101      	bne.n	8001e8c <LL_ADC_REG_IsConversionOngoing+0x18>
 8001e88:	2301      	movs	r3, #1
 8001e8a:	e000      	b.n	8001e8e <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001e8c:	2300      	movs	r3, #0
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	370c      	adds	r7, #12
 8001e92:	46bd      	mov	sp, r7
 8001e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e98:	4770      	bx	lr

08001e9a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001e9a:	b480      	push	{r7}
 8001e9c:	b083      	sub	sp, #12
 8001e9e:	af00      	add	r7, sp, #0
 8001ea0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	689b      	ldr	r3, [r3, #8]
 8001ea6:	f003 0308 	and.w	r3, r3, #8
 8001eaa:	2b08      	cmp	r3, #8
 8001eac:	d101      	bne.n	8001eb2 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e000      	b.n	8001eb4 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001eb2:	2300      	movs	r3, #0
}
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	370c      	adds	r7, #12
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebe:	4770      	bx	lr

08001ec0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001ec0:	b590      	push	{r4, r7, lr}
 8001ec2:	b089      	sub	sp, #36	; 0x24
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d101      	bne.n	8001eda <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	e1a1      	b.n	800221e <HAL_ADC_Init+0x35e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	695b      	ldr	r3, [r3, #20]
 8001ede:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d109      	bne.n	8001efc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001ee8:	6878      	ldr	r0, [r7, #4]
 8001eea:	f7ff f9ab 	bl	8001244 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4618      	mov	r0, r3
 8001f02:	f7ff ff2d 	bl	8001d60 <LL_ADC_IsDeepPowerDownEnabled>
 8001f06:	4603      	mov	r3, r0
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d004      	beq.n	8001f16 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4618      	mov	r0, r3
 8001f12:	f7ff ff13 	bl	8001d3c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f7ff ff48 	bl	8001db0 <LL_ADC_IsInternalRegulatorEnabled>
 8001f20:	4603      	mov	r3, r0
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d115      	bne.n	8001f52 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f7ff ff2c 	bl	8001d88 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001f30:	4b9a      	ldr	r3, [pc, #616]	; (800219c <HAL_ADC_Init+0x2dc>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	099b      	lsrs	r3, r3, #6
 8001f36:	4a9a      	ldr	r2, [pc, #616]	; (80021a0 <HAL_ADC_Init+0x2e0>)
 8001f38:	fba2 2303 	umull	r2, r3, r2, r3
 8001f3c:	099b      	lsrs	r3, r3, #6
 8001f3e:	3301      	adds	r3, #1
 8001f40:	005b      	lsls	r3, r3, #1
 8001f42:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001f44:	e002      	b.n	8001f4c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001f46:	68bb      	ldr	r3, [r7, #8]
 8001f48:	3b01      	subs	r3, #1
 8001f4a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001f4c:	68bb      	ldr	r3, [r7, #8]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d1f9      	bne.n	8001f46 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4618      	mov	r0, r3
 8001f58:	f7ff ff2a 	bl	8001db0 <LL_ADC_IsInternalRegulatorEnabled>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d10d      	bne.n	8001f7e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f66:	f043 0210 	orr.w	r2, r3, #16
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f72:	f043 0201 	orr.w	r2, r3, #1
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4618      	mov	r0, r3
 8001f84:	f7ff ff76 	bl	8001e74 <LL_ADC_REG_IsConversionOngoing>
 8001f88:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f8e:	f003 0310 	and.w	r3, r3, #16
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	f040 813a 	bne.w	800220c <HAL_ADC_Init+0x34c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001f98:	697b      	ldr	r3, [r7, #20]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	f040 8136 	bne.w	800220c <HAL_ADC_Init+0x34c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fa4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001fa8:	f043 0202 	orr.w	r2, r3, #2
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f7ff ff37 	bl	8001e28 <LL_ADC_IsEnabled>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d137      	bne.n	8002030 <HAL_ADC_Init+0x170>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001fc8:	d004      	beq.n	8001fd4 <HAL_ADC_Init+0x114>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4a75      	ldr	r2, [pc, #468]	; (80021a4 <HAL_ADC_Init+0x2e4>)
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d10f      	bne.n	8001ff4 <HAL_ADC_Init+0x134>
 8001fd4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001fd8:	f7ff ff26 	bl	8001e28 <LL_ADC_IsEnabled>
 8001fdc:	4604      	mov	r4, r0
 8001fde:	4871      	ldr	r0, [pc, #452]	; (80021a4 <HAL_ADC_Init+0x2e4>)
 8001fe0:	f7ff ff22 	bl	8001e28 <LL_ADC_IsEnabled>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	4323      	orrs	r3, r4
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	bf0c      	ite	eq
 8001fec:	2301      	moveq	r3, #1
 8001fee:	2300      	movne	r3, #0
 8001ff0:	b2db      	uxtb	r3, r3
 8001ff2:	e008      	b.n	8002006 <HAL_ADC_Init+0x146>
 8001ff4:	486c      	ldr	r0, [pc, #432]	; (80021a8 <HAL_ADC_Init+0x2e8>)
 8001ff6:	f7ff ff17 	bl	8001e28 <LL_ADC_IsEnabled>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	bf0c      	ite	eq
 8002000:	2301      	moveq	r3, #1
 8002002:	2300      	movne	r3, #0
 8002004:	b2db      	uxtb	r3, r3
 8002006:	2b00      	cmp	r3, #0
 8002008:	d012      	beq.n	8002030 <HAL_ADC_Init+0x170>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002012:	d004      	beq.n	800201e <HAL_ADC_Init+0x15e>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a62      	ldr	r2, [pc, #392]	; (80021a4 <HAL_ADC_Init+0x2e4>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d101      	bne.n	8002022 <HAL_ADC_Init+0x162>
 800201e:	4a63      	ldr	r2, [pc, #396]	; (80021ac <HAL_ADC_Init+0x2ec>)
 8002020:	e000      	b.n	8002024 <HAL_ADC_Init+0x164>
 8002022:	4a63      	ldr	r2, [pc, #396]	; (80021b0 <HAL_ADC_Init+0x2f0>)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	4619      	mov	r1, r3
 800202a:	4610      	mov	r0, r2
 800202c:	f7ff fd22 	bl	8001a74 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	7f5b      	ldrb	r3, [r3, #29]
 8002034:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800203a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002040:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002046:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800204e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002050:	4313      	orrs	r3, r2
 8002052:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800205a:	2b01      	cmp	r3, #1
 800205c:	d106      	bne.n	800206c <HAL_ADC_Init+0x1ac>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002062:	3b01      	subs	r3, #1
 8002064:	045b      	lsls	r3, r3, #17
 8002066:	69ba      	ldr	r2, [r7, #24]
 8002068:	4313      	orrs	r3, r2
 800206a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002070:	2b00      	cmp	r3, #0
 8002072:	d009      	beq.n	8002088 <HAL_ADC_Init+0x1c8>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002078:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002080:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002082:	69ba      	ldr	r2, [r7, #24]
 8002084:	4313      	orrs	r3, r2
 8002086:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	68da      	ldr	r2, [r3, #12]
 800208e:	4b49      	ldr	r3, [pc, #292]	; (80021b4 <HAL_ADC_Init+0x2f4>)
 8002090:	4013      	ands	r3, r2
 8002092:	687a      	ldr	r2, [r7, #4]
 8002094:	6812      	ldr	r2, [r2, #0]
 8002096:	69b9      	ldr	r1, [r7, #24]
 8002098:	430b      	orrs	r3, r1
 800209a:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	691b      	ldr	r3, [r3, #16]
 80020a2:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	430a      	orrs	r2, r1
 80020b0:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4618      	mov	r0, r3
 80020b8:	f7ff fedc 	bl	8001e74 <LL_ADC_REG_IsConversionOngoing>
 80020bc:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4618      	mov	r0, r3
 80020c4:	f7ff fee9 	bl	8001e9a <LL_ADC_INJ_IsConversionOngoing>
 80020c8:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80020ca:	693b      	ldr	r3, [r7, #16]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d17b      	bne.n	80021c8 <HAL_ADC_Init+0x308>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d178      	bne.n	80021c8 <HAL_ADC_Init+0x308>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80020da:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80020e2:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80020e4:	4313      	orrs	r3, r2
 80020e6:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	68db      	ldr	r3, [r3, #12]
 80020ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80020f2:	f023 0302 	bic.w	r3, r3, #2
 80020f6:	687a      	ldr	r2, [r7, #4]
 80020f8:	6812      	ldr	r2, [r2, #0]
 80020fa:	69b9      	ldr	r1, [r7, #24]
 80020fc:	430b      	orrs	r3, r1
 80020fe:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	691b      	ldr	r3, [r3, #16]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d017      	beq.n	8002138 <HAL_ADC_Init+0x278>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	691a      	ldr	r2, [r3, #16]
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002116:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002120:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002124:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002128:	687a      	ldr	r2, [r7, #4]
 800212a:	6911      	ldr	r1, [r2, #16]
 800212c:	687a      	ldr	r2, [r7, #4]
 800212e:	6812      	ldr	r2, [r2, #0]
 8002130:	430b      	orrs	r3, r1
 8002132:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8002136:	e013      	b.n	8002160 <HAL_ADC_Init+0x2a0>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	691a      	ldr	r2, [r3, #16]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002146:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002150:	687a      	ldr	r2, [r7, #4]
 8002152:	6812      	ldr	r2, [r2, #0]
 8002154:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002158:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800215c:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002166:	2b01      	cmp	r3, #1
 8002168:	d126      	bne.n	80021b8 <HAL_ADC_Init+0x2f8>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	691b      	ldr	r3, [r3, #16]
 8002170:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002174:	f023 0304 	bic.w	r3, r3, #4
 8002178:	687a      	ldr	r2, [r7, #4]
 800217a:	6c51      	ldr	r1, [r2, #68]	; 0x44
 800217c:	687a      	ldr	r2, [r7, #4]
 800217e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002180:	4311      	orrs	r1, r2
 8002182:	687a      	ldr	r2, [r7, #4]
 8002184:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002186:	4311      	orrs	r1, r2
 8002188:	687a      	ldr	r2, [r7, #4]
 800218a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800218c:	430a      	orrs	r2, r1
 800218e:	431a      	orrs	r2, r3
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f042 0201 	orr.w	r2, r2, #1
 8002198:	611a      	str	r2, [r3, #16]
 800219a:	e015      	b.n	80021c8 <HAL_ADC_Init+0x308>
 800219c:	20000010 	.word	0x20000010
 80021a0:	053e2d63 	.word	0x053e2d63
 80021a4:	50000100 	.word	0x50000100
 80021a8:	50000400 	.word	0x50000400
 80021ac:	50000300 	.word	0x50000300
 80021b0:	50000700 	.word	0x50000700
 80021b4:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	691a      	ldr	r2, [r3, #16]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f022 0201 	bic.w	r2, r2, #1
 80021c6:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	695b      	ldr	r3, [r3, #20]
 80021cc:	2b01      	cmp	r3, #1
 80021ce:	d10c      	bne.n	80021ea <HAL_ADC_Init+0x32a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d6:	f023 010f 	bic.w	r1, r3, #15
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6a1b      	ldr	r3, [r3, #32]
 80021de:	1e5a      	subs	r2, r3, #1
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	430a      	orrs	r2, r1
 80021e6:	631a      	str	r2, [r3, #48]	; 0x30
 80021e8:	e007      	b.n	80021fa <HAL_ADC_Init+0x33a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f022 020f 	bic.w	r2, r2, #15
 80021f8:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021fe:	f023 0303 	bic.w	r3, r3, #3
 8002202:	f043 0201 	orr.w	r2, r3, #1
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	65da      	str	r2, [r3, #92]	; 0x5c
 800220a:	e007      	b.n	800221c <HAL_ADC_Init+0x35c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002210:	f043 0210 	orr.w	r2, r3, #16
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002218:	2301      	movs	r3, #1
 800221a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800221c:	7ffb      	ldrb	r3, [r7, #31]
}
 800221e:	4618      	mov	r0, r3
 8002220:	3724      	adds	r7, #36	; 0x24
 8002222:	46bd      	mov	sp, r7
 8002224:	bd90      	pop	{r4, r7, pc}
 8002226:	bf00      	nop

08002228 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002228:	b480      	push	{r7}
 800222a:	b083      	sub	sp, #12
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002230:	bf00      	nop
 8002232:	370c      	adds	r7, #12
 8002234:	46bd      	mov	sp, r7
 8002236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223a:	4770      	bx	lr

0800223c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800223c:	b480      	push	{r7}
 800223e:	b083      	sub	sp, #12
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002244:	bf00      	nop
 8002246:	370c      	adds	r7, #12
 8002248:	46bd      	mov	sp, r7
 800224a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224e:	4770      	bx	lr

08002250 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002250:	b480      	push	{r7}
 8002252:	b083      	sub	sp, #12
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002258:	bf00      	nop
 800225a:	370c      	adds	r7, #12
 800225c:	46bd      	mov	sp, r7
 800225e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002262:	4770      	bx	lr

08002264 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b0b6      	sub	sp, #216	; 0xd8
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
 800226c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800226e:	2300      	movs	r3, #0
 8002270:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002274:	2300      	movs	r3, #0
 8002276:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800227e:	2b01      	cmp	r3, #1
 8002280:	d102      	bne.n	8002288 <HAL_ADC_ConfigChannel+0x24>
 8002282:	2302      	movs	r3, #2
 8002284:	f000 bc04 	b.w	8002a90 <HAL_ADC_ConfigChannel+0x82c>
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2201      	movs	r2, #1
 800228c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4618      	mov	r0, r3
 8002296:	f7ff fded 	bl	8001e74 <LL_ADC_REG_IsConversionOngoing>
 800229a:	4603      	mov	r3, r0
 800229c:	2b00      	cmp	r3, #0
 800229e:	f040 83e8 	bne.w	8002a72 <HAL_ADC_ConfigChannel+0x80e>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6818      	ldr	r0, [r3, #0]
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	6859      	ldr	r1, [r3, #4]
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	461a      	mov	r2, r3
 80022b0:	f7ff fcc5 	bl	8001c3e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4618      	mov	r0, r3
 80022ba:	f7ff fddb 	bl	8001e74 <LL_ADC_REG_IsConversionOngoing>
 80022be:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4618      	mov	r0, r3
 80022c8:	f7ff fde7 	bl	8001e9a <LL_ADC_INJ_IsConversionOngoing>
 80022cc:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80022d0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	f040 81d9 	bne.w	800268c <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80022da:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80022de:	2b00      	cmp	r3, #0
 80022e0:	f040 81d4 	bne.w	800268c <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	689b      	ldr	r3, [r3, #8]
 80022e8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80022ec:	d10f      	bne.n	800230e <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6818      	ldr	r0, [r3, #0]
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	2200      	movs	r2, #0
 80022f8:	4619      	mov	r1, r3
 80022fa:	f7ff fccc 	bl	8001c96 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002306:	4618      	mov	r0, r3
 8002308:	f7ff fc73 	bl	8001bf2 <LL_ADC_SetSamplingTimeCommonConfig>
 800230c:	e00e      	b.n	800232c <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6818      	ldr	r0, [r3, #0]
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	6819      	ldr	r1, [r3, #0]
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	689b      	ldr	r3, [r3, #8]
 800231a:	461a      	mov	r2, r3
 800231c:	f7ff fcbb 	bl	8001c96 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	2100      	movs	r1, #0
 8002326:	4618      	mov	r0, r3
 8002328:	f7ff fc63 	bl	8001bf2 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	695a      	ldr	r2, [r3, #20]
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	68db      	ldr	r3, [r3, #12]
 8002336:	08db      	lsrs	r3, r3, #3
 8002338:	f003 0303 	and.w	r3, r3, #3
 800233c:	005b      	lsls	r3, r3, #1
 800233e:	fa02 f303 	lsl.w	r3, r2, r3
 8002342:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	691b      	ldr	r3, [r3, #16]
 800234a:	2b04      	cmp	r3, #4
 800234c:	d022      	beq.n	8002394 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6818      	ldr	r0, [r3, #0]
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	6919      	ldr	r1, [r3, #16]
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	681a      	ldr	r2, [r3, #0]
 800235a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800235e:	f7ff fbbd 	bl	8001adc <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6818      	ldr	r0, [r3, #0]
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	6919      	ldr	r1, [r3, #16]
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	699b      	ldr	r3, [r3, #24]
 800236e:	461a      	mov	r2, r3
 8002370:	f7ff fc09 	bl	8001b86 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6818      	ldr	r0, [r3, #0]
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	6919      	ldr	r1, [r3, #16]
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	7f1b      	ldrb	r3, [r3, #28]
 8002380:	2b01      	cmp	r3, #1
 8002382:	d102      	bne.n	800238a <HAL_ADC_ConfigChannel+0x126>
 8002384:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002388:	e000      	b.n	800238c <HAL_ADC_ConfigChannel+0x128>
 800238a:	2300      	movs	r3, #0
 800238c:	461a      	mov	r2, r3
 800238e:	f7ff fc15 	bl	8001bbc <LL_ADC_SetOffsetSaturation>
 8002392:	e17b      	b.n	800268c <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	2100      	movs	r1, #0
 800239a:	4618      	mov	r0, r3
 800239c:	f7ff fbc2 	bl	8001b24 <LL_ADC_GetOffsetChannel>
 80023a0:	4603      	mov	r3, r0
 80023a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d10a      	bne.n	80023c0 <HAL_ADC_ConfigChannel+0x15c>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	2100      	movs	r1, #0
 80023b0:	4618      	mov	r0, r3
 80023b2:	f7ff fbb7 	bl	8001b24 <LL_ADC_GetOffsetChannel>
 80023b6:	4603      	mov	r3, r0
 80023b8:	0e9b      	lsrs	r3, r3, #26
 80023ba:	f003 021f 	and.w	r2, r3, #31
 80023be:	e01e      	b.n	80023fe <HAL_ADC_ConfigChannel+0x19a>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	2100      	movs	r1, #0
 80023c6:	4618      	mov	r0, r3
 80023c8:	f7ff fbac 	bl	8001b24 <LL_ADC_GetOffsetChannel>
 80023cc:	4603      	mov	r3, r0
 80023ce:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023d2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80023d6:	fa93 f3a3 	rbit	r3, r3
 80023da:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80023de:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80023e2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80023e6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d101      	bne.n	80023f2 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 80023ee:	2320      	movs	r3, #32
 80023f0:	e004      	b.n	80023fc <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 80023f2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80023f6:	fab3 f383 	clz	r3, r3
 80023fa:	b2db      	uxtb	r3, r3
 80023fc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002406:	2b00      	cmp	r3, #0
 8002408:	d105      	bne.n	8002416 <HAL_ADC_ConfigChannel+0x1b2>
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	0e9b      	lsrs	r3, r3, #26
 8002410:	f003 031f 	and.w	r3, r3, #31
 8002414:	e018      	b.n	8002448 <HAL_ADC_ConfigChannel+0x1e4>
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800241e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002422:	fa93 f3a3 	rbit	r3, r3
 8002426:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800242a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800242e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002432:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002436:	2b00      	cmp	r3, #0
 8002438:	d101      	bne.n	800243e <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 800243a:	2320      	movs	r3, #32
 800243c:	e004      	b.n	8002448 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 800243e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002442:	fab3 f383 	clz	r3, r3
 8002446:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002448:	429a      	cmp	r2, r3
 800244a:	d106      	bne.n	800245a <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	2200      	movs	r2, #0
 8002452:	2100      	movs	r1, #0
 8002454:	4618      	mov	r0, r3
 8002456:	f7ff fb7b 	bl	8001b50 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	2101      	movs	r1, #1
 8002460:	4618      	mov	r0, r3
 8002462:	f7ff fb5f 	bl	8001b24 <LL_ADC_GetOffsetChannel>
 8002466:	4603      	mov	r3, r0
 8002468:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800246c:	2b00      	cmp	r3, #0
 800246e:	d10a      	bne.n	8002486 <HAL_ADC_ConfigChannel+0x222>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	2101      	movs	r1, #1
 8002476:	4618      	mov	r0, r3
 8002478:	f7ff fb54 	bl	8001b24 <LL_ADC_GetOffsetChannel>
 800247c:	4603      	mov	r3, r0
 800247e:	0e9b      	lsrs	r3, r3, #26
 8002480:	f003 021f 	and.w	r2, r3, #31
 8002484:	e01e      	b.n	80024c4 <HAL_ADC_ConfigChannel+0x260>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	2101      	movs	r1, #1
 800248c:	4618      	mov	r0, r3
 800248e:	f7ff fb49 	bl	8001b24 <LL_ADC_GetOffsetChannel>
 8002492:	4603      	mov	r3, r0
 8002494:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002498:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800249c:	fa93 f3a3 	rbit	r3, r3
 80024a0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80024a4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80024a8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80024ac:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d101      	bne.n	80024b8 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 80024b4:	2320      	movs	r3, #32
 80024b6:	e004      	b.n	80024c2 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 80024b8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80024bc:	fab3 f383 	clz	r3, r3
 80024c0:	b2db      	uxtb	r3, r3
 80024c2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d105      	bne.n	80024dc <HAL_ADC_ConfigChannel+0x278>
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	0e9b      	lsrs	r3, r3, #26
 80024d6:	f003 031f 	and.w	r3, r3, #31
 80024da:	e018      	b.n	800250e <HAL_ADC_ConfigChannel+0x2aa>
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80024e8:	fa93 f3a3 	rbit	r3, r3
 80024ec:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80024f0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80024f4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80024f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d101      	bne.n	8002504 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8002500:	2320      	movs	r3, #32
 8002502:	e004      	b.n	800250e <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8002504:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002508:	fab3 f383 	clz	r3, r3
 800250c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800250e:	429a      	cmp	r2, r3
 8002510:	d106      	bne.n	8002520 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	2200      	movs	r2, #0
 8002518:	2101      	movs	r1, #1
 800251a:	4618      	mov	r0, r3
 800251c:	f7ff fb18 	bl	8001b50 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	2102      	movs	r1, #2
 8002526:	4618      	mov	r0, r3
 8002528:	f7ff fafc 	bl	8001b24 <LL_ADC_GetOffsetChannel>
 800252c:	4603      	mov	r3, r0
 800252e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002532:	2b00      	cmp	r3, #0
 8002534:	d10a      	bne.n	800254c <HAL_ADC_ConfigChannel+0x2e8>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	2102      	movs	r1, #2
 800253c:	4618      	mov	r0, r3
 800253e:	f7ff faf1 	bl	8001b24 <LL_ADC_GetOffsetChannel>
 8002542:	4603      	mov	r3, r0
 8002544:	0e9b      	lsrs	r3, r3, #26
 8002546:	f003 021f 	and.w	r2, r3, #31
 800254a:	e01e      	b.n	800258a <HAL_ADC_ConfigChannel+0x326>
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	2102      	movs	r1, #2
 8002552:	4618      	mov	r0, r3
 8002554:	f7ff fae6 	bl	8001b24 <LL_ADC_GetOffsetChannel>
 8002558:	4603      	mov	r3, r0
 800255a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800255e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002562:	fa93 f3a3 	rbit	r3, r3
 8002566:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800256a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800256e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002572:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002576:	2b00      	cmp	r3, #0
 8002578:	d101      	bne.n	800257e <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 800257a:	2320      	movs	r3, #32
 800257c:	e004      	b.n	8002588 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 800257e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002582:	fab3 f383 	clz	r3, r3
 8002586:	b2db      	uxtb	r3, r3
 8002588:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002592:	2b00      	cmp	r3, #0
 8002594:	d105      	bne.n	80025a2 <HAL_ADC_ConfigChannel+0x33e>
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	0e9b      	lsrs	r3, r3, #26
 800259c:	f003 031f 	and.w	r3, r3, #31
 80025a0:	e016      	b.n	80025d0 <HAL_ADC_ConfigChannel+0x36c>
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025aa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80025ae:	fa93 f3a3 	rbit	r3, r3
 80025b2:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80025b4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80025b6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80025ba:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d101      	bne.n	80025c6 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 80025c2:	2320      	movs	r3, #32
 80025c4:	e004      	b.n	80025d0 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 80025c6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80025ca:	fab3 f383 	clz	r3, r3
 80025ce:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80025d0:	429a      	cmp	r2, r3
 80025d2:	d106      	bne.n	80025e2 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	2200      	movs	r2, #0
 80025da:	2102      	movs	r1, #2
 80025dc:	4618      	mov	r0, r3
 80025de:	f7ff fab7 	bl	8001b50 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	2103      	movs	r1, #3
 80025e8:	4618      	mov	r0, r3
 80025ea:	f7ff fa9b 	bl	8001b24 <LL_ADC_GetOffsetChannel>
 80025ee:	4603      	mov	r3, r0
 80025f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d10a      	bne.n	800260e <HAL_ADC_ConfigChannel+0x3aa>
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	2103      	movs	r1, #3
 80025fe:	4618      	mov	r0, r3
 8002600:	f7ff fa90 	bl	8001b24 <LL_ADC_GetOffsetChannel>
 8002604:	4603      	mov	r3, r0
 8002606:	0e9b      	lsrs	r3, r3, #26
 8002608:	f003 021f 	and.w	r2, r3, #31
 800260c:	e017      	b.n	800263e <HAL_ADC_ConfigChannel+0x3da>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	2103      	movs	r1, #3
 8002614:	4618      	mov	r0, r3
 8002616:	f7ff fa85 	bl	8001b24 <LL_ADC_GetOffsetChannel>
 800261a:	4603      	mov	r3, r0
 800261c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800261e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002620:	fa93 f3a3 	rbit	r3, r3
 8002624:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002626:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002628:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800262a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800262c:	2b00      	cmp	r3, #0
 800262e:	d101      	bne.n	8002634 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8002630:	2320      	movs	r3, #32
 8002632:	e003      	b.n	800263c <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8002634:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002636:	fab3 f383 	clz	r3, r3
 800263a:	b2db      	uxtb	r3, r3
 800263c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002646:	2b00      	cmp	r3, #0
 8002648:	d105      	bne.n	8002656 <HAL_ADC_ConfigChannel+0x3f2>
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	0e9b      	lsrs	r3, r3, #26
 8002650:	f003 031f 	and.w	r3, r3, #31
 8002654:	e011      	b.n	800267a <HAL_ADC_ConfigChannel+0x416>
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800265c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800265e:	fa93 f3a3 	rbit	r3, r3
 8002662:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002664:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002666:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002668:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800266a:	2b00      	cmp	r3, #0
 800266c:	d101      	bne.n	8002672 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 800266e:	2320      	movs	r3, #32
 8002670:	e003      	b.n	800267a <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8002672:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002674:	fab3 f383 	clz	r3, r3
 8002678:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800267a:	429a      	cmp	r2, r3
 800267c:	d106      	bne.n	800268c <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	2200      	movs	r2, #0
 8002684:	2103      	movs	r1, #3
 8002686:	4618      	mov	r0, r3
 8002688:	f7ff fa62 	bl	8001b50 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4618      	mov	r0, r3
 8002692:	f7ff fbc9 	bl	8001e28 <LL_ADC_IsEnabled>
 8002696:	4603      	mov	r3, r0
 8002698:	2b00      	cmp	r3, #0
 800269a:	f040 813d 	bne.w	8002918 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6818      	ldr	r0, [r3, #0]
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	6819      	ldr	r1, [r3, #0]
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	68db      	ldr	r3, [r3, #12]
 80026aa:	461a      	mov	r2, r3
 80026ac:	f7ff fb1e 	bl	8001cec <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	68db      	ldr	r3, [r3, #12]
 80026b4:	4aa2      	ldr	r2, [pc, #648]	; (8002940 <HAL_ADC_ConfigChannel+0x6dc>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	f040 812e 	bne.w	8002918 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d10b      	bne.n	80026e4 <HAL_ADC_ConfigChannel+0x480>
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	0e9b      	lsrs	r3, r3, #26
 80026d2:	3301      	adds	r3, #1
 80026d4:	f003 031f 	and.w	r3, r3, #31
 80026d8:	2b09      	cmp	r3, #9
 80026da:	bf94      	ite	ls
 80026dc:	2301      	movls	r3, #1
 80026de:	2300      	movhi	r3, #0
 80026e0:	b2db      	uxtb	r3, r3
 80026e2:	e019      	b.n	8002718 <HAL_ADC_ConfigChannel+0x4b4>
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80026ec:	fa93 f3a3 	rbit	r3, r3
 80026f0:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80026f2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80026f4:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80026f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d101      	bne.n	8002700 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 80026fc:	2320      	movs	r3, #32
 80026fe:	e003      	b.n	8002708 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8002700:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002702:	fab3 f383 	clz	r3, r3
 8002706:	b2db      	uxtb	r3, r3
 8002708:	3301      	adds	r3, #1
 800270a:	f003 031f 	and.w	r3, r3, #31
 800270e:	2b09      	cmp	r3, #9
 8002710:	bf94      	ite	ls
 8002712:	2301      	movls	r3, #1
 8002714:	2300      	movhi	r3, #0
 8002716:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002718:	2b00      	cmp	r3, #0
 800271a:	d079      	beq.n	8002810 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002724:	2b00      	cmp	r3, #0
 8002726:	d107      	bne.n	8002738 <HAL_ADC_ConfigChannel+0x4d4>
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	0e9b      	lsrs	r3, r3, #26
 800272e:	3301      	adds	r3, #1
 8002730:	069b      	lsls	r3, r3, #26
 8002732:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002736:	e015      	b.n	8002764 <HAL_ADC_ConfigChannel+0x500>
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800273e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002740:	fa93 f3a3 	rbit	r3, r3
 8002744:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002746:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002748:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800274a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800274c:	2b00      	cmp	r3, #0
 800274e:	d101      	bne.n	8002754 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8002750:	2320      	movs	r3, #32
 8002752:	e003      	b.n	800275c <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8002754:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002756:	fab3 f383 	clz	r3, r3
 800275a:	b2db      	uxtb	r3, r3
 800275c:	3301      	adds	r3, #1
 800275e:	069b      	lsls	r3, r3, #26
 8002760:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800276c:	2b00      	cmp	r3, #0
 800276e:	d109      	bne.n	8002784 <HAL_ADC_ConfigChannel+0x520>
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	0e9b      	lsrs	r3, r3, #26
 8002776:	3301      	adds	r3, #1
 8002778:	f003 031f 	and.w	r3, r3, #31
 800277c:	2101      	movs	r1, #1
 800277e:	fa01 f303 	lsl.w	r3, r1, r3
 8002782:	e017      	b.n	80027b4 <HAL_ADC_ConfigChannel+0x550>
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800278a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800278c:	fa93 f3a3 	rbit	r3, r3
 8002790:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002792:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002794:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002796:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002798:	2b00      	cmp	r3, #0
 800279a:	d101      	bne.n	80027a0 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 800279c:	2320      	movs	r3, #32
 800279e:	e003      	b.n	80027a8 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 80027a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80027a2:	fab3 f383 	clz	r3, r3
 80027a6:	b2db      	uxtb	r3, r3
 80027a8:	3301      	adds	r3, #1
 80027aa:	f003 031f 	and.w	r3, r3, #31
 80027ae:	2101      	movs	r1, #1
 80027b0:	fa01 f303 	lsl.w	r3, r1, r3
 80027b4:	ea42 0103 	orr.w	r1, r2, r3
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d10a      	bne.n	80027da <HAL_ADC_ConfigChannel+0x576>
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	0e9b      	lsrs	r3, r3, #26
 80027ca:	3301      	adds	r3, #1
 80027cc:	f003 021f 	and.w	r2, r3, #31
 80027d0:	4613      	mov	r3, r2
 80027d2:	005b      	lsls	r3, r3, #1
 80027d4:	4413      	add	r3, r2
 80027d6:	051b      	lsls	r3, r3, #20
 80027d8:	e018      	b.n	800280c <HAL_ADC_ConfigChannel+0x5a8>
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027e2:	fa93 f3a3 	rbit	r3, r3
 80027e6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80027e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80027ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d101      	bne.n	80027f6 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 80027f2:	2320      	movs	r3, #32
 80027f4:	e003      	b.n	80027fe <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 80027f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80027f8:	fab3 f383 	clz	r3, r3
 80027fc:	b2db      	uxtb	r3, r3
 80027fe:	3301      	adds	r3, #1
 8002800:	f003 021f 	and.w	r2, r3, #31
 8002804:	4613      	mov	r3, r2
 8002806:	005b      	lsls	r3, r3, #1
 8002808:	4413      	add	r3, r2
 800280a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800280c:	430b      	orrs	r3, r1
 800280e:	e07e      	b.n	800290e <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002818:	2b00      	cmp	r3, #0
 800281a:	d107      	bne.n	800282c <HAL_ADC_ConfigChannel+0x5c8>
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	0e9b      	lsrs	r3, r3, #26
 8002822:	3301      	adds	r3, #1
 8002824:	069b      	lsls	r3, r3, #26
 8002826:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800282a:	e015      	b.n	8002858 <HAL_ADC_ConfigChannel+0x5f4>
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002832:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002834:	fa93 f3a3 	rbit	r3, r3
 8002838:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800283a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800283c:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800283e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002840:	2b00      	cmp	r3, #0
 8002842:	d101      	bne.n	8002848 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8002844:	2320      	movs	r3, #32
 8002846:	e003      	b.n	8002850 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8002848:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800284a:	fab3 f383 	clz	r3, r3
 800284e:	b2db      	uxtb	r3, r3
 8002850:	3301      	adds	r3, #1
 8002852:	069b      	lsls	r3, r3, #26
 8002854:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002860:	2b00      	cmp	r3, #0
 8002862:	d109      	bne.n	8002878 <HAL_ADC_ConfigChannel+0x614>
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	0e9b      	lsrs	r3, r3, #26
 800286a:	3301      	adds	r3, #1
 800286c:	f003 031f 	and.w	r3, r3, #31
 8002870:	2101      	movs	r1, #1
 8002872:	fa01 f303 	lsl.w	r3, r1, r3
 8002876:	e017      	b.n	80028a8 <HAL_ADC_ConfigChannel+0x644>
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800287e:	6a3b      	ldr	r3, [r7, #32]
 8002880:	fa93 f3a3 	rbit	r3, r3
 8002884:	61fb      	str	r3, [r7, #28]
  return result;
 8002886:	69fb      	ldr	r3, [r7, #28]
 8002888:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800288a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800288c:	2b00      	cmp	r3, #0
 800288e:	d101      	bne.n	8002894 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8002890:	2320      	movs	r3, #32
 8002892:	e003      	b.n	800289c <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8002894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002896:	fab3 f383 	clz	r3, r3
 800289a:	b2db      	uxtb	r3, r3
 800289c:	3301      	adds	r3, #1
 800289e:	f003 031f 	and.w	r3, r3, #31
 80028a2:	2101      	movs	r1, #1
 80028a4:	fa01 f303 	lsl.w	r3, r1, r3
 80028a8:	ea42 0103 	orr.w	r1, r2, r3
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d10d      	bne.n	80028d4 <HAL_ADC_ConfigChannel+0x670>
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	0e9b      	lsrs	r3, r3, #26
 80028be:	3301      	adds	r3, #1
 80028c0:	f003 021f 	and.w	r2, r3, #31
 80028c4:	4613      	mov	r3, r2
 80028c6:	005b      	lsls	r3, r3, #1
 80028c8:	4413      	add	r3, r2
 80028ca:	3b1e      	subs	r3, #30
 80028cc:	051b      	lsls	r3, r3, #20
 80028ce:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80028d2:	e01b      	b.n	800290c <HAL_ADC_ConfigChannel+0x6a8>
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	fa93 f3a3 	rbit	r3, r3
 80028e0:	613b      	str	r3, [r7, #16]
  return result;
 80028e2:	693b      	ldr	r3, [r7, #16]
 80028e4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80028e6:	69bb      	ldr	r3, [r7, #24]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d101      	bne.n	80028f0 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 80028ec:	2320      	movs	r3, #32
 80028ee:	e003      	b.n	80028f8 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 80028f0:	69bb      	ldr	r3, [r7, #24]
 80028f2:	fab3 f383 	clz	r3, r3
 80028f6:	b2db      	uxtb	r3, r3
 80028f8:	3301      	adds	r3, #1
 80028fa:	f003 021f 	and.w	r2, r3, #31
 80028fe:	4613      	mov	r3, r2
 8002900:	005b      	lsls	r3, r3, #1
 8002902:	4413      	add	r3, r2
 8002904:	3b1e      	subs	r3, #30
 8002906:	051b      	lsls	r3, r3, #20
 8002908:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800290c:	430b      	orrs	r3, r1
 800290e:	683a      	ldr	r2, [r7, #0]
 8002910:	6892      	ldr	r2, [r2, #8]
 8002912:	4619      	mov	r1, r3
 8002914:	f7ff f9bf 	bl	8001c96 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	681a      	ldr	r2, [r3, #0]
 800291c:	4b09      	ldr	r3, [pc, #36]	; (8002944 <HAL_ADC_ConfigChannel+0x6e0>)
 800291e:	4013      	ands	r3, r2
 8002920:	2b00      	cmp	r3, #0
 8002922:	f000 80af 	beq.w	8002a84 <HAL_ADC_ConfigChannel+0x820>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800292e:	d004      	beq.n	800293a <HAL_ADC_ConfigChannel+0x6d6>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a04      	ldr	r2, [pc, #16]	; (8002948 <HAL_ADC_ConfigChannel+0x6e4>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d10a      	bne.n	8002950 <HAL_ADC_ConfigChannel+0x6ec>
 800293a:	4b04      	ldr	r3, [pc, #16]	; (800294c <HAL_ADC_ConfigChannel+0x6e8>)
 800293c:	e009      	b.n	8002952 <HAL_ADC_ConfigChannel+0x6ee>
 800293e:	bf00      	nop
 8002940:	407f0000 	.word	0x407f0000
 8002944:	80080000 	.word	0x80080000
 8002948:	50000100 	.word	0x50000100
 800294c:	50000300 	.word	0x50000300
 8002950:	4b51      	ldr	r3, [pc, #324]	; (8002a98 <HAL_ADC_ConfigChannel+0x834>)
 8002952:	4618      	mov	r0, r3
 8002954:	f7ff f8b4 	bl	8001ac0 <LL_ADC_GetCommonPathInternalCh>
 8002958:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a4e      	ldr	r2, [pc, #312]	; (8002a9c <HAL_ADC_ConfigChannel+0x838>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d004      	beq.n	8002970 <HAL_ADC_ConfigChannel+0x70c>
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4a4d      	ldr	r2, [pc, #308]	; (8002aa0 <HAL_ADC_ConfigChannel+0x83c>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d134      	bne.n	80029da <HAL_ADC_ConfigChannel+0x776>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002970:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002974:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002978:	2b00      	cmp	r3, #0
 800297a:	d12e      	bne.n	80029da <HAL_ADC_ConfigChannel+0x776>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002984:	d17e      	bne.n	8002a84 <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800298e:	d004      	beq.n	800299a <HAL_ADC_ConfigChannel+0x736>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a43      	ldr	r2, [pc, #268]	; (8002aa4 <HAL_ADC_ConfigChannel+0x840>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d101      	bne.n	800299e <HAL_ADC_ConfigChannel+0x73a>
 800299a:	4a43      	ldr	r2, [pc, #268]	; (8002aa8 <HAL_ADC_ConfigChannel+0x844>)
 800299c:	e000      	b.n	80029a0 <HAL_ADC_ConfigChannel+0x73c>
 800299e:	4a3e      	ldr	r2, [pc, #248]	; (8002a98 <HAL_ADC_ConfigChannel+0x834>)
 80029a0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80029a4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80029a8:	4619      	mov	r1, r3
 80029aa:	4610      	mov	r0, r2
 80029ac:	f7ff f875 	bl	8001a9a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80029b0:	4b3e      	ldr	r3, [pc, #248]	; (8002aac <HAL_ADC_ConfigChannel+0x848>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	099b      	lsrs	r3, r3, #6
 80029b6:	4a3e      	ldr	r2, [pc, #248]	; (8002ab0 <HAL_ADC_ConfigChannel+0x84c>)
 80029b8:	fba2 2303 	umull	r2, r3, r2, r3
 80029bc:	099b      	lsrs	r3, r3, #6
 80029be:	1c5a      	adds	r2, r3, #1
 80029c0:	4613      	mov	r3, r2
 80029c2:	005b      	lsls	r3, r3, #1
 80029c4:	4413      	add	r3, r2
 80029c6:	009b      	lsls	r3, r3, #2
 80029c8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80029ca:	e002      	b.n	80029d2 <HAL_ADC_ConfigChannel+0x76e>
          {
            wait_loop_index--;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	3b01      	subs	r3, #1
 80029d0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d1f9      	bne.n	80029cc <HAL_ADC_ConfigChannel+0x768>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80029d8:	e054      	b.n	8002a84 <HAL_ADC_ConfigChannel+0x820>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4a35      	ldr	r2, [pc, #212]	; (8002ab4 <HAL_ADC_ConfigChannel+0x850>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d120      	bne.n	8002a26 <HAL_ADC_ConfigChannel+0x7c2>
 80029e4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80029e8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d11a      	bne.n	8002a26 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80029f8:	d144      	bne.n	8002a84 <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002a02:	d004      	beq.n	8002a0e <HAL_ADC_ConfigChannel+0x7aa>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a26      	ldr	r2, [pc, #152]	; (8002aa4 <HAL_ADC_ConfigChannel+0x840>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d101      	bne.n	8002a12 <HAL_ADC_ConfigChannel+0x7ae>
 8002a0e:	4a26      	ldr	r2, [pc, #152]	; (8002aa8 <HAL_ADC_ConfigChannel+0x844>)
 8002a10:	e000      	b.n	8002a14 <HAL_ADC_ConfigChannel+0x7b0>
 8002a12:	4a21      	ldr	r2, [pc, #132]	; (8002a98 <HAL_ADC_ConfigChannel+0x834>)
 8002a14:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002a18:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a1c:	4619      	mov	r1, r3
 8002a1e:	4610      	mov	r0, r2
 8002a20:	f7ff f83b 	bl	8001a9a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002a24:	e02e      	b.n	8002a84 <HAL_ADC_ConfigChannel+0x820>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a23      	ldr	r2, [pc, #140]	; (8002ab8 <HAL_ADC_ConfigChannel+0x854>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d129      	bne.n	8002a84 <HAL_ADC_ConfigChannel+0x820>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002a30:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002a34:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d123      	bne.n	8002a84 <HAL_ADC_ConfigChannel+0x820>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a18      	ldr	r2, [pc, #96]	; (8002aa4 <HAL_ADC_ConfigChannel+0x840>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d01e      	beq.n	8002a84 <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002a4e:	d004      	beq.n	8002a5a <HAL_ADC_ConfigChannel+0x7f6>
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a13      	ldr	r2, [pc, #76]	; (8002aa4 <HAL_ADC_ConfigChannel+0x840>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d101      	bne.n	8002a5e <HAL_ADC_ConfigChannel+0x7fa>
 8002a5a:	4a13      	ldr	r2, [pc, #76]	; (8002aa8 <HAL_ADC_ConfigChannel+0x844>)
 8002a5c:	e000      	b.n	8002a60 <HAL_ADC_ConfigChannel+0x7fc>
 8002a5e:	4a0e      	ldr	r2, [pc, #56]	; (8002a98 <HAL_ADC_ConfigChannel+0x834>)
 8002a60:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002a64:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002a68:	4619      	mov	r1, r3
 8002a6a:	4610      	mov	r0, r2
 8002a6c:	f7ff f815 	bl	8001a9a <LL_ADC_SetCommonPathInternalCh>
 8002a70:	e008      	b.n	8002a84 <HAL_ADC_ConfigChannel+0x820>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a76:	f043 0220 	orr.w	r2, r3, #32
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2200      	movs	r2, #0
 8002a88:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002a8c:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002a90:	4618      	mov	r0, r3
 8002a92:	37d8      	adds	r7, #216	; 0xd8
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bd80      	pop	{r7, pc}
 8002a98:	50000700 	.word	0x50000700
 8002a9c:	c3210000 	.word	0xc3210000
 8002aa0:	90c00010 	.word	0x90c00010
 8002aa4:	50000100 	.word	0x50000100
 8002aa8:	50000300 	.word	0x50000300
 8002aac:	20000010 	.word	0x20000010
 8002ab0:	053e2d63 	.word	0x053e2d63
 8002ab4:	c7520000 	.word	0xc7520000
 8002ab8:	cb840000 	.word	0xcb840000

08002abc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b084      	sub	sp, #16
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4618      	mov	r0, r3
 8002aca:	f7ff f9ad 	bl	8001e28 <LL_ADC_IsEnabled>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d14d      	bne.n	8002b70 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	689a      	ldr	r2, [r3, #8]
 8002ada:	4b28      	ldr	r3, [pc, #160]	; (8002b7c <ADC_Enable+0xc0>)
 8002adc:	4013      	ands	r3, r2
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d00d      	beq.n	8002afe <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ae6:	f043 0210 	orr.w	r2, r3, #16
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002af2:	f043 0201 	orr.w	r2, r3, #1
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8002afa:	2301      	movs	r3, #1
 8002afc:	e039      	b.n	8002b72 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4618      	mov	r0, r3
 8002b04:	f7ff f968 	bl	8001dd8 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002b08:	f7fe ff86 	bl	8001a18 <HAL_GetTick>
 8002b0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002b0e:	e028      	b.n	8002b62 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4618      	mov	r0, r3
 8002b16:	f7ff f987 	bl	8001e28 <LL_ADC_IsEnabled>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d104      	bne.n	8002b2a <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4618      	mov	r0, r3
 8002b26:	f7ff f957 	bl	8001dd8 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002b2a:	f7fe ff75 	bl	8001a18 <HAL_GetTick>
 8002b2e:	4602      	mov	r2, r0
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	1ad3      	subs	r3, r2, r3
 8002b34:	2b02      	cmp	r3, #2
 8002b36:	d914      	bls.n	8002b62 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f003 0301 	and.w	r3, r3, #1
 8002b42:	2b01      	cmp	r3, #1
 8002b44:	d00d      	beq.n	8002b62 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b4a:	f043 0210 	orr.w	r2, r3, #16
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b56:	f043 0201 	orr.w	r2, r3, #1
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e007      	b.n	8002b72 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f003 0301 	and.w	r3, r3, #1
 8002b6c:	2b01      	cmp	r3, #1
 8002b6e:	d1cf      	bne.n	8002b10 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002b70:	2300      	movs	r3, #0
}
 8002b72:	4618      	mov	r0, r3
 8002b74:	3710      	adds	r7, #16
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}
 8002b7a:	bf00      	nop
 8002b7c:	8000003f 	.word	0x8000003f

08002b80 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b084      	sub	sp, #16
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	f7ff f95e 	bl	8001e4e <LL_ADC_IsDisableOngoing>
 8002b92:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4618      	mov	r0, r3
 8002b9a:	f7ff f945 	bl	8001e28 <LL_ADC_IsEnabled>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d047      	beq.n	8002c34 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d144      	bne.n	8002c34 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	689b      	ldr	r3, [r3, #8]
 8002bb0:	f003 030d 	and.w	r3, r3, #13
 8002bb4:	2b01      	cmp	r3, #1
 8002bb6:	d10c      	bne.n	8002bd2 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	f7ff f91f 	bl	8001e00 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	2203      	movs	r2, #3
 8002bc8:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002bca:	f7fe ff25 	bl	8001a18 <HAL_GetTick>
 8002bce:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002bd0:	e029      	b.n	8002c26 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bd6:	f043 0210 	orr.w	r2, r3, #16
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002be2:	f043 0201 	orr.w	r2, r3, #1
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
 8002bec:	e023      	b.n	8002c36 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002bee:	f7fe ff13 	bl	8001a18 <HAL_GetTick>
 8002bf2:	4602      	mov	r2, r0
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	1ad3      	subs	r3, r2, r3
 8002bf8:	2b02      	cmp	r3, #2
 8002bfa:	d914      	bls.n	8002c26 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	689b      	ldr	r3, [r3, #8]
 8002c02:	f003 0301 	and.w	r3, r3, #1
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d00d      	beq.n	8002c26 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c0e:	f043 0210 	orr.w	r2, r3, #16
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c1a:	f043 0201 	orr.w	r2, r3, #1
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	e007      	b.n	8002c36 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	689b      	ldr	r3, [r3, #8]
 8002c2c:	f003 0301 	and.w	r3, r3, #1
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d1dc      	bne.n	8002bee <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002c34:	2300      	movs	r3, #0
}
 8002c36:	4618      	mov	r0, r3
 8002c38:	3710      	adds	r7, #16
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}

08002c3e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002c3e:	b580      	push	{r7, lr}
 8002c40:	b084      	sub	sp, #16
 8002c42:	af00      	add	r7, sp, #0
 8002c44:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c4a:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c50:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d14b      	bne.n	8002cf0 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c5c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f003 0308 	and.w	r3, r3, #8
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d021      	beq.n	8002cb6 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4618      	mov	r0, r3
 8002c78:	f7fe ffce 	bl	8001c18 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d032      	beq.n	8002ce8 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	68db      	ldr	r3, [r3, #12]
 8002c88:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d12b      	bne.n	8002ce8 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c94:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ca0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d11f      	bne.n	8002ce8 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cac:	f043 0201 	orr.w	r2, r3, #1
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	65da      	str	r2, [r3, #92]	; 0x5c
 8002cb4:	e018      	b.n	8002ce8 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	68db      	ldr	r3, [r3, #12]
 8002cbc:	f003 0302 	and.w	r3, r3, #2
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d111      	bne.n	8002ce8 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cc8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cd4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d105      	bne.n	8002ce8 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ce0:	f043 0201 	orr.w	r2, r3, #1
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002ce8:	68f8      	ldr	r0, [r7, #12]
 8002cea:	f7ff fa9d 	bl	8002228 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002cee:	e00e      	b.n	8002d0e <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cf4:	f003 0310 	and.w	r3, r3, #16
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d003      	beq.n	8002d04 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002cfc:	68f8      	ldr	r0, [r7, #12]
 8002cfe:	f7ff faa7 	bl	8002250 <HAL_ADC_ErrorCallback>
}
 8002d02:	e004      	b.n	8002d0e <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d0a:	6878      	ldr	r0, [r7, #4]
 8002d0c:	4798      	blx	r3
}
 8002d0e:	bf00      	nop
 8002d10:	3710      	adds	r7, #16
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bd80      	pop	{r7, pc}

08002d16 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002d16:	b580      	push	{r7, lr}
 8002d18:	b084      	sub	sp, #16
 8002d1a:	af00      	add	r7, sp, #0
 8002d1c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d22:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002d24:	68f8      	ldr	r0, [r7, #12]
 8002d26:	f7ff fa89 	bl	800223c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002d2a:	bf00      	nop
 8002d2c:	3710      	adds	r7, #16
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}

08002d32 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002d32:	b580      	push	{r7, lr}
 8002d34:	b084      	sub	sp, #16
 8002d36:	af00      	add	r7, sp, #0
 8002d38:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d3e:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d44:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d50:	f043 0204 	orr.w	r2, r3, #4
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002d58:	68f8      	ldr	r0, [r7, #12]
 8002d5a:	f7ff fa79 	bl	8002250 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002d5e:	bf00      	nop
 8002d60:	3710      	adds	r7, #16
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}

08002d66 <LL_ADC_SetCommonPathInternalCh>:
{
 8002d66:	b480      	push	{r7}
 8002d68:	b083      	sub	sp, #12
 8002d6a:	af00      	add	r7, sp, #0
 8002d6c:	6078      	str	r0, [r7, #4]
 8002d6e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	689b      	ldr	r3, [r3, #8]
 8002d74:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	431a      	orrs	r2, r3
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	609a      	str	r2, [r3, #8]
}
 8002d80:	bf00      	nop
 8002d82:	370c      	adds	r7, #12
 8002d84:	46bd      	mov	sp, r7
 8002d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8a:	4770      	bx	lr

08002d8c <LL_ADC_GetCommonPathInternalCh>:
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	b083      	sub	sp, #12
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	689b      	ldr	r3, [r3, #8]
 8002d98:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	370c      	adds	r7, #12
 8002da0:	46bd      	mov	sp, r7
 8002da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da6:	4770      	bx	lr

08002da8 <LL_ADC_SetOffset>:
{
 8002da8:	b480      	push	{r7}
 8002daa:	b087      	sub	sp, #28
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	60f8      	str	r0, [r7, #12]
 8002db0:	60b9      	str	r1, [r7, #8]
 8002db2:	607a      	str	r2, [r7, #4]
 8002db4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	3360      	adds	r3, #96	; 0x60
 8002dba:	461a      	mov	r2, r3
 8002dbc:	68bb      	ldr	r3, [r7, #8]
 8002dbe:	009b      	lsls	r3, r3, #2
 8002dc0:	4413      	add	r3, r2
 8002dc2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8002dc4:	697b      	ldr	r3, [r7, #20]
 8002dc6:	681a      	ldr	r2, [r3, #0]
 8002dc8:	4b08      	ldr	r3, [pc, #32]	; (8002dec <LL_ADC_SetOffset+0x44>)
 8002dca:	4013      	ands	r3, r2
 8002dcc:	687a      	ldr	r2, [r7, #4]
 8002dce:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002dd2:	683a      	ldr	r2, [r7, #0]
 8002dd4:	430a      	orrs	r2, r1
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	601a      	str	r2, [r3, #0]
}
 8002de0:	bf00      	nop
 8002de2:	371c      	adds	r7, #28
 8002de4:	46bd      	mov	sp, r7
 8002de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dea:	4770      	bx	lr
 8002dec:	03fff000 	.word	0x03fff000

08002df0 <LL_ADC_GetOffsetChannel>:
{
 8002df0:	b480      	push	{r7}
 8002df2:	b085      	sub	sp, #20
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
 8002df8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	3360      	adds	r3, #96	; 0x60
 8002dfe:	461a      	mov	r2, r3
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	009b      	lsls	r3, r3, #2
 8002e04:	4413      	add	r3, r2
 8002e06:	60fb      	str	r3, [r7, #12]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002e10:	4618      	mov	r0, r3
 8002e12:	3714      	adds	r7, #20
 8002e14:	46bd      	mov	sp, r7
 8002e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1a:	4770      	bx	lr

08002e1c <LL_ADC_SetOffsetState>:
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b087      	sub	sp, #28
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	60f8      	str	r0, [r7, #12]
 8002e24:	60b9      	str	r1, [r7, #8]
 8002e26:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	3360      	adds	r3, #96	; 0x60
 8002e2c:	461a      	mov	r2, r3
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	009b      	lsls	r3, r3, #2
 8002e32:	4413      	add	r3, r2
 8002e34:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8002e36:	697b      	ldr	r3, [r7, #20]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	431a      	orrs	r2, r3
 8002e42:	697b      	ldr	r3, [r7, #20]
 8002e44:	601a      	str	r2, [r3, #0]
}
 8002e46:	bf00      	nop
 8002e48:	371c      	adds	r7, #28
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e50:	4770      	bx	lr

08002e52 <LL_ADC_SetOffsetSign>:
{
 8002e52:	b480      	push	{r7}
 8002e54:	b087      	sub	sp, #28
 8002e56:	af00      	add	r7, sp, #0
 8002e58:	60f8      	str	r0, [r7, #12]
 8002e5a:	60b9      	str	r1, [r7, #8]
 8002e5c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	3360      	adds	r3, #96	; 0x60
 8002e62:	461a      	mov	r2, r3
 8002e64:	68bb      	ldr	r3, [r7, #8]
 8002e66:	009b      	lsls	r3, r3, #2
 8002e68:	4413      	add	r3, r2
 8002e6a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8002e6c:	697b      	ldr	r3, [r7, #20]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	431a      	orrs	r2, r3
 8002e78:	697b      	ldr	r3, [r7, #20]
 8002e7a:	601a      	str	r2, [r3, #0]
}
 8002e7c:	bf00      	nop
 8002e7e:	371c      	adds	r7, #28
 8002e80:	46bd      	mov	sp, r7
 8002e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e86:	4770      	bx	lr

08002e88 <LL_ADC_SetOffsetSaturation>:
{
 8002e88:	b480      	push	{r7}
 8002e8a:	b087      	sub	sp, #28
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	60f8      	str	r0, [r7, #12]
 8002e90:	60b9      	str	r1, [r7, #8]
 8002e92:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	3360      	adds	r3, #96	; 0x60
 8002e98:	461a      	mov	r2, r3
 8002e9a:	68bb      	ldr	r3, [r7, #8]
 8002e9c:	009b      	lsls	r3, r3, #2
 8002e9e:	4413      	add	r3, r2
 8002ea0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8002ea2:	697b      	ldr	r3, [r7, #20]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	431a      	orrs	r2, r3
 8002eae:	697b      	ldr	r3, [r7, #20]
 8002eb0:	601a      	str	r2, [r3, #0]
}
 8002eb2:	bf00      	nop
 8002eb4:	371c      	adds	r7, #28
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebc:	4770      	bx	lr

08002ebe <LL_ADC_SetSamplingTimeCommonConfig>:
{
 8002ebe:	b480      	push	{r7}
 8002ec0:	b083      	sub	sp, #12
 8002ec2:	af00      	add	r7, sp, #0
 8002ec4:	6078      	str	r0, [r7, #4]
 8002ec6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	695b      	ldr	r3, [r3, #20]
 8002ecc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	431a      	orrs	r2, r3
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	615a      	str	r2, [r3, #20]
}
 8002ed8:	bf00      	nop
 8002eda:	370c      	adds	r7, #12
 8002edc:	46bd      	mov	sp, r7
 8002ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee2:	4770      	bx	lr

08002ee4 <LL_ADC_SetChannelSamplingTime>:
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	b087      	sub	sp, #28
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	60f8      	str	r0, [r7, #12]
 8002eec:	60b9      	str	r1, [r7, #8]
 8002eee:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	3314      	adds	r3, #20
 8002ef4:	461a      	mov	r2, r3
 8002ef6:	68bb      	ldr	r3, [r7, #8]
 8002ef8:	0e5b      	lsrs	r3, r3, #25
 8002efa:	009b      	lsls	r3, r3, #2
 8002efc:	f003 0304 	and.w	r3, r3, #4
 8002f00:	4413      	add	r3, r2
 8002f02:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8002f04:	697b      	ldr	r3, [r7, #20]
 8002f06:	681a      	ldr	r2, [r3, #0]
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	0d1b      	lsrs	r3, r3, #20
 8002f0c:	f003 031f 	and.w	r3, r3, #31
 8002f10:	2107      	movs	r1, #7
 8002f12:	fa01 f303 	lsl.w	r3, r1, r3
 8002f16:	43db      	mvns	r3, r3
 8002f18:	401a      	ands	r2, r3
 8002f1a:	68bb      	ldr	r3, [r7, #8]
 8002f1c:	0d1b      	lsrs	r3, r3, #20
 8002f1e:	f003 031f 	and.w	r3, r3, #31
 8002f22:	6879      	ldr	r1, [r7, #4]
 8002f24:	fa01 f303 	lsl.w	r3, r1, r3
 8002f28:	431a      	orrs	r2, r3
 8002f2a:	697b      	ldr	r3, [r7, #20]
 8002f2c:	601a      	str	r2, [r3, #0]
}
 8002f2e:	bf00      	nop
 8002f30:	371c      	adds	r7, #28
 8002f32:	46bd      	mov	sp, r7
 8002f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f38:	4770      	bx	lr
	...

08002f3c <LL_ADC_SetChannelSingleDiff>:
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	b085      	sub	sp, #20
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	60f8      	str	r0, [r7, #12]
 8002f44:	60b9      	str	r1, [r7, #8]
 8002f46:	607a      	str	r2, [r7, #4]
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	4a0f      	ldr	r2, [pc, #60]	; (8002f88 <LL_ADC_SetChannelSingleDiff+0x4c>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d10a      	bne.n	8002f66 <LL_ADC_SetChannelSingleDiff+0x2a>
    SET_BIT(ADCx->DIFSEL,
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002f56:	68bb      	ldr	r3, [r7, #8]
 8002f58:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f5c:	431a      	orrs	r2, r3
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8002f64:	e00a      	b.n	8002f7c <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002f6c:	68bb      	ldr	r3, [r7, #8]
 8002f6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f72:	43db      	mvns	r3, r3
 8002f74:	401a      	ands	r2, r3
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8002f7c:	bf00      	nop
 8002f7e:	3714      	adds	r7, #20
 8002f80:	46bd      	mov	sp, r7
 8002f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f86:	4770      	bx	lr
 8002f88:	407f0000 	.word	0x407f0000

08002f8c <LL_ADC_IsEnabled>:
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b083      	sub	sp, #12
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	689b      	ldr	r3, [r3, #8]
 8002f98:	f003 0301 	and.w	r3, r3, #1
 8002f9c:	2b01      	cmp	r3, #1
 8002f9e:	d101      	bne.n	8002fa4 <LL_ADC_IsEnabled+0x18>
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	e000      	b.n	8002fa6 <LL_ADC_IsEnabled+0x1a>
 8002fa4:	2300      	movs	r3, #0
}
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	370c      	adds	r7, #12
 8002faa:	46bd      	mov	sp, r7
 8002fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb0:	4770      	bx	lr

08002fb2 <LL_ADC_StartCalibration>:
{
 8002fb2:	b480      	push	{r7}
 8002fb4:	b083      	sub	sp, #12
 8002fb6:	af00      	add	r7, sp, #0
 8002fb8:	6078      	str	r0, [r7, #4]
 8002fba:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	689b      	ldr	r3, [r3, #8]
 8002fc0:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8002fc4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002fc8:	683a      	ldr	r2, [r7, #0]
 8002fca:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	609a      	str	r2, [r3, #8]
}
 8002fd8:	bf00      	nop
 8002fda:	370c      	adds	r7, #12
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe2:	4770      	bx	lr

08002fe4 <LL_ADC_IsCalibrationOnGoing>:
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b083      	sub	sp, #12
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	689b      	ldr	r3, [r3, #8]
 8002ff0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002ff4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002ff8:	d101      	bne.n	8002ffe <LL_ADC_IsCalibrationOnGoing+0x1a>
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	e000      	b.n	8003000 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8002ffe:	2300      	movs	r3, #0
}
 8003000:	4618      	mov	r0, r3
 8003002:	370c      	adds	r7, #12
 8003004:	46bd      	mov	sp, r7
 8003006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300a:	4770      	bx	lr

0800300c <LL_ADC_REG_StartConversion>:
{
 800300c:	b480      	push	{r7}
 800300e:	b083      	sub	sp, #12
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	689b      	ldr	r3, [r3, #8]
 8003018:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800301c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003020:	f043 0204 	orr.w	r2, r3, #4
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	609a      	str	r2, [r3, #8]
}
 8003028:	bf00      	nop
 800302a:	370c      	adds	r7, #12
 800302c:	46bd      	mov	sp, r7
 800302e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003032:	4770      	bx	lr

08003034 <LL_ADC_REG_IsConversionOngoing>:
{
 8003034:	b480      	push	{r7}
 8003036:	b083      	sub	sp, #12
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	689b      	ldr	r3, [r3, #8]
 8003040:	f003 0304 	and.w	r3, r3, #4
 8003044:	2b04      	cmp	r3, #4
 8003046:	d101      	bne.n	800304c <LL_ADC_REG_IsConversionOngoing+0x18>
 8003048:	2301      	movs	r3, #1
 800304a:	e000      	b.n	800304e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800304c:	2300      	movs	r3, #0
}
 800304e:	4618      	mov	r0, r3
 8003050:	370c      	adds	r7, #12
 8003052:	46bd      	mov	sp, r7
 8003054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003058:	4770      	bx	lr

0800305a <LL_ADC_INJ_IsConversionOngoing>:
{
 800305a:	b480      	push	{r7}
 800305c:	b083      	sub	sp, #12
 800305e:	af00      	add	r7, sp, #0
 8003060:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	689b      	ldr	r3, [r3, #8]
 8003066:	f003 0308 	and.w	r3, r3, #8
 800306a:	2b08      	cmp	r3, #8
 800306c:	d101      	bne.n	8003072 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800306e:	2301      	movs	r3, #1
 8003070:	e000      	b.n	8003074 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003072:	2300      	movs	r3, #0
}
 8003074:	4618      	mov	r0, r3
 8003076:	370c      	adds	r7, #12
 8003078:	46bd      	mov	sp, r7
 800307a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307e:	4770      	bx	lr

08003080 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b084      	sub	sp, #16
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
 8003088:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800308a:	2300      	movs	r3, #0
 800308c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003094:	2b01      	cmp	r3, #1
 8003096:	d101      	bne.n	800309c <HAL_ADCEx_Calibration_Start+0x1c>
 8003098:	2302      	movs	r3, #2
 800309a:	e04d      	b.n	8003138 <HAL_ADCEx_Calibration_Start+0xb8>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2201      	movs	r2, #1
 80030a0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80030a4:	6878      	ldr	r0, [r7, #4]
 80030a6:	f7ff fd6b 	bl	8002b80 <ADC_Disable>
 80030aa:	4603      	mov	r3, r0
 80030ac:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80030ae:	7bfb      	ldrb	r3, [r7, #15]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d136      	bne.n	8003122 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030b8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80030bc:	f023 0302 	bic.w	r3, r3, #2
 80030c0:	f043 0202 	orr.w	r2, r3, #2
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	6839      	ldr	r1, [r7, #0]
 80030ce:	4618      	mov	r0, r3
 80030d0:	f7ff ff6f 	bl	8002fb2 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80030d4:	e014      	b.n	8003100 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80030d6:	68bb      	ldr	r3, [r7, #8]
 80030d8:	3301      	adds	r3, #1
 80030da:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80030dc:	68bb      	ldr	r3, [r7, #8]
 80030de:	4a18      	ldr	r2, [pc, #96]	; (8003140 <HAL_ADCEx_Calibration_Start+0xc0>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d90d      	bls.n	8003100 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030e8:	f023 0312 	bic.w	r3, r3, #18
 80030ec:	f043 0210 	orr.w	r2, r3, #16
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2200      	movs	r2, #0
 80030f8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 80030fc:	2301      	movs	r3, #1
 80030fe:	e01b      	b.n	8003138 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4618      	mov	r0, r3
 8003106:	f7ff ff6d 	bl	8002fe4 <LL_ADC_IsCalibrationOnGoing>
 800310a:	4603      	mov	r3, r0
 800310c:	2b00      	cmp	r3, #0
 800310e:	d1e2      	bne.n	80030d6 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003114:	f023 0303 	bic.w	r3, r3, #3
 8003118:	f043 0201 	orr.w	r2, r3, #1
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	65da      	str	r2, [r3, #92]	; 0x5c
 8003120:	e005      	b.n	800312e <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003126:	f043 0210 	orr.w	r2, r3, #16
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2200      	movs	r2, #0
 8003132:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003136:	7bfb      	ldrb	r3, [r7, #15]
}
 8003138:	4618      	mov	r0, r3
 800313a:	3710      	adds	r7, #16
 800313c:	46bd      	mov	sp, r7
 800313e:	bd80      	pop	{r7, pc}
 8003140:	0004de01 	.word	0x0004de01

08003144 <HAL_ADCEx_MultiModeStart_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Length of data to be transferred from ADC peripheral to memory (in bytes).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeStart_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b0a2      	sub	sp, #136	; 0x88
 8003148:	af00      	add	r7, sp, #0
 800314a:	60f8      	str	r0, [r7, #12]
 800314c:	60b9      	str	r1, [r7, #8]
 800314e:	607a      	str	r2, [r7, #4]
  assert_param(IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));

  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4618      	mov	r0, r3
 8003156:	f7ff ff6d 	bl	8003034 <LL_ADC_REG_IsConversionOngoing>
 800315a:	4603      	mov	r3, r0
 800315c:	2b00      	cmp	r3, #0
 800315e:	d001      	beq.n	8003164 <HAL_ADCEx_MultiModeStart_DMA+0x20>
  {
    return HAL_BUSY;
 8003160:	2302      	movs	r3, #2
 8003162:	e08e      	b.n	8003282 <HAL_ADCEx_MultiModeStart_DMA+0x13e>
  }
  else
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800316a:	2b01      	cmp	r3, #1
 800316c:	d101      	bne.n	8003172 <HAL_ADCEx_MultiModeStart_DMA+0x2e>
 800316e:	2302      	movs	r3, #2
 8003170:	e087      	b.n	8003282 <HAL_ADCEx_MultiModeStart_DMA+0x13e>
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	2201      	movs	r2, #1
 8003176:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Temporary handle minimum initialization */
    __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 800317a:	2300      	movs	r3, #0
 800317c:	673b      	str	r3, [r7, #112]	; 0x70
    ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 800317e:	2300      	movs	r3, #0
 8003180:	677b      	str	r3, [r7, #116]	; 0x74

    /* Set a temporary handle of the ADC slave associated to the ADC master   */
    ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800318a:	d102      	bne.n	8003192 <HAL_ADCEx_MultiModeStart_DMA+0x4e>
 800318c:	4b3f      	ldr	r3, [pc, #252]	; (800328c <HAL_ADCEx_MultiModeStart_DMA+0x148>)
 800318e:	617b      	str	r3, [r7, #20]
 8003190:	e001      	b.n	8003196 <HAL_ADCEx_MultiModeStart_DMA+0x52>
 8003192:	2300      	movs	r3, #0
 8003194:	617b      	str	r3, [r7, #20]

    if (tmphadcSlave.Instance == NULL)
 8003196:	697b      	ldr	r3, [r7, #20]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d10b      	bne.n	80031b4 <HAL_ADCEx_MultiModeStart_DMA+0x70>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031a0:	f043 0220 	orr.w	r2, r3, #32
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	2200      	movs	r2, #0
 80031ac:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80031b0:	2301      	movs	r3, #1
 80031b2:	e066      	b.n	8003282 <HAL_ADCEx_MultiModeStart_DMA+0x13e>
    }

    /* Enable the ADC peripherals: master and slave (in case if not already   */
    /* enabled previously)                                                    */
    tmp_hal_status = ADC_Enable(hadc);
 80031b4:	68f8      	ldr	r0, [r7, #12]
 80031b6:	f7ff fc81 	bl	8002abc <ADC_Enable>
 80031ba:	4603      	mov	r3, r0
 80031bc:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    if (tmp_hal_status == HAL_OK)
 80031c0:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d107      	bne.n	80031d8 <HAL_ADCEx_MultiModeStart_DMA+0x94>
    {
      tmp_hal_status = ADC_Enable(&tmphadcSlave);
 80031c8:	f107 0314 	add.w	r3, r7, #20
 80031cc:	4618      	mov	r0, r3
 80031ce:	f7ff fc75 	bl	8002abc <ADC_Enable>
 80031d2:	4603      	mov	r3, r0
 80031d4:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    }

    /* Start multimode conversion of ADCs pair */
    if (tmp_hal_status == HAL_OK)
 80031d8:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d14a      	bne.n	8003276 <HAL_ADCEx_MultiModeStart_DMA+0x132>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031e4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80031e8:	f023 0301 	bic.w	r3, r3, #1
 80031ec:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	65da      	str	r2, [r3, #92]	; 0x5c
                        (HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP),
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	2200      	movs	r2, #0
 80031f8:	661a      	str	r2, [r3, #96]	; 0x60

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031fe:	4a24      	ldr	r2, [pc, #144]	; (8003290 <HAL_ADCEx_MultiModeStart_DMA+0x14c>)
 8003200:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003206:	4a23      	ldr	r2, [pc, #140]	; (8003294 <HAL_ADCEx_MultiModeStart_DMA+0x150>)
 8003208:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError ;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800320e:	4a22      	ldr	r2, [pc, #136]	; (8003298 <HAL_ADCEx_MultiModeStart_DMA+0x154>)
 8003210:	635a      	str	r2, [r3, #52]	; 0x34

      /* Pointer to the common control register  */
      tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800321a:	d004      	beq.n	8003226 <HAL_ADCEx_MultiModeStart_DMA+0xe2>
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a1a      	ldr	r2, [pc, #104]	; (800328c <HAL_ADCEx_MultiModeStart_DMA+0x148>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d101      	bne.n	800322a <HAL_ADCEx_MultiModeStart_DMA+0xe6>
 8003226:	4b1d      	ldr	r3, [pc, #116]	; (800329c <HAL_ADCEx_MultiModeStart_DMA+0x158>)
 8003228:	e000      	b.n	800322c <HAL_ADCEx_MultiModeStart_DMA+0xe8>
 800322a:	4b1d      	ldr	r3, [pc, #116]	; (80032a0 <HAL_ADCEx_MultiModeStart_DMA+0x15c>)
 800322c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
      /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
      /* start (in case of SW start):                                           */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	221c      	movs	r2, #28
 8003236:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	2200      	movs	r2, #0
 800323c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	685a      	ldr	r2, [r3, #4]
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f042 0210 	orr.w	r2, r2, #16
 800324e:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&tmpADC_Common->CDR, (uint32_t)pData, Length);
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8003254:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003258:	330c      	adds	r3, #12
 800325a:	4619      	mov	r1, r3
 800325c:	68ba      	ldr	r2, [r7, #8]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	f001 fb70 	bl	8004944 <HAL_DMA_Start_IT>
 8003264:	4603      	mov	r3, r0
 8003266:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
      /* Enable conversion of regular group.                                    */
      /* If software start has been selected, conversion starts immediately.    */
      /* If external trigger has been selected, conversion will start at next   */
      /* trigger event.                                                         */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4618      	mov	r0, r3
 8003270:	f7ff fecc 	bl	800300c <LL_ADC_REG_StartConversion>
 8003274:	e003      	b.n	800327e <HAL_ADCEx_MultiModeStart_DMA+0x13a>
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	2200      	movs	r2, #0
 800327a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return tmp_hal_status;
 800327e:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
  }
}
 8003282:	4618      	mov	r0, r3
 8003284:	3788      	adds	r7, #136	; 0x88
 8003286:	46bd      	mov	sp, r7
 8003288:	bd80      	pop	{r7, pc}
 800328a:	bf00      	nop
 800328c:	50000100 	.word	0x50000100
 8003290:	08002c3f 	.word	0x08002c3f
 8003294:	08002d17 	.word	0x08002d17
 8003298:	08002d33 	.word	0x08002d33
 800329c:	50000300 	.word	0x50000300
 80032a0:	50000700 	.word	0x50000700

080032a4 <HAL_ADCEx_InjectedConfigChannel>:
  * @param sConfigInjected Structure of ADC injected group and ADC channel for
  *         injected group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef *hadc, ADC_InjectionConfTypeDef *sConfigInjected)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b0b6      	sub	sp, #216	; 0xd8
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
 80032ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80032ae:	2300      	movs	r3, #0
 80032b0:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0;
 80032b4:	2300      	movs	r3, #0
 80032b6:	60bb      	str	r3, [r7, #8]

  uint32_t tmp_JSQR_ContextQueueBeingBuilt = 0U;
 80032b8:	2300      	movs	r3, #0
 80032ba:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfigInjected->InjectedChannel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80032c4:	2b01      	cmp	r3, #1
 80032c6:	d102      	bne.n	80032ce <HAL_ADCEx_InjectedConfigChannel+0x2a>
 80032c8:	2302      	movs	r3, #2
 80032ca:	f000 bcef 	b.w	8003cac <HAL_ADCEx_InjectedConfigChannel+0xa08>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2201      	movs	r2, #1
 80032d2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /*      injected channel rank. It is entered into queue only when all       */
  /*      injected ranks have been set.                                       */
  /*   Note: Scan mode is not present by hardware on this device, but used    */
  /*   by software for alignment over all STM32 devices.                      */

  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	695b      	ldr	r3, [r3, #20]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d003      	beq.n	80032e6 <HAL_ADCEx_InjectedConfigChannel+0x42>
      (sConfigInjected->InjectedNbrOfConversion == 1U))
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	6a1b      	ldr	r3, [r3, #32]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 80032e2:	2b01      	cmp	r3, #1
 80032e4:	d130      	bne.n	8003348 <HAL_ADCEx_InjectedConfigChannel+0xa4>
    /*    (scan mode disabled, only rank 1 used)                              */
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - channel set to rank 1 (scan mode disabled, only rank 1 can be used) */

    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	2b09      	cmp	r3, #9
 80032ec:	d179      	bne.n	80033e2 <HAL_ADCEx_InjectedConfigChannel+0x13e>
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d010      	beq.n	8003318 <HAL_ADCEx_InjectedConfigChannel+0x74>
      {
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	0e9b      	lsrs	r3, r3, #26
 80032fc:	025b      	lsls	r3, r3, #9
 80032fe:	f403 5278 	and.w	r2, r3, #15872	; 0x3e00
                                           | (sConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003306:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 800330a:	431a      	orrs	r2, r3
                                           | sConfigInjected->ExternalTrigInjecConvEdge
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8003310:	4313      	orrs	r3, r2
 8003312:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003316:	e007      	b.n	8003328 <HAL_ADCEx_InjectedConfigChannel+0x84>
                                          );
      }
      else
      {
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1));
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	0e9b      	lsrs	r3, r3, #26
 800331e:	025b      	lsls	r3, r3, #9
 8003320:	f403 5378 	and.w	r3, r3, #15872	; 0x3e00
 8003324:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
      }

      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, tmp_JSQR_ContextQueueBeingBuilt);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800332e:	4b84      	ldr	r3, [pc, #528]	; (8003540 <HAL_ADCEx_InjectedConfigChannel+0x29c>)
 8003330:	4013      	ands	r3, r2
 8003332:	687a      	ldr	r2, [r7, #4]
 8003334:	6812      	ldr	r2, [r2, #0]
 8003336:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 800333a:	430b      	orrs	r3, r1
 800333c:	64d3      	str	r3, [r2, #76]	; 0x4c
      /* For debug and informative reasons, hadc handle saves JSQR setting */
      hadc->InjectionConfig.ContextQueue = tmp_JSQR_ContextQueueBeingBuilt;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003344:	665a      	str	r2, [r3, #100]	; 0x64
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8003346:	e04c      	b.n	80033e2 <HAL_ADCEx_InjectedConfigChannel+0x13e>
    /* 1. Start new context and set parameters related to all injected        */
    /*    channels: injected sequence length and trigger.                     */

    /* if hadc->InjectionConfig.ChannelCount is equal to 0, this is the first */
    /*   call of the context under setting                                    */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800334c:	2b00      	cmp	r3, #0
 800334e:	d11d      	bne.n	800338c <HAL_ADCEx_InjectedConfigChannel+0xe8>
    {
      /* Initialize number of channels that will be configured on the context */
      /*  being built                                                         */
      hadc->InjectionConfig.ChannelCount = sConfigInjected->InjectedNbrOfConversion;
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	6a1a      	ldr	r2, [r3, #32]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	669a      	str	r2, [r3, #104]	; 0x68
      /* Handle hadc saves the context under build up over each HAL_ADCEx_InjectedConfigChannel()
         call, this context will be written in JSQR register at the last call.
         At this point, the context is merely reset  */
      hadc->InjectionConfig.ContextQueue = 0x00000000U;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2200      	movs	r2, #0
 800335c:	665a      	str	r2, [r3, #100]	; 0x64
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003362:	2b00      	cmp	r3, #0
 8003364:	d00d      	beq.n	8003382 <HAL_ADCEx_InjectedConfigChannel+0xde>
      {
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U)
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	6a1b      	ldr	r3, [r3, #32]
 800336a:	1e5a      	subs	r2, r3, #1
                                           | (sConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003370:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 8003374:	431a      	orrs	r2, r3
                                           | sConfigInjected->ExternalTrigInjecConvEdge
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U)
 800337a:	4313      	orrs	r3, r2
 800337c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003380:	e004      	b.n	800338c <HAL_ADCEx_InjectedConfigChannel+0xe8>
                                          );
      }
      else
      {
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U));
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	6a1b      	ldr	r3, [r3, #32]
 8003386:	3b01      	subs	r3, #1
 8003388:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /*    related to each channel: channel rank sequence                    */
    /* Clear the old JSQx bits for the selected rank */
    tmp_JSQR_ContextQueueBeingBuilt &= ~ADC_JSQR_RK(ADC_SQR3_SQ10, sConfigInjected->InjectedRank);

    /* Set the JSQx bits for the selected rank */
    tmp_JSQR_ContextQueueBeingBuilt |= ADC_JSQR_RK(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank);
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	0e9b      	lsrs	r3, r3, #26
 8003392:	f003 021f 	and.w	r2, r3, #31
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	f003 031f 	and.w	r3, r3, #31
 800339e:	fa02 f303 	lsl.w	r3, r2, r3
 80033a2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80033a6:	4313      	orrs	r3, r2
 80033a8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0

    /* Decrease channel count  */
    hadc->InjectionConfig.ChannelCount--;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80033b0:	1e5a      	subs	r2, r3, #1
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	669a      	str	r2, [r3, #104]	; 0x68

    /* 3. tmp_JSQR_ContextQueueBeingBuilt is fully built for this HAL_ADCEx_InjectedConfigChannel()
          call, aggregate the setting to those already built during the previous
          HAL_ADCEx_InjectedConfigChannel() calls (for the same context of course)  */
    hadc->InjectionConfig.ContextQueue |= tmp_JSQR_ContextQueueBeingBuilt;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80033ba:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80033be:	431a      	orrs	r2, r3
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	665a      	str	r2, [r3, #100]	; 0x64

    /* 4. End of context setting: if this is the last channel set, then write context
        into register JSQR and make it enter into queue                   */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d10a      	bne.n	80033e2 <HAL_ADCEx_InjectedConfigChannel+0x13e>
    {
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80033d2:	4b5b      	ldr	r3, [pc, #364]	; (8003540 <HAL_ADCEx_InjectedConfigChannel+0x29c>)
 80033d4:	4013      	ands	r3, r2
 80033d6:	687a      	ldr	r2, [r7, #4]
 80033d8:	6e51      	ldr	r1, [r2, #100]	; 0x64
 80033da:	687a      	ldr	r2, [r7, #4]
 80033dc:	6812      	ldr	r2, [r2, #0]
 80033de:	430b      	orrs	r3, r1
 80033e0:	64d3      	str	r3, [r2, #76]	; 0x4c
  /* conversion on going on injected group:                                   */
  /*  - Injected context queue: Queue disable (active context is kept) or     */
  /*    enable (context decremented, up to 2 contexts queued)                 */
  /*  - Injected discontinuous mode: can be enabled only if auto-injected     */
  /*    mode is disabled.                                                     */
  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4618      	mov	r0, r3
 80033e8:	f7ff fe37 	bl	800305a <LL_ADC_INJ_IsConversionOngoing>
 80033ec:	4603      	mov	r3, r0
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d124      	bne.n	800343c <HAL_ADCEx_InjectedConfigChannel+0x198>
  {
    /* If auto-injected mode is disabled: no constraint                       */
    if (sConfigInjected->AutoInjectedConv == DISABLE)
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d112      	bne.n	8003422 <HAL_ADCEx_InjectedConfigChannel+0x17e>
    {
      MODIFY_REG(hadc->Instance->CFGR,
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	68db      	ldr	r3, [r3, #12]
 8003402:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800340c:	055a      	lsls	r2, r3, #21
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003414:	051b      	lsls	r3, r3, #20
 8003416:	431a      	orrs	r2, r3
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	430a      	orrs	r2, r1
 800341e:	60da      	str	r2, [r3, #12]
 8003420:	e00c      	b.n	800343c <HAL_ADCEx_InjectedConfigChannel+0x198>
    }
    /* If auto-injected mode is enabled: Injected discontinuous setting is    */
    /* discarded.                                                             */
    else
    {
      MODIFY_REG(hadc->Instance->CFGR,
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	68db      	ldr	r3, [r3, #12]
 8003428:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8003432:	055a      	lsls	r2, r3, #21
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	430a      	orrs	r2, r1
 800343a:	60da      	str	r2, [r3, #12]
  /* conversion on going on regular and injected groups:                      */
  /*  - Automatic injected conversion: can be enabled if injected group       */
  /*    external triggers are disabled.                                       */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4618      	mov	r0, r3
 8003442:	f7ff fdf7 	bl	8003034 <LL_ADC_REG_IsConversionOngoing>
 8003446:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4618      	mov	r0, r3
 8003450:	f7ff fe03 	bl	800305a <LL_ADC_INJ_IsConversionOngoing>
 8003454:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8

  if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003458:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800345c:	2b00      	cmp	r3, #0
 800345e:	f040 822e 	bne.w	80038be <HAL_ADCEx_InjectedConfigChannel+0x61a>
      && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003462:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003466:	2b00      	cmp	r3, #0
 8003468:	f040 8229 	bne.w	80038be <HAL_ADCEx_InjectedConfigChannel+0x61a>
     )
  {
    /* If injected group external triggers are disabled (set to injected      */
    /* software start): no constraint                                         */
    if ((sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003470:	2b00      	cmp	r3, #0
 8003472:	d003      	beq.n	800347c <HAL_ADCEx_InjectedConfigChannel+0x1d8>
        || (sConfigInjected->ExternalTrigInjecConvEdge == ADC_EXTERNALTRIGINJECCONV_EDGE_NONE))
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003478:	2b00      	cmp	r3, #0
 800347a:	d116      	bne.n	80034aa <HAL_ADCEx_InjectedConfigChannel+0x206>
    {
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003482:	2b01      	cmp	r3, #1
 8003484:	d108      	bne.n	8003498 <HAL_ADCEx_InjectedConfigChannel+0x1f4>
      {
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	68da      	ldr	r2, [r3, #12]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8003494:	60da      	str	r2, [r3, #12]
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8003496:	e01f      	b.n	80034d8 <HAL_ADCEx_InjectedConfigChannel+0x234>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	68da      	ldr	r2, [r3, #12]
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 80034a6:	60da      	str	r2, [r3, #12]
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 80034a8:	e016      	b.n	80034d8 <HAL_ADCEx_InjectedConfigChannel+0x234>
    }
    /* If Automatic injected conversion was intended to be set and could not  */
    /* due to injected group external triggers enabled, error is reported.    */
    else
    {
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80034b0:	2b01      	cmp	r3, #1
 80034b2:	d109      	bne.n	80034c8 <HAL_ADCEx_InjectedConfigChannel+0x224>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034b8:	f043 0220 	orr.w	r2, r3, #32
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	65da      	str	r2, [r3, #92]	; 0x5c

        tmp_hal_status = HAL_ERROR;
 80034c0:	2301      	movs	r3, #1
 80034c2:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80034c6:	e007      	b.n	80034d8 <HAL_ADCEx_InjectedConfigChannel+0x234>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	68da      	ldr	r2, [r3, #12]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 80034d6:	60da      	str	r2, [r3, #12]
      }
    }

    if (sConfigInjected->InjecOversamplingMode == ENABLE)
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80034de:	2b01      	cmp	r3, #1
 80034e0:	d110      	bne.n	8003504 <HAL_ADCEx_InjectedConfigChannel+0x260>
      /* Configuration of Injected Oversampler:                                 */
      /*  - Oversampling Ratio                                                  */
      /*  - Right bit shift                                                     */

      /* Enable OverSampling mode */
      MODIFY_REG(hadc->Instance->CFGR2,
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	691b      	ldr	r3, [r3, #16]
 80034e8:	f423 72ff 	bic.w	r2, r3, #510	; 0x1fe
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034f4:	430b      	orrs	r3, r1
 80034f6:	431a      	orrs	r2, r3
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f042 0202 	orr.w	r2, r2, #2
 8003500:	611a      	str	r2, [r3, #16]
 8003502:	e007      	b.n	8003514 <HAL_ADCEx_InjectedConfigChannel+0x270>
                );
    }
    else
    {
      /* Disable Regular OverSampling */
      CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_JOVSE);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	691a      	ldr	r2, [r3, #16]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f022 0202 	bic.w	r2, r2, #2
 8003512:	611a      	str	r2, [r3, #16]
    }

    /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
    if (sConfigInjected->InjectedSamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	689b      	ldr	r3, [r3, #8]
 8003518:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800351c:	d112      	bne.n	8003544 <HAL_ADCEx_InjectedConfigChannel+0x2a0>
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfigInjected->InjectedChannel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6818      	ldr	r0, [r3, #0]
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	2200      	movs	r2, #0
 8003528:	4619      	mov	r1, r3
 800352a:	f7ff fcdb 	bl	8002ee4 <LL_ADC_SetChannelSamplingTime>

      /* Set ADC sampling time common configuration */
      LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8003536:	4618      	mov	r0, r3
 8003538:	f7ff fcc1 	bl	8002ebe <LL_ADC_SetSamplingTimeCommonConfig>
 800353c:	e011      	b.n	8003562 <HAL_ADCEx_InjectedConfigChannel+0x2be>
 800353e:	bf00      	nop
 8003540:	04104000 	.word	0x04104000
    }
    else
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfigInjected->InjectedChannel, sConfigInjected->InjectedSamplingTime);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6818      	ldr	r0, [r3, #0]
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	6819      	ldr	r1, [r3, #0]
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	689b      	ldr	r3, [r3, #8]
 8003550:	461a      	mov	r2, r3
 8003552:	f7ff fcc7 	bl	8002ee4 <LL_ADC_SetChannelSamplingTime>

      /* Set ADC sampling time common configuration */
      LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	2100      	movs	r1, #0
 800355c:	4618      	mov	r0, r3
 800355e:	f7ff fcae 	bl	8002ebe <LL_ADC_SetSamplingTimeCommonConfig>

    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset with respect to the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfigInjected->InjectedOffset);
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	695a      	ldr	r2, [r3, #20]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	68db      	ldr	r3, [r3, #12]
 800356c:	08db      	lsrs	r3, r3, #3
 800356e:	f003 0303 	and.w	r3, r3, #3
 8003572:	005b      	lsls	r3, r3, #1
 8003574:	fa02 f303 	lsl.w	r3, r2, r3
 8003578:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

    if (sConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	691b      	ldr	r3, [r3, #16]
 8003580:	2b04      	cmp	r3, #4
 8003582:	d022      	beq.n	80035ca <HAL_ADCEx_InjectedConfigChannel+0x326>
    {
      /* Set ADC selected offset number */
      LL_ADC_SetOffset(hadc->Instance, sConfigInjected->InjectedOffsetNumber, sConfigInjected->InjectedChannel,
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6818      	ldr	r0, [r3, #0]
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	6919      	ldr	r1, [r3, #16]
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	681a      	ldr	r2, [r3, #0]
 8003590:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003594:	f7ff fc08 	bl	8002da8 <LL_ADC_SetOffset>
                       tmpOffsetShifted);

      /* Set ADC selected offset sign & saturation */
      LL_ADC_SetOffsetSign(hadc->Instance, sConfigInjected->InjectedOffsetNumber, sConfigInjected->InjectedOffsetSign);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6818      	ldr	r0, [r3, #0]
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	6919      	ldr	r1, [r3, #16]
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	699b      	ldr	r3, [r3, #24]
 80035a4:	461a      	mov	r2, r3
 80035a6:	f7ff fc54 	bl	8002e52 <LL_ADC_SetOffsetSign>
      LL_ADC_SetOffsetSaturation(hadc->Instance, sConfigInjected->InjectedOffsetNumber,
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6818      	ldr	r0, [r3, #0]
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	6919      	ldr	r1, [r3, #16]
                                 (sConfigInjected->InjectedOffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	7f1b      	ldrb	r3, [r3, #28]
      LL_ADC_SetOffsetSaturation(hadc->Instance, sConfigInjected->InjectedOffsetNumber,
 80035b6:	2b01      	cmp	r3, #1
 80035b8:	d102      	bne.n	80035c0 <HAL_ADCEx_InjectedConfigChannel+0x31c>
 80035ba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80035be:	e000      	b.n	80035c2 <HAL_ADCEx_InjectedConfigChannel+0x31e>
 80035c0:	2300      	movs	r3, #0
 80035c2:	461a      	mov	r2, r3
 80035c4:	f7ff fc60 	bl	8002e88 <LL_ADC_SetOffsetSaturation>
 80035c8:	e179      	b.n	80038be <HAL_ADCEx_InjectedConfigChannel+0x61a>
    }
    else
    {
      /* Scan each offset register to check if the selected channel is targeted. */
      /* If this is the case, the corresponding offset number is disabled.       */
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	2100      	movs	r1, #0
 80035d0:	4618      	mov	r0, r3
 80035d2:	f7ff fc0d 	bl	8002df0 <LL_ADC_GetOffsetChannel>
 80035d6:	4603      	mov	r3, r0
 80035d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d10a      	bne.n	80035f6 <HAL_ADCEx_InjectedConfigChannel+0x352>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	2100      	movs	r1, #0
 80035e6:	4618      	mov	r0, r3
 80035e8:	f7ff fc02 	bl	8002df0 <LL_ADC_GetOffsetChannel>
 80035ec:	4603      	mov	r3, r0
 80035ee:	0e9b      	lsrs	r3, r3, #26
 80035f0:	f003 021f 	and.w	r2, r3, #31
 80035f4:	e01e      	b.n	8003634 <HAL_ADCEx_InjectedConfigChannel+0x390>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	2100      	movs	r1, #0
 80035fc:	4618      	mov	r0, r3
 80035fe:	f7ff fbf7 	bl	8002df0 <LL_ADC_GetOffsetChannel>
 8003602:	4603      	mov	r3, r0
 8003604:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003608:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800360c:	fa93 f3a3 	rbit	r3, r3
 8003610:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return result;
 8003614:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003618:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (value == 0U)
 800361c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003620:	2b00      	cmp	r3, #0
 8003622:	d101      	bne.n	8003628 <HAL_ADCEx_InjectedConfigChannel+0x384>
    return 32U;
 8003624:	2320      	movs	r3, #32
 8003626:	e004      	b.n	8003632 <HAL_ADCEx_InjectedConfigChannel+0x38e>
  return __builtin_clz(value);
 8003628:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800362c:	fab3 f383 	clz	r3, r3
 8003630:	b2db      	uxtb	r3, r3
 8003632:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800363c:	2b00      	cmp	r3, #0
 800363e:	d105      	bne.n	800364c <HAL_ADCEx_InjectedConfigChannel+0x3a8>
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	0e9b      	lsrs	r3, r3, #26
 8003646:	f003 031f 	and.w	r3, r3, #31
 800364a:	e018      	b.n	800367e <HAL_ADCEx_InjectedConfigChannel+0x3da>
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003654:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003658:	fa93 f3a3 	rbit	r3, r3
 800365c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8003660:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003664:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8003668:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800366c:	2b00      	cmp	r3, #0
 800366e:	d101      	bne.n	8003674 <HAL_ADCEx_InjectedConfigChannel+0x3d0>
    return 32U;
 8003670:	2320      	movs	r3, #32
 8003672:	e004      	b.n	800367e <HAL_ADCEx_InjectedConfigChannel+0x3da>
  return __builtin_clz(value);
 8003674:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003678:	fab3 f383 	clz	r3, r3
 800367c:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800367e:	429a      	cmp	r2, r3
 8003680:	d106      	bne.n	8003690 <HAL_ADCEx_InjectedConfigChannel+0x3ec>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	2200      	movs	r2, #0
 8003688:	2100      	movs	r1, #0
 800368a:	4618      	mov	r0, r3
 800368c:	f7ff fbc6 	bl	8002e1c <LL_ADC_SetOffsetState>
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	2101      	movs	r1, #1
 8003696:	4618      	mov	r0, r3
 8003698:	f7ff fbaa 	bl	8002df0 <LL_ADC_GetOffsetChannel>
 800369c:	4603      	mov	r3, r0
 800369e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d10a      	bne.n	80036bc <HAL_ADCEx_InjectedConfigChannel+0x418>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	2101      	movs	r1, #1
 80036ac:	4618      	mov	r0, r3
 80036ae:	f7ff fb9f 	bl	8002df0 <LL_ADC_GetOffsetChannel>
 80036b2:	4603      	mov	r3, r0
 80036b4:	0e9b      	lsrs	r3, r3, #26
 80036b6:	f003 021f 	and.w	r2, r3, #31
 80036ba:	e01e      	b.n	80036fa <HAL_ADCEx_InjectedConfigChannel+0x456>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	2101      	movs	r1, #1
 80036c2:	4618      	mov	r0, r3
 80036c4:	f7ff fb94 	bl	8002df0 <LL_ADC_GetOffsetChannel>
 80036c8:	4603      	mov	r3, r0
 80036ca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036ce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80036d2:	fa93 f3a3 	rbit	r3, r3
 80036d6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 80036da:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80036de:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 80036e2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d101      	bne.n	80036ee <HAL_ADCEx_InjectedConfigChannel+0x44a>
    return 32U;
 80036ea:	2320      	movs	r3, #32
 80036ec:	e004      	b.n	80036f8 <HAL_ADCEx_InjectedConfigChannel+0x454>
  return __builtin_clz(value);
 80036ee:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80036f2:	fab3 f383 	clz	r3, r3
 80036f6:	b2db      	uxtb	r3, r3
 80036f8:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003702:	2b00      	cmp	r3, #0
 8003704:	d105      	bne.n	8003712 <HAL_ADCEx_InjectedConfigChannel+0x46e>
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	0e9b      	lsrs	r3, r3, #26
 800370c:	f003 031f 	and.w	r3, r3, #31
 8003710:	e018      	b.n	8003744 <HAL_ADCEx_InjectedConfigChannel+0x4a0>
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800371a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800371e:	fa93 f3a3 	rbit	r3, r3
 8003722:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8003726:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800372a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 800372e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003732:	2b00      	cmp	r3, #0
 8003734:	d101      	bne.n	800373a <HAL_ADCEx_InjectedConfigChannel+0x496>
    return 32U;
 8003736:	2320      	movs	r3, #32
 8003738:	e004      	b.n	8003744 <HAL_ADCEx_InjectedConfigChannel+0x4a0>
  return __builtin_clz(value);
 800373a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800373e:	fab3 f383 	clz	r3, r3
 8003742:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003744:	429a      	cmp	r2, r3
 8003746:	d106      	bne.n	8003756 <HAL_ADCEx_InjectedConfigChannel+0x4b2>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	2200      	movs	r2, #0
 800374e:	2101      	movs	r1, #1
 8003750:	4618      	mov	r0, r3
 8003752:	f7ff fb63 	bl	8002e1c <LL_ADC_SetOffsetState>
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	2102      	movs	r1, #2
 800375c:	4618      	mov	r0, r3
 800375e:	f7ff fb47 	bl	8002df0 <LL_ADC_GetOffsetChannel>
 8003762:	4603      	mov	r3, r0
 8003764:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003768:	2b00      	cmp	r3, #0
 800376a:	d10a      	bne.n	8003782 <HAL_ADCEx_InjectedConfigChannel+0x4de>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	2102      	movs	r1, #2
 8003772:	4618      	mov	r0, r3
 8003774:	f7ff fb3c 	bl	8002df0 <LL_ADC_GetOffsetChannel>
 8003778:	4603      	mov	r3, r0
 800377a:	0e9b      	lsrs	r3, r3, #26
 800377c:	f003 021f 	and.w	r2, r3, #31
 8003780:	e01e      	b.n	80037c0 <HAL_ADCEx_InjectedConfigChannel+0x51c>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	2102      	movs	r1, #2
 8003788:	4618      	mov	r0, r3
 800378a:	f7ff fb31 	bl	8002df0 <LL_ADC_GetOffsetChannel>
 800378e:	4603      	mov	r3, r0
 8003790:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003794:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003798:	fa93 f3a3 	rbit	r3, r3
 800379c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 80037a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80037a4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 80037a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d101      	bne.n	80037b4 <HAL_ADCEx_InjectedConfigChannel+0x510>
    return 32U;
 80037b0:	2320      	movs	r3, #32
 80037b2:	e004      	b.n	80037be <HAL_ADCEx_InjectedConfigChannel+0x51a>
  return __builtin_clz(value);
 80037b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80037b8:	fab3 f383 	clz	r3, r3
 80037bc:	b2db      	uxtb	r3, r3
 80037be:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d105      	bne.n	80037d8 <HAL_ADCEx_InjectedConfigChannel+0x534>
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	0e9b      	lsrs	r3, r3, #26
 80037d2:	f003 031f 	and.w	r3, r3, #31
 80037d6:	e014      	b.n	8003802 <HAL_ADCEx_InjectedConfigChannel+0x55e>
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037de:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80037e0:	fa93 f3a3 	rbit	r3, r3
 80037e4:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 80037e6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80037e8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 80037ec:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d101      	bne.n	80037f8 <HAL_ADCEx_InjectedConfigChannel+0x554>
    return 32U;
 80037f4:	2320      	movs	r3, #32
 80037f6:	e004      	b.n	8003802 <HAL_ADCEx_InjectedConfigChannel+0x55e>
  return __builtin_clz(value);
 80037f8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80037fc:	fab3 f383 	clz	r3, r3
 8003800:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003802:	429a      	cmp	r2, r3
 8003804:	d106      	bne.n	8003814 <HAL_ADCEx_InjectedConfigChannel+0x570>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	2200      	movs	r2, #0
 800380c:	2102      	movs	r1, #2
 800380e:	4618      	mov	r0, r3
 8003810:	f7ff fb04 	bl	8002e1c <LL_ADC_SetOffsetState>
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	2103      	movs	r1, #3
 800381a:	4618      	mov	r0, r3
 800381c:	f7ff fae8 	bl	8002df0 <LL_ADC_GetOffsetChannel>
 8003820:	4603      	mov	r3, r0
 8003822:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003826:	2b00      	cmp	r3, #0
 8003828:	d10a      	bne.n	8003840 <HAL_ADCEx_InjectedConfigChannel+0x59c>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	2103      	movs	r1, #3
 8003830:	4618      	mov	r0, r3
 8003832:	f7ff fadd 	bl	8002df0 <LL_ADC_GetOffsetChannel>
 8003836:	4603      	mov	r3, r0
 8003838:	0e9b      	lsrs	r3, r3, #26
 800383a:	f003 021f 	and.w	r2, r3, #31
 800383e:	e017      	b.n	8003870 <HAL_ADCEx_InjectedConfigChannel+0x5cc>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	2103      	movs	r1, #3
 8003846:	4618      	mov	r0, r3
 8003848:	f7ff fad2 	bl	8002df0 <LL_ADC_GetOffsetChannel>
 800384c:	4603      	mov	r3, r0
 800384e:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003850:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003852:	fa93 f3a3 	rbit	r3, r3
 8003856:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003858:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800385a:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 800385c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800385e:	2b00      	cmp	r3, #0
 8003860:	d101      	bne.n	8003866 <HAL_ADCEx_InjectedConfigChannel+0x5c2>
    return 32U;
 8003862:	2320      	movs	r3, #32
 8003864:	e003      	b.n	800386e <HAL_ADCEx_InjectedConfigChannel+0x5ca>
  return __builtin_clz(value);
 8003866:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003868:	fab3 f383 	clz	r3, r3
 800386c:	b2db      	uxtb	r3, r3
 800386e:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003878:	2b00      	cmp	r3, #0
 800387a:	d105      	bne.n	8003888 <HAL_ADCEx_InjectedConfigChannel+0x5e4>
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	0e9b      	lsrs	r3, r3, #26
 8003882:	f003 031f 	and.w	r3, r3, #31
 8003886:	e011      	b.n	80038ac <HAL_ADCEx_InjectedConfigChannel+0x608>
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800388e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003890:	fa93 f3a3 	rbit	r3, r3
 8003894:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8003896:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003898:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 800389a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800389c:	2b00      	cmp	r3, #0
 800389e:	d101      	bne.n	80038a4 <HAL_ADCEx_InjectedConfigChannel+0x600>
    return 32U;
 80038a0:	2320      	movs	r3, #32
 80038a2:	e003      	b.n	80038ac <HAL_ADCEx_InjectedConfigChannel+0x608>
  return __builtin_clz(value);
 80038a4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80038a6:	fab3 f383 	clz	r3, r3
 80038aa:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80038ac:	429a      	cmp	r2, r3
 80038ae:	d106      	bne.n	80038be <HAL_ADCEx_InjectedConfigChannel+0x61a>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	2200      	movs	r2, #0
 80038b6:	2103      	movs	r1, #3
 80038b8:	4618      	mov	r0, r3
 80038ba:	f7ff faaf 	bl	8002e1c <LL_ADC_SetOffsetState>
  }

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4618      	mov	r0, r3
 80038c4:	f7ff fb62 	bl	8002f8c <LL_ADC_IsEnabled>
 80038c8:	4603      	mov	r3, r0
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	f040 813d 	bne.w	8003b4a <HAL_ADCEx_InjectedConfigChannel+0x8a6>
  {
    /* Set mode single-ended or differential input of the selected ADC channel */
    LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfigInjected->InjectedChannel, sConfigInjected->InjectedSingleDiff);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6818      	ldr	r0, [r3, #0]
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	6819      	ldr	r1, [r3, #0]
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	68db      	ldr	r3, [r3, #12]
 80038dc:	461a      	mov	r2, r3
 80038de:	f7ff fb2d 	bl	8002f3c <LL_ADC_SetChannelSingleDiff>

    /* Configuration of differential mode */
    /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
    if (sConfigInjected->InjectedSingleDiff == ADC_DIFFERENTIAL_ENDED)
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	68db      	ldr	r3, [r3, #12]
 80038e6:	4aa2      	ldr	r2, [pc, #648]	; (8003b70 <HAL_ADCEx_InjectedConfigChannel+0x8cc>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	f040 812e 	bne.w	8003b4a <HAL_ADCEx_InjectedConfigChannel+0x8a6>
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6818      	ldr	r0, [r3, #0]
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d10b      	bne.n	8003916 <HAL_ADCEx_InjectedConfigChannel+0x672>
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	0e9b      	lsrs	r3, r3, #26
 8003904:	3301      	adds	r3, #1
 8003906:	f003 031f 	and.w	r3, r3, #31
 800390a:	2b09      	cmp	r3, #9
 800390c:	bf94      	ite	ls
 800390e:	2301      	movls	r3, #1
 8003910:	2300      	movhi	r3, #0
 8003912:	b2db      	uxtb	r3, r3
 8003914:	e019      	b.n	800394a <HAL_ADCEx_InjectedConfigChannel+0x6a6>
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800391c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800391e:	fa93 f3a3 	rbit	r3, r3
 8003922:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8003924:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003926:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8003928:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800392a:	2b00      	cmp	r3, #0
 800392c:	d101      	bne.n	8003932 <HAL_ADCEx_InjectedConfigChannel+0x68e>
    return 32U;
 800392e:	2320      	movs	r3, #32
 8003930:	e003      	b.n	800393a <HAL_ADCEx_InjectedConfigChannel+0x696>
  return __builtin_clz(value);
 8003932:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003934:	fab3 f383 	clz	r3, r3
 8003938:	b2db      	uxtb	r3, r3
 800393a:	3301      	adds	r3, #1
 800393c:	f003 031f 	and.w	r3, r3, #31
 8003940:	2b09      	cmp	r3, #9
 8003942:	bf94      	ite	ls
 8003944:	2301      	movls	r3, #1
 8003946:	2300      	movhi	r3, #0
 8003948:	b2db      	uxtb	r3, r3
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800394a:	2b00      	cmp	r3, #0
 800394c:	d079      	beq.n	8003a42 <HAL_ADCEx_InjectedConfigChannel+0x79e>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003956:	2b00      	cmp	r3, #0
 8003958:	d107      	bne.n	800396a <HAL_ADCEx_InjectedConfigChannel+0x6c6>
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	0e9b      	lsrs	r3, r3, #26
 8003960:	3301      	adds	r3, #1
 8003962:	069b      	lsls	r3, r3, #26
 8003964:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003968:	e015      	b.n	8003996 <HAL_ADCEx_InjectedConfigChannel+0x6f2>
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003970:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003972:	fa93 f3a3 	rbit	r3, r3
 8003976:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8003978:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800397a:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 800397c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800397e:	2b00      	cmp	r3, #0
 8003980:	d101      	bne.n	8003986 <HAL_ADCEx_InjectedConfigChannel+0x6e2>
    return 32U;
 8003982:	2320      	movs	r3, #32
 8003984:	e003      	b.n	800398e <HAL_ADCEx_InjectedConfigChannel+0x6ea>
  return __builtin_clz(value);
 8003986:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003988:	fab3 f383 	clz	r3, r3
 800398c:	b2db      	uxtb	r3, r3
 800398e:	3301      	adds	r3, #1
 8003990:	069b      	lsls	r3, r3, #26
 8003992:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d109      	bne.n	80039b6 <HAL_ADCEx_InjectedConfigChannel+0x712>
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	0e9b      	lsrs	r3, r3, #26
 80039a8:	3301      	adds	r3, #1
 80039aa:	f003 031f 	and.w	r3, r3, #31
 80039ae:	2101      	movs	r1, #1
 80039b0:	fa01 f303 	lsl.w	r3, r1, r3
 80039b4:	e017      	b.n	80039e6 <HAL_ADCEx_InjectedConfigChannel+0x742>
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80039be:	fa93 f3a3 	rbit	r3, r3
 80039c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80039c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039c6:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80039c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d101      	bne.n	80039d2 <HAL_ADCEx_InjectedConfigChannel+0x72e>
    return 32U;
 80039ce:	2320      	movs	r3, #32
 80039d0:	e003      	b.n	80039da <HAL_ADCEx_InjectedConfigChannel+0x736>
  return __builtin_clz(value);
 80039d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80039d4:	fab3 f383 	clz	r3, r3
 80039d8:	b2db      	uxtb	r3, r3
 80039da:	3301      	adds	r3, #1
 80039dc:	f003 031f 	and.w	r3, r3, #31
 80039e0:	2101      	movs	r1, #1
 80039e2:	fa01 f303 	lsl.w	r3, r1, r3
 80039e6:	ea42 0103 	orr.w	r1, r2, r3
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d10a      	bne.n	8003a0c <HAL_ADCEx_InjectedConfigChannel+0x768>
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	0e9b      	lsrs	r3, r3, #26
 80039fc:	3301      	adds	r3, #1
 80039fe:	f003 021f 	and.w	r2, r3, #31
 8003a02:	4613      	mov	r3, r2
 8003a04:	005b      	lsls	r3, r3, #1
 8003a06:	4413      	add	r3, r2
 8003a08:	051b      	lsls	r3, r3, #20
 8003a0a:	e018      	b.n	8003a3e <HAL_ADCEx_InjectedConfigChannel+0x79a>
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a14:	fa93 f3a3 	rbit	r3, r3
 8003a18:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8003a1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a1c:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8003a1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d101      	bne.n	8003a28 <HAL_ADCEx_InjectedConfigChannel+0x784>
    return 32U;
 8003a24:	2320      	movs	r3, #32
 8003a26:	e003      	b.n	8003a30 <HAL_ADCEx_InjectedConfigChannel+0x78c>
  return __builtin_clz(value);
 8003a28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a2a:	fab3 f383 	clz	r3, r3
 8003a2e:	b2db      	uxtb	r3, r3
 8003a30:	3301      	adds	r3, #1
 8003a32:	f003 021f 	and.w	r2, r3, #31
 8003a36:	4613      	mov	r3, r2
 8003a38:	005b      	lsls	r3, r3, #1
 8003a3a:	4413      	add	r3, r2
 8003a3c:	051b      	lsls	r3, r3, #20
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003a3e:	430b      	orrs	r3, r1
 8003a40:	e07e      	b.n	8003b40 <HAL_ADCEx_InjectedConfigChannel+0x89c>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d107      	bne.n	8003a5e <HAL_ADCEx_InjectedConfigChannel+0x7ba>
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	0e9b      	lsrs	r3, r3, #26
 8003a54:	3301      	adds	r3, #1
 8003a56:	069b      	lsls	r3, r3, #26
 8003a58:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003a5c:	e015      	b.n	8003a8a <HAL_ADCEx_InjectedConfigChannel+0x7e6>
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a66:	fa93 f3a3 	rbit	r3, r3
 8003a6a:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8003a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8003a70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d101      	bne.n	8003a7a <HAL_ADCEx_InjectedConfigChannel+0x7d6>
    return 32U;
 8003a76:	2320      	movs	r3, #32
 8003a78:	e003      	b.n	8003a82 <HAL_ADCEx_InjectedConfigChannel+0x7de>
  return __builtin_clz(value);
 8003a7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a7c:	fab3 f383 	clz	r3, r3
 8003a80:	b2db      	uxtb	r3, r3
 8003a82:	3301      	adds	r3, #1
 8003a84:	069b      	lsls	r3, r3, #26
 8003a86:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d109      	bne.n	8003aaa <HAL_ADCEx_InjectedConfigChannel+0x806>
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	0e9b      	lsrs	r3, r3, #26
 8003a9c:	3301      	adds	r3, #1
 8003a9e:	f003 031f 	and.w	r3, r3, #31
 8003aa2:	2101      	movs	r1, #1
 8003aa4:	fa01 f303 	lsl.w	r3, r1, r3
 8003aa8:	e017      	b.n	8003ada <HAL_ADCEx_InjectedConfigChannel+0x836>
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ab0:	69fb      	ldr	r3, [r7, #28]
 8003ab2:	fa93 f3a3 	rbit	r3, r3
 8003ab6:	61bb      	str	r3, [r7, #24]
  return result;
 8003ab8:	69bb      	ldr	r3, [r7, #24]
 8003aba:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8003abc:	6a3b      	ldr	r3, [r7, #32]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d101      	bne.n	8003ac6 <HAL_ADCEx_InjectedConfigChannel+0x822>
    return 32U;
 8003ac2:	2320      	movs	r3, #32
 8003ac4:	e003      	b.n	8003ace <HAL_ADCEx_InjectedConfigChannel+0x82a>
  return __builtin_clz(value);
 8003ac6:	6a3b      	ldr	r3, [r7, #32]
 8003ac8:	fab3 f383 	clz	r3, r3
 8003acc:	b2db      	uxtb	r3, r3
 8003ace:	3301      	adds	r3, #1
 8003ad0:	f003 031f 	and.w	r3, r3, #31
 8003ad4:	2101      	movs	r1, #1
 8003ad6:	fa01 f303 	lsl.w	r3, r1, r3
 8003ada:	ea42 0103 	orr.w	r1, r2, r3
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d10d      	bne.n	8003b06 <HAL_ADCEx_InjectedConfigChannel+0x862>
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	0e9b      	lsrs	r3, r3, #26
 8003af0:	3301      	adds	r3, #1
 8003af2:	f003 021f 	and.w	r2, r3, #31
 8003af6:	4613      	mov	r3, r2
 8003af8:	005b      	lsls	r3, r3, #1
 8003afa:	4413      	add	r3, r2
 8003afc:	3b1e      	subs	r3, #30
 8003afe:	051b      	lsls	r3, r3, #20
 8003b00:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003b04:	e01b      	b.n	8003b3e <HAL_ADCEx_InjectedConfigChannel+0x89a>
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b0c:	693b      	ldr	r3, [r7, #16]
 8003b0e:	fa93 f3a3 	rbit	r3, r3
 8003b12:	60fb      	str	r3, [r7, #12]
  return result;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003b18:	697b      	ldr	r3, [r7, #20]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d101      	bne.n	8003b22 <HAL_ADCEx_InjectedConfigChannel+0x87e>
    return 32U;
 8003b1e:	2320      	movs	r3, #32
 8003b20:	e003      	b.n	8003b2a <HAL_ADCEx_InjectedConfigChannel+0x886>
  return __builtin_clz(value);
 8003b22:	697b      	ldr	r3, [r7, #20]
 8003b24:	fab3 f383 	clz	r3, r3
 8003b28:	b2db      	uxtb	r3, r3
 8003b2a:	3301      	adds	r3, #1
 8003b2c:	f003 021f 	and.w	r2, r3, #31
 8003b30:	4613      	mov	r3, r2
 8003b32:	005b      	lsls	r3, r3, #1
 8003b34:	4413      	add	r3, r2
 8003b36:	3b1e      	subs	r3, #30
 8003b38:	051b      	lsls	r3, r3, #20
 8003b3a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003b3e:	430b      	orrs	r3, r1
 8003b40:	683a      	ldr	r2, [r7, #0]
 8003b42:	6892      	ldr	r2, [r2, #8]
 8003b44:	4619      	mov	r1, r3
 8003b46:	f7ff f9cd 	bl	8002ee4 <LL_ADC_SetChannelSamplingTime>
  /* internal measurement paths enable: If internal channel selected,       */
  /* enable dedicated internal buffers and path.                            */
  /* Note: these internal measurement paths can be disabled using           */
  /* HAL_ADC_DeInit().                                                      */

  if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfigInjected->InjectedChannel))
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	681a      	ldr	r2, [r3, #0]
 8003b4e:	4b09      	ldr	r3, [pc, #36]	; (8003b74 <HAL_ADCEx_InjectedConfigChannel+0x8d0>)
 8003b50:	4013      	ands	r3, r2
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	f000 80a4 	beq.w	8003ca0 <HAL_ADCEx_InjectedConfigChannel+0x9fc>
  {
    tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003b60:	d004      	beq.n	8003b6c <HAL_ADCEx_InjectedConfigChannel+0x8c8>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4a04      	ldr	r2, [pc, #16]	; (8003b78 <HAL_ADCEx_InjectedConfigChannel+0x8d4>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d109      	bne.n	8003b80 <HAL_ADCEx_InjectedConfigChannel+0x8dc>
 8003b6c:	4b03      	ldr	r3, [pc, #12]	; (8003b7c <HAL_ADCEx_InjectedConfigChannel+0x8d8>)
 8003b6e:	e008      	b.n	8003b82 <HAL_ADCEx_InjectedConfigChannel+0x8de>
 8003b70:	407f0000 	.word	0x407f0000
 8003b74:	80080000 	.word	0x80080000
 8003b78:	50000100 	.word	0x50000100
 8003b7c:	50000300 	.word	0x50000300
 8003b80:	4b4c      	ldr	r3, [pc, #304]	; (8003cb4 <HAL_ADCEx_InjectedConfigChannel+0xa10>)
 8003b82:	4618      	mov	r0, r3
 8003b84:	f7ff f902 	bl	8002d8c <LL_ADC_GetCommonPathInternalCh>
 8003b88:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC1)
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a49      	ldr	r2, [pc, #292]	; (8003cb8 <HAL_ADCEx_InjectedConfigChannel+0xa14>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d004      	beq.n	8003ba0 <HAL_ADCEx_InjectedConfigChannel+0x8fc>
         || (sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a48      	ldr	r2, [pc, #288]	; (8003cbc <HAL_ADCEx_InjectedConfigChannel+0xa18>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d134      	bne.n	8003c0a <HAL_ADCEx_InjectedConfigChannel+0x966>
        && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003ba0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003ba4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d12e      	bne.n	8003c0a <HAL_ADCEx_InjectedConfigChannel+0x966>
    {
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003bb4:	d174      	bne.n	8003ca0 <HAL_ADCEx_InjectedConfigChannel+0x9fc>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003bbe:	d004      	beq.n	8003bca <HAL_ADCEx_InjectedConfigChannel+0x926>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a3e      	ldr	r2, [pc, #248]	; (8003cc0 <HAL_ADCEx_InjectedConfigChannel+0xa1c>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d101      	bne.n	8003bce <HAL_ADCEx_InjectedConfigChannel+0x92a>
 8003bca:	4a3e      	ldr	r2, [pc, #248]	; (8003cc4 <HAL_ADCEx_InjectedConfigChannel+0xa20>)
 8003bcc:	e000      	b.n	8003bd0 <HAL_ADCEx_InjectedConfigChannel+0x92c>
 8003bce:	4a39      	ldr	r2, [pc, #228]	; (8003cb4 <HAL_ADCEx_InjectedConfigChannel+0xa10>)
 8003bd0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003bd4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003bd8:	4619      	mov	r1, r3
 8003bda:	4610      	mov	r0, r2
 8003bdc:	f7ff f8c3 	bl	8002d66 <LL_ADC_SetCommonPathInternalCh>
        /* Delay for temperature sensor stabilization time */
        /* Wait loop initialization and execution */
        /* Note: Variable divided by 2 to compensate partially              */
        /*       CPU processing cycles, scaling in us split to not          */
        /*       exceed 32 bits register capacity and handle low frequency. */
        wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (((SystemCoreClock / (100000UL * 2UL)) + 1UL) + 1UL));
 8003be0:	4b39      	ldr	r3, [pc, #228]	; (8003cc8 <HAL_ADCEx_InjectedConfigChannel+0xa24>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	099b      	lsrs	r3, r3, #6
 8003be6:	4a39      	ldr	r2, [pc, #228]	; (8003ccc <HAL_ADCEx_InjectedConfigChannel+0xa28>)
 8003be8:	fba2 2303 	umull	r2, r3, r2, r3
 8003bec:	099a      	lsrs	r2, r3, #6
 8003bee:	4613      	mov	r3, r2
 8003bf0:	005b      	lsls	r3, r3, #1
 8003bf2:	4413      	add	r3, r2
 8003bf4:	009b      	lsls	r3, r3, #2
 8003bf6:	3318      	adds	r3, #24
 8003bf8:	60bb      	str	r3, [r7, #8]
        while (wait_loop_index != 0UL)
 8003bfa:	e002      	b.n	8003c02 <HAL_ADCEx_InjectedConfigChannel+0x95e>
        {
          wait_loop_index--;
 8003bfc:	68bb      	ldr	r3, [r7, #8]
 8003bfe:	3b01      	subs	r3, #1
 8003c00:	60bb      	str	r3, [r7, #8]
        while (wait_loop_index != 0UL)
 8003c02:	68bb      	ldr	r3, [r7, #8]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d1f9      	bne.n	8003bfc <HAL_ADCEx_InjectedConfigChannel+0x958>
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003c08:	e04a      	b.n	8003ca0 <HAL_ADCEx_InjectedConfigChannel+0x9fc>
        }
      }
    }
    else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4a30      	ldr	r2, [pc, #192]	; (8003cd0 <HAL_ADCEx_InjectedConfigChannel+0xa2c>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d120      	bne.n	8003c56 <HAL_ADCEx_InjectedConfigChannel+0x9b2>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003c14:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003c18:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d11a      	bne.n	8003c56 <HAL_ADCEx_InjectedConfigChannel+0x9b2>
    {
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003c28:	d13a      	bne.n	8003ca0 <HAL_ADCEx_InjectedConfigChannel+0x9fc>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003c32:	d004      	beq.n	8003c3e <HAL_ADCEx_InjectedConfigChannel+0x99a>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4a21      	ldr	r2, [pc, #132]	; (8003cc0 <HAL_ADCEx_InjectedConfigChannel+0xa1c>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d101      	bne.n	8003c42 <HAL_ADCEx_InjectedConfigChannel+0x99e>
 8003c3e:	4a21      	ldr	r2, [pc, #132]	; (8003cc4 <HAL_ADCEx_InjectedConfigChannel+0xa20>)
 8003c40:	e000      	b.n	8003c44 <HAL_ADCEx_InjectedConfigChannel+0x9a0>
 8003c42:	4a1c      	ldr	r2, [pc, #112]	; (8003cb4 <HAL_ADCEx_InjectedConfigChannel+0xa10>)
 8003c44:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003c48:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c4c:	4619      	mov	r1, r3
 8003c4e:	4610      	mov	r0, r2
 8003c50:	f7ff f889 	bl	8002d66 <LL_ADC_SetCommonPathInternalCh>
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003c54:	e024      	b.n	8003ca0 <HAL_ADCEx_InjectedConfigChannel+0x9fc>
                                       LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
      }
    }
    else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4a1e      	ldr	r2, [pc, #120]	; (8003cd4 <HAL_ADCEx_InjectedConfigChannel+0xa30>)
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d11f      	bne.n	8003ca0 <HAL_ADCEx_InjectedConfigChannel+0x9fc>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003c60:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003c64:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d119      	bne.n	8003ca0 <HAL_ADCEx_InjectedConfigChannel+0x9fc>
    {
      if (ADC_VREFINT_INSTANCE(hadc))
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a13      	ldr	r2, [pc, #76]	; (8003cc0 <HAL_ADCEx_InjectedConfigChannel+0xa1c>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d014      	beq.n	8003ca0 <HAL_ADCEx_InjectedConfigChannel+0x9fc>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003c7e:	d004      	beq.n	8003c8a <HAL_ADCEx_InjectedConfigChannel+0x9e6>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a0e      	ldr	r2, [pc, #56]	; (8003cc0 <HAL_ADCEx_InjectedConfigChannel+0xa1c>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d101      	bne.n	8003c8e <HAL_ADCEx_InjectedConfigChannel+0x9ea>
 8003c8a:	4a0e      	ldr	r2, [pc, #56]	; (8003cc4 <HAL_ADCEx_InjectedConfigChannel+0xa20>)
 8003c8c:	e000      	b.n	8003c90 <HAL_ADCEx_InjectedConfigChannel+0x9ec>
 8003c8e:	4a09      	ldr	r2, [pc, #36]	; (8003cb4 <HAL_ADCEx_InjectedConfigChannel+0xa10>)
 8003c90:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003c94:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003c98:	4619      	mov	r1, r3
 8003c9a:	4610      	mov	r0, r2
 8003c9c:	f7ff f863 	bl	8002d66 <LL_ADC_SetCommonPathInternalCh>
      /* nothing to do */
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003ca8:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003cac:	4618      	mov	r0, r3
 8003cae:	37d8      	adds	r7, #216	; 0xd8
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bd80      	pop	{r7, pc}
 8003cb4:	50000700 	.word	0x50000700
 8003cb8:	c3210000 	.word	0xc3210000
 8003cbc:	90c00010 	.word	0x90c00010
 8003cc0:	50000100 	.word	0x50000100
 8003cc4:	50000300 	.word	0x50000300
 8003cc8:	20000010 	.word	0x20000010
 8003ccc:	053e2d63 	.word	0x053e2d63
 8003cd0:	c7520000 	.word	0xc7520000
 8003cd4:	cb840000 	.word	0xcb840000

08003cd8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003cd8:	b590      	push	{r4, r7, lr}
 8003cda:	b0a1      	sub	sp, #132	; 0x84
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
 8003ce0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003cee:	2b01      	cmp	r3, #1
 8003cf0:	d101      	bne.n	8003cf6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003cf2:	2302      	movs	r3, #2
 8003cf4:	e0cb      	b.n	8003e8e <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2201      	movs	r2, #1
 8003cfa:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8003cfe:	2300      	movs	r3, #0
 8003d00:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8003d02:	2300      	movs	r3, #0
 8003d04:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003d0e:	d102      	bne.n	8003d16 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003d10:	4b61      	ldr	r3, [pc, #388]	; (8003e98 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8003d12:	60bb      	str	r3, [r7, #8]
 8003d14:	e001      	b.n	8003d1a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003d16:	2300      	movs	r3, #0
 8003d18:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003d1a:	68bb      	ldr	r3, [r7, #8]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d10b      	bne.n	8003d38 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d24:	f043 0220 	orr.w	r2, r3, #32
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8003d34:	2301      	movs	r3, #1
 8003d36:	e0aa      	b.n	8003e8e <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003d38:	68bb      	ldr	r3, [r7, #8]
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	f7ff f97a 	bl	8003034 <LL_ADC_REG_IsConversionOngoing>
 8003d40:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4618      	mov	r0, r3
 8003d48:	f7ff f974 	bl	8003034 <LL_ADC_REG_IsConversionOngoing>
 8003d4c:	4603      	mov	r3, r0
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	f040 808c 	bne.w	8003e6c <HAL_ADCEx_MultiModeConfigChannel+0x194>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003d54:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	f040 8088 	bne.w	8003e6c <HAL_ADCEx_MultiModeConfigChannel+0x194>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003d64:	d004      	beq.n	8003d70 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a4b      	ldr	r2, [pc, #300]	; (8003e98 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d101      	bne.n	8003d74 <HAL_ADCEx_MultiModeConfigChannel+0x9c>
 8003d70:	4b4a      	ldr	r3, [pc, #296]	; (8003e9c <HAL_ADCEx_MultiModeConfigChannel+0x1c4>)
 8003d72:	e000      	b.n	8003d76 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8003d74:	4b4a      	ldr	r3, [pc, #296]	; (8003ea0 <HAL_ADCEx_MultiModeConfigChannel+0x1c8>)
 8003d76:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d041      	beq.n	8003e04 <HAL_ADCEx_MultiModeConfigChannel+0x12c>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003d80:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d82:	689b      	ldr	r3, [r3, #8]
 8003d84:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	6859      	ldr	r1, [r3, #4]
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003d92:	035b      	lsls	r3, r3, #13
 8003d94:	430b      	orrs	r3, r1
 8003d96:	431a      	orrs	r2, r3
 8003d98:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d9a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003da4:	d004      	beq.n	8003db0 <HAL_ADCEx_MultiModeConfigChannel+0xd8>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4a3b      	ldr	r2, [pc, #236]	; (8003e98 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d10f      	bne.n	8003dd0 <HAL_ADCEx_MultiModeConfigChannel+0xf8>
 8003db0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003db4:	f7ff f8ea 	bl	8002f8c <LL_ADC_IsEnabled>
 8003db8:	4604      	mov	r4, r0
 8003dba:	4837      	ldr	r0, [pc, #220]	; (8003e98 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8003dbc:	f7ff f8e6 	bl	8002f8c <LL_ADC_IsEnabled>
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	4323      	orrs	r3, r4
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	bf0c      	ite	eq
 8003dc8:	2301      	moveq	r3, #1
 8003dca:	2300      	movne	r3, #0
 8003dcc:	b2db      	uxtb	r3, r3
 8003dce:	e008      	b.n	8003de2 <HAL_ADCEx_MultiModeConfigChannel+0x10a>
 8003dd0:	4834      	ldr	r0, [pc, #208]	; (8003ea4 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 8003dd2:	f7ff f8db 	bl	8002f8c <LL_ADC_IsEnabled>
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	bf0c      	ite	eq
 8003ddc:	2301      	moveq	r3, #1
 8003dde:	2300      	movne	r3, #0
 8003de0:	b2db      	uxtb	r3, r3
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d04c      	beq.n	8003e80 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003de6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003de8:	689b      	ldr	r3, [r3, #8]
 8003dea:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003dee:	f023 030f 	bic.w	r3, r3, #15
 8003df2:	683a      	ldr	r2, [r7, #0]
 8003df4:	6811      	ldr	r1, [r2, #0]
 8003df6:	683a      	ldr	r2, [r7, #0]
 8003df8:	6892      	ldr	r2, [r2, #8]
 8003dfa:	430a      	orrs	r2, r1
 8003dfc:	431a      	orrs	r2, r3
 8003dfe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e00:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003e02:	e03d      	b.n	8003e80 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003e04:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e06:	689b      	ldr	r3, [r3, #8]
 8003e08:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003e0c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e0e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003e18:	d004      	beq.n	8003e24 <HAL_ADCEx_MultiModeConfigChannel+0x14c>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4a1e      	ldr	r2, [pc, #120]	; (8003e98 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d10f      	bne.n	8003e44 <HAL_ADCEx_MultiModeConfigChannel+0x16c>
 8003e24:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003e28:	f7ff f8b0 	bl	8002f8c <LL_ADC_IsEnabled>
 8003e2c:	4604      	mov	r4, r0
 8003e2e:	481a      	ldr	r0, [pc, #104]	; (8003e98 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8003e30:	f7ff f8ac 	bl	8002f8c <LL_ADC_IsEnabled>
 8003e34:	4603      	mov	r3, r0
 8003e36:	4323      	orrs	r3, r4
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	bf0c      	ite	eq
 8003e3c:	2301      	moveq	r3, #1
 8003e3e:	2300      	movne	r3, #0
 8003e40:	b2db      	uxtb	r3, r3
 8003e42:	e008      	b.n	8003e56 <HAL_ADCEx_MultiModeConfigChannel+0x17e>
 8003e44:	4817      	ldr	r0, [pc, #92]	; (8003ea4 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 8003e46:	f7ff f8a1 	bl	8002f8c <LL_ADC_IsEnabled>
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	bf0c      	ite	eq
 8003e50:	2301      	moveq	r3, #1
 8003e52:	2300      	movne	r3, #0
 8003e54:	b2db      	uxtb	r3, r3
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d012      	beq.n	8003e80 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003e5a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e5c:	689b      	ldr	r3, [r3, #8]
 8003e5e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003e62:	f023 030f 	bic.w	r3, r3, #15
 8003e66:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003e68:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003e6a:	e009      	b.n	8003e80 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e70:	f043 0220 	orr.w	r2, r3, #32
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003e78:	2301      	movs	r3, #1
 8003e7a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8003e7e:	e000      	b.n	8003e82 <HAL_ADCEx_MultiModeConfigChannel+0x1aa>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003e80:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2200      	movs	r2, #0
 8003e86:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003e8a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8003e8e:	4618      	mov	r0, r3
 8003e90:	3784      	adds	r7, #132	; 0x84
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bd90      	pop	{r4, r7, pc}
 8003e96:	bf00      	nop
 8003e98:	50000100 	.word	0x50000100
 8003e9c:	50000300 	.word	0x50000300
 8003ea0:	50000700 	.word	0x50000700
 8003ea4:	50000400 	.word	0x50000400

08003ea8 <LL_EXTI_EnableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8003ea8:	b480      	push	{r7}
 8003eaa:	b083      	sub	sp, #12
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8003eb0:	4b05      	ldr	r3, [pc, #20]	; (8003ec8 <LL_EXTI_EnableIT_0_31+0x20>)
 8003eb2:	681a      	ldr	r2, [r3, #0]
 8003eb4:	4904      	ldr	r1, [pc, #16]	; (8003ec8 <LL_EXTI_EnableIT_0_31+0x20>)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	600b      	str	r3, [r1, #0]
}
 8003ebc:	bf00      	nop
 8003ebe:	370c      	adds	r7, #12
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec6:	4770      	bx	lr
 8003ec8:	40010400 	.word	0x40010400

08003ecc <LL_EXTI_DisableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8003ecc:	b480      	push	{r7}
 8003ece:	b083      	sub	sp, #12
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8003ed4:	4b06      	ldr	r3, [pc, #24]	; (8003ef0 <LL_EXTI_DisableIT_0_31+0x24>)
 8003ed6:	681a      	ldr	r2, [r3, #0]
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	43db      	mvns	r3, r3
 8003edc:	4904      	ldr	r1, [pc, #16]	; (8003ef0 <LL_EXTI_DisableIT_0_31+0x24>)
 8003ede:	4013      	ands	r3, r2
 8003ee0:	600b      	str	r3, [r1, #0]
}
 8003ee2:	bf00      	nop
 8003ee4:	370c      	adds	r7, #12
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eec:	4770      	bx	lr
 8003eee:	bf00      	nop
 8003ef0:	40010400 	.word	0x40010400

08003ef4 <LL_EXTI_EnableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	b083      	sub	sp, #12
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8003efc:	4b05      	ldr	r3, [pc, #20]	; (8003f14 <LL_EXTI_EnableEvent_0_31+0x20>)
 8003efe:	685a      	ldr	r2, [r3, #4]
 8003f00:	4904      	ldr	r1, [pc, #16]	; (8003f14 <LL_EXTI_EnableEvent_0_31+0x20>)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	4313      	orrs	r3, r2
 8003f06:	604b      	str	r3, [r1, #4]

}
 8003f08:	bf00      	nop
 8003f0a:	370c      	adds	r7, #12
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f12:	4770      	bx	lr
 8003f14:	40010400 	.word	0x40010400

08003f18 <LL_EXTI_DisableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b083      	sub	sp, #12
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8003f20:	4b06      	ldr	r3, [pc, #24]	; (8003f3c <LL_EXTI_DisableEvent_0_31+0x24>)
 8003f22:	685a      	ldr	r2, [r3, #4]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	43db      	mvns	r3, r3
 8003f28:	4904      	ldr	r1, [pc, #16]	; (8003f3c <LL_EXTI_DisableEvent_0_31+0x24>)
 8003f2a:	4013      	ands	r3, r2
 8003f2c:	604b      	str	r3, [r1, #4]
}
 8003f2e:	bf00      	nop
 8003f30:	370c      	adds	r7, #12
 8003f32:	46bd      	mov	sp, r7
 8003f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f38:	4770      	bx	lr
 8003f3a:	bf00      	nop
 8003f3c:	40010400 	.word	0x40010400

08003f40 <LL_EXTI_EnableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8003f40:	b480      	push	{r7}
 8003f42:	b083      	sub	sp, #12
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8003f48:	4b05      	ldr	r3, [pc, #20]	; (8003f60 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8003f4a:	689a      	ldr	r2, [r3, #8]
 8003f4c:	4904      	ldr	r1, [pc, #16]	; (8003f60 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	4313      	orrs	r3, r2
 8003f52:	608b      	str	r3, [r1, #8]

}
 8003f54:	bf00      	nop
 8003f56:	370c      	adds	r7, #12
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5e:	4770      	bx	lr
 8003f60:	40010400 	.word	0x40010400

08003f64 <LL_EXTI_DisableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8003f64:	b480      	push	{r7}
 8003f66:	b083      	sub	sp, #12
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8003f6c:	4b06      	ldr	r3, [pc, #24]	; (8003f88 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8003f6e:	689a      	ldr	r2, [r3, #8]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	43db      	mvns	r3, r3
 8003f74:	4904      	ldr	r1, [pc, #16]	; (8003f88 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8003f76:	4013      	ands	r3, r2
 8003f78:	608b      	str	r3, [r1, #8]

}
 8003f7a:	bf00      	nop
 8003f7c:	370c      	adds	r7, #12
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f84:	4770      	bx	lr
 8003f86:	bf00      	nop
 8003f88:	40010400 	.word	0x40010400

08003f8c <LL_EXTI_EnableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	b083      	sub	sp, #12
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8003f94:	4b05      	ldr	r3, [pc, #20]	; (8003fac <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8003f96:	68da      	ldr	r2, [r3, #12]
 8003f98:	4904      	ldr	r1, [pc, #16]	; (8003fac <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	4313      	orrs	r3, r2
 8003f9e:	60cb      	str	r3, [r1, #12]
}
 8003fa0:	bf00      	nop
 8003fa2:	370c      	adds	r7, #12
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003faa:	4770      	bx	lr
 8003fac:	40010400 	.word	0x40010400

08003fb0 <LL_EXTI_DisableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	b083      	sub	sp, #12
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8003fb8:	4b06      	ldr	r3, [pc, #24]	; (8003fd4 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8003fba:	68da      	ldr	r2, [r3, #12]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	43db      	mvns	r3, r3
 8003fc0:	4904      	ldr	r1, [pc, #16]	; (8003fd4 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8003fc2:	4013      	ands	r3, r2
 8003fc4:	60cb      	str	r3, [r1, #12]
}
 8003fc6:	bf00      	nop
 8003fc8:	370c      	adds	r7, #12
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd0:	4770      	bx	lr
 8003fd2:	bf00      	nop
 8003fd4:	40010400 	.word	0x40010400

08003fd8 <LL_EXTI_ClearFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	b083      	sub	sp, #12
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8003fe0:	4a04      	ldr	r2, [pc, #16]	; (8003ff4 <LL_EXTI_ClearFlag_0_31+0x1c>)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6153      	str	r3, [r2, #20]
}
 8003fe6:	bf00      	nop
 8003fe8:	370c      	adds	r7, #12
 8003fea:	46bd      	mov	sp, r7
 8003fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff0:	4770      	bx	lr
 8003ff2:	bf00      	nop
 8003ff4:	40010400 	.word	0x40010400

08003ff8 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b088      	sub	sp, #32
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 8004000:	2300      	movs	r3, #0
 8004002:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8004004:	2300      	movs	r3, #0
 8004006:	77fb      	strb	r3, [r7, #31]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d102      	bne.n	8004014 <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 800400e:	2301      	movs	r3, #1
 8004010:	77fb      	strb	r3, [r7, #31]
 8004012:	e0bc      	b.n	800418e <HAL_COMP_Init+0x196>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800401e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004022:	d102      	bne.n	800402a <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 8004024:	2301      	movs	r3, #1
 8004026:	77fb      	strb	r3, [r7, #31]
 8004028:	e0b1      	b.n	800418e <HAL_COMP_Init+0x196>
    assert_param(IS_COMP_OUTPUTPOL(hcomp->Init.OutputPol));
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRC_INSTANCE(hcomp->Instance, hcomp->Init.BlankingSrce));
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));

    if(hcomp->State == HAL_COMP_STATE_RESET)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	7f5b      	ldrb	r3, [r3, #29]
 800402e:	b2db      	uxtb	r3, r3
 8004030:	2b00      	cmp	r3, #0
 8004032:	d108      	bne.n	8004046 <HAL_COMP_Init+0x4e>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2200      	movs	r2, #0
 8004038:	771a      	strb	r2, [r3, #28]

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2200      	movs	r2, #0
 800403e:	621a      	str	r2, [r3, #32]
#else
      /* Init the low level hardware */
      /* Note: Internal control clock of the comparators must                 */
      /*       be enabled in "HAL_COMP_MspInit()"                             */
      /*       using "__HAL_RCC_SYSCFG_CLK_ENABLE()".                         */
      HAL_COMP_MspInit(hcomp);
 8004040:	6878      	ldr	r0, [r7, #4]
 8004042:	f7fd fa8f 	bl	8001564 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004050:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (  hcomp->Init.InputMinus
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	689a      	ldr	r2, [r3, #8]
               | hcomp->Init.InputPlus
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	695b      	ldr	r3, [r3, #20]
 8004060:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	68db      	ldr	r3, [r3, #12]
 8004066:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	691b      	ldr	r3, [r3, #16]
    tmp_csr = (  hcomp->Init.InputMinus
 800406c:	4313      	orrs	r3, r2
 800406e:	617b      	str	r3, [r7, #20]
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	681a      	ldr	r2, [r3, #0]
 8004076:	4b48      	ldr	r3, [pc, #288]	; (8004198 <HAL_COMP_Init+0x1a0>)
 8004078:	4013      	ands	r3, r2
 800407a:	687a      	ldr	r2, [r7, #4]
 800407c:	6812      	ldr	r2, [r2, #0]
 800407e:	6979      	ldr	r1, [r7, #20]
 8004080:	430b      	orrs	r3, r1
 8004082:	6013      	str	r3, [r2, #0]
               tmp_csr
              );

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800408e:	2b00      	cmp	r3, #0
 8004090:	d016      	beq.n	80040c0 <HAL_COMP_Init+0xc8>
 8004092:	69bb      	ldr	r3, [r7, #24]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d113      	bne.n	80040c0 <HAL_COMP_Init+0xc8>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004098:	4b40      	ldr	r3, [pc, #256]	; (800419c <HAL_COMP_Init+0x1a4>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	099b      	lsrs	r3, r3, #6
 800409e:	4a40      	ldr	r2, [pc, #256]	; (80041a0 <HAL_COMP_Init+0x1a8>)
 80040a0:	fba2 2303 	umull	r2, r3, r2, r3
 80040a4:	099b      	lsrs	r3, r3, #6
 80040a6:	1c5a      	adds	r2, r3, #1
 80040a8:	4613      	mov	r3, r2
 80040aa:	009b      	lsls	r3, r3, #2
 80040ac:	4413      	add	r3, r2
 80040ae:	009b      	lsls	r3, r3, #2
 80040b0:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 80040b2:	e002      	b.n	80040ba <HAL_COMP_Init+0xc2>
      {
        wait_loop_index--;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	3b01      	subs	r3, #1
 80040b8:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d1f9      	bne.n	80040b4 <HAL_COMP_Init+0xbc>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a37      	ldr	r2, [pc, #220]	; (80041a4 <HAL_COMP_Init+0x1ac>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d012      	beq.n	80040f0 <HAL_COMP_Init+0xf8>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4a36      	ldr	r2, [pc, #216]	; (80041a8 <HAL_COMP_Init+0x1b0>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d00a      	beq.n	80040ea <HAL_COMP_Init+0xf2>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a34      	ldr	r2, [pc, #208]	; (80041ac <HAL_COMP_Init+0x1b4>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d102      	bne.n	80040e4 <HAL_COMP_Init+0xec>
 80040de:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80040e2:	e007      	b.n	80040f4 <HAL_COMP_Init+0xfc>
 80040e4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80040e8:	e004      	b.n	80040f4 <HAL_COMP_Init+0xfc>
 80040ea:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80040ee:	e001      	b.n	80040f4 <HAL_COMP_Init+0xfc>
 80040f0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80040f4:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	699b      	ldr	r3, [r3, #24]
 80040fa:	f003 0303 	and.w	r3, r3, #3
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d037      	beq.n	8004172 <HAL_COMP_Init+0x17a>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	699b      	ldr	r3, [r3, #24]
 8004106:	f003 0310 	and.w	r3, r3, #16
 800410a:	2b00      	cmp	r3, #0
 800410c:	d003      	beq.n	8004116 <HAL_COMP_Init+0x11e>
        else
        {
          LL_EXTI_EnableRisingTrig_0_31(exti_line);
        }
#else
        LL_EXTI_EnableRisingTrig_0_31(exti_line);
 800410e:	6938      	ldr	r0, [r7, #16]
 8004110:	f7ff ff16 	bl	8003f40 <LL_EXTI_EnableRisingTrig_0_31>
 8004114:	e002      	b.n	800411c <HAL_COMP_Init+0x124>
        else
        {
          LL_EXTI_DisableRisingTrig_0_31(exti_line);
        }
#else
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
 8004116:	6938      	ldr	r0, [r7, #16]
 8004118:	f7ff ff24 	bl	8003f64 <LL_EXTI_DisableRisingTrig_0_31>
#endif /* COMP7 */
      }

      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	699b      	ldr	r3, [r3, #24]
 8004120:	f003 0320 	and.w	r3, r3, #32
 8004124:	2b00      	cmp	r3, #0
 8004126:	d003      	beq.n	8004130 <HAL_COMP_Init+0x138>
        else
        {
          LL_EXTI_EnableFallingTrig_0_31(exti_line);
        }
#else
        LL_EXTI_EnableFallingTrig_0_31(exti_line);
 8004128:	6938      	ldr	r0, [r7, #16]
 800412a:	f7ff ff2f 	bl	8003f8c <LL_EXTI_EnableFallingTrig_0_31>
 800412e:	e002      	b.n	8004136 <HAL_COMP_Init+0x13e>
        else
        {
          LL_EXTI_DisableFallingTrig_0_31(exti_line);
        }
#else
        LL_EXTI_DisableFallingTrig_0_31(exti_line);
 8004130:	6938      	ldr	r0, [r7, #16]
 8004132:	f7ff ff3d 	bl	8003fb0 <LL_EXTI_DisableFallingTrig_0_31>
      else
      {
        LL_EXTI_ClearFlag_0_31(exti_line);
      }
#else
      LL_EXTI_ClearFlag_0_31(exti_line);
 8004136:	6938      	ldr	r0, [r7, #16]
 8004138:	f7ff ff4e 	bl	8003fd8 <LL_EXTI_ClearFlag_0_31>
#endif /* COMP7 */

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	699b      	ldr	r3, [r3, #24]
 8004140:	f003 0302 	and.w	r3, r3, #2
 8004144:	2b00      	cmp	r3, #0
 8004146:	d003      	beq.n	8004150 <HAL_COMP_Init+0x158>
        else
        {
          LL_EXTI_EnableEvent_0_31(exti_line);
        }
#else
        LL_EXTI_EnableEvent_0_31(exti_line);
 8004148:	6938      	ldr	r0, [r7, #16]
 800414a:	f7ff fed3 	bl	8003ef4 <LL_EXTI_EnableEvent_0_31>
 800414e:	e002      	b.n	8004156 <HAL_COMP_Init+0x15e>
        else
        {
          LL_EXTI_DisableEvent_0_31(exti_line);
        }
#else
        LL_EXTI_DisableEvent_0_31(exti_line);
 8004150:	6938      	ldr	r0, [r7, #16]
 8004152:	f7ff fee1 	bl	8003f18 <LL_EXTI_DisableEvent_0_31>
#endif /* COMP7 */
      }

      /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	699b      	ldr	r3, [r3, #24]
 800415a:	f003 0301 	and.w	r3, r3, #1
 800415e:	2b00      	cmp	r3, #0
 8004160:	d003      	beq.n	800416a <HAL_COMP_Init+0x172>
        else
        {
          LL_EXTI_EnableIT_0_31(exti_line);
        }
#else
        LL_EXTI_EnableIT_0_31(exti_line);
 8004162:	6938      	ldr	r0, [r7, #16]
 8004164:	f7ff fea0 	bl	8003ea8 <LL_EXTI_EnableIT_0_31>
 8004168:	e009      	b.n	800417e <HAL_COMP_Init+0x186>
        else
        {
          LL_EXTI_DisableIT_0_31(exti_line);
        }
#else
        LL_EXTI_DisableIT_0_31(exti_line);
 800416a:	6938      	ldr	r0, [r7, #16]
 800416c:	f7ff feae 	bl	8003ecc <LL_EXTI_DisableIT_0_31>
 8004170:	e005      	b.n	800417e <HAL_COMP_Init+0x186>
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
      }
#else
      LL_EXTI_DisableEvent_0_31(exti_line);
 8004172:	6938      	ldr	r0, [r7, #16]
 8004174:	f7ff fed0 	bl	8003f18 <LL_EXTI_DisableEvent_0_31>
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
      }
#else
      LL_EXTI_DisableIT_0_31(exti_line);
 8004178:	6938      	ldr	r0, [r7, #16]
 800417a:	f7ff fea7 	bl	8003ecc <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	7f5b      	ldrb	r3, [r3, #29]
 8004182:	b2db      	uxtb	r3, r3
 8004184:	2b00      	cmp	r3, #0
 8004186:	d102      	bne.n	800418e <HAL_COMP_Init+0x196>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2201      	movs	r2, #1
 800418c:	775a      	strb	r2, [r3, #29]
    }
  }

  return status;
 800418e:	7ffb      	ldrb	r3, [r7, #31]
}
 8004190:	4618      	mov	r0, r3
 8004192:	3720      	adds	r7, #32
 8004194:	46bd      	mov	sp, r7
 8004196:	bd80      	pop	{r7, pc}
 8004198:	ff007e0f 	.word	0xff007e0f
 800419c:	20000010 	.word	0x20000010
 80041a0:	053e2d63 	.word	0x053e2d63
 80041a4:	40010200 	.word	0x40010200
 80041a8:	40010204 	.word	0x40010204
 80041ac:	40010208 	.word	0x40010208

080041b0 <HAL_COMP_Start>:
  * @brief  Start the comparator.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Start(COMP_HandleTypeDef *hcomp)
{
 80041b0:	b480      	push	{r7}
 80041b2:	b085      	sub	sp, #20
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t wait_loop_index = 0UL;
 80041b8:	2300      	movs	r3, #0
 80041ba:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80041bc:	2300      	movs	r3, #0
 80041be:	73fb      	strb	r3, [r7, #15]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d102      	bne.n	80041cc <HAL_COMP_Start+0x1c>
  {
    status = HAL_ERROR;
 80041c6:	2301      	movs	r3, #1
 80041c8:	73fb      	strb	r3, [r7, #15]
 80041ca:	e02e      	b.n	800422a <HAL_COMP_Start+0x7a>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80041d6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80041da:	d102      	bne.n	80041e2 <HAL_COMP_Start+0x32>
  {
    status = HAL_ERROR;
 80041dc:	2301      	movs	r3, #1
 80041de:	73fb      	strb	r3, [r7, #15]
 80041e0:	e023      	b.n	800422a <HAL_COMP_Start+0x7a>
  else
  {
    /* Check the parameter */
    assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

    if(hcomp->State == HAL_COMP_STATE_READY)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	7f5b      	ldrb	r3, [r3, #29]
 80041e6:	b2db      	uxtb	r3, r3
 80041e8:	2b01      	cmp	r3, #1
 80041ea:	d11c      	bne.n	8004226 <HAL_COMP_Start+0x76>
    {
      /* Enable the selected comparator */
      SET_BIT(hcomp->Instance->CSR, COMP_CSR_EN);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	681a      	ldr	r2, [r3, #0]
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f042 0201 	orr.w	r2, r2, #1
 80041fa:	601a      	str	r2, [r3, #0]

      /* Set HAL COMP handle state */
      hcomp->State = HAL_COMP_STATE_BUSY;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2202      	movs	r2, #2
 8004200:	775a      	strb	r2, [r3, #29]
      /* Note: Variable divided by 2 to compensate partially                  */
      /*       CPU processing cycles.                                         */
      /* Note: In case of system low frequency (below 1Mhz), short delay      */
      /*       of startup time (few us) is within CPU processing cycles       */
      /*       of following instructions.                                     */
      wait_loop_index = (COMP_DELAY_STARTUP_US * (SystemCoreClock / (1000000UL * 2UL)));
 8004202:	4b0d      	ldr	r3, [pc, #52]	; (8004238 <HAL_COMP_Start+0x88>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4a0d      	ldr	r2, [pc, #52]	; (800423c <HAL_COMP_Start+0x8c>)
 8004208:	fba2 2303 	umull	r2, r3, r2, r3
 800420c:	0cda      	lsrs	r2, r3, #19
 800420e:	4613      	mov	r3, r2
 8004210:	009b      	lsls	r3, r3, #2
 8004212:	4413      	add	r3, r2
 8004214:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8004216:	e002      	b.n	800421e <HAL_COMP_Start+0x6e>
      {
        wait_loop_index--;
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	3b01      	subs	r3, #1
 800421c:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800421e:	68bb      	ldr	r3, [r7, #8]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d1f9      	bne.n	8004218 <HAL_COMP_Start+0x68>
 8004224:	e001      	b.n	800422a <HAL_COMP_Start+0x7a>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004226:	2301      	movs	r3, #1
 8004228:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800422a:	7bfb      	ldrb	r3, [r7, #15]
}
 800422c:	4618      	mov	r0, r3
 800422e:	3714      	adds	r7, #20
 8004230:	46bd      	mov	sp, r7
 8004232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004236:	4770      	bx	lr
 8004238:	20000010 	.word	0x20000010
 800423c:	431bde83 	.word	0x431bde83

08004240 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004240:	b480      	push	{r7}
 8004242:	b085      	sub	sp, #20
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	f003 0307 	and.w	r3, r3, #7
 800424e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004250:	4b0c      	ldr	r3, [pc, #48]	; (8004284 <__NVIC_SetPriorityGrouping+0x44>)
 8004252:	68db      	ldr	r3, [r3, #12]
 8004254:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004256:	68ba      	ldr	r2, [r7, #8]
 8004258:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800425c:	4013      	ands	r3, r2
 800425e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004268:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800426c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004270:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004272:	4a04      	ldr	r2, [pc, #16]	; (8004284 <__NVIC_SetPriorityGrouping+0x44>)
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	60d3      	str	r3, [r2, #12]
}
 8004278:	bf00      	nop
 800427a:	3714      	adds	r7, #20
 800427c:	46bd      	mov	sp, r7
 800427e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004282:	4770      	bx	lr
 8004284:	e000ed00 	.word	0xe000ed00

08004288 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004288:	b480      	push	{r7}
 800428a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800428c:	4b04      	ldr	r3, [pc, #16]	; (80042a0 <__NVIC_GetPriorityGrouping+0x18>)
 800428e:	68db      	ldr	r3, [r3, #12]
 8004290:	0a1b      	lsrs	r3, r3, #8
 8004292:	f003 0307 	and.w	r3, r3, #7
}
 8004296:	4618      	mov	r0, r3
 8004298:	46bd      	mov	sp, r7
 800429a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429e:	4770      	bx	lr
 80042a0:	e000ed00 	.word	0xe000ed00

080042a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80042a4:	b480      	push	{r7}
 80042a6:	b083      	sub	sp, #12
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	4603      	mov	r3, r0
 80042ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80042ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	db0b      	blt.n	80042ce <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80042b6:	79fb      	ldrb	r3, [r7, #7]
 80042b8:	f003 021f 	and.w	r2, r3, #31
 80042bc:	4907      	ldr	r1, [pc, #28]	; (80042dc <__NVIC_EnableIRQ+0x38>)
 80042be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042c2:	095b      	lsrs	r3, r3, #5
 80042c4:	2001      	movs	r0, #1
 80042c6:	fa00 f202 	lsl.w	r2, r0, r2
 80042ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80042ce:	bf00      	nop
 80042d0:	370c      	adds	r7, #12
 80042d2:	46bd      	mov	sp, r7
 80042d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d8:	4770      	bx	lr
 80042da:	bf00      	nop
 80042dc:	e000e100 	.word	0xe000e100

080042e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80042e0:	b480      	push	{r7}
 80042e2:	b083      	sub	sp, #12
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	4603      	mov	r3, r0
 80042e8:	6039      	str	r1, [r7, #0]
 80042ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80042ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	db0a      	blt.n	800430a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	b2da      	uxtb	r2, r3
 80042f8:	490c      	ldr	r1, [pc, #48]	; (800432c <__NVIC_SetPriority+0x4c>)
 80042fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042fe:	0112      	lsls	r2, r2, #4
 8004300:	b2d2      	uxtb	r2, r2
 8004302:	440b      	add	r3, r1
 8004304:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004308:	e00a      	b.n	8004320 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	b2da      	uxtb	r2, r3
 800430e:	4908      	ldr	r1, [pc, #32]	; (8004330 <__NVIC_SetPriority+0x50>)
 8004310:	79fb      	ldrb	r3, [r7, #7]
 8004312:	f003 030f 	and.w	r3, r3, #15
 8004316:	3b04      	subs	r3, #4
 8004318:	0112      	lsls	r2, r2, #4
 800431a:	b2d2      	uxtb	r2, r2
 800431c:	440b      	add	r3, r1
 800431e:	761a      	strb	r2, [r3, #24]
}
 8004320:	bf00      	nop
 8004322:	370c      	adds	r7, #12
 8004324:	46bd      	mov	sp, r7
 8004326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432a:	4770      	bx	lr
 800432c:	e000e100 	.word	0xe000e100
 8004330:	e000ed00 	.word	0xe000ed00

08004334 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004334:	b480      	push	{r7}
 8004336:	b089      	sub	sp, #36	; 0x24
 8004338:	af00      	add	r7, sp, #0
 800433a:	60f8      	str	r0, [r7, #12]
 800433c:	60b9      	str	r1, [r7, #8]
 800433e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	f003 0307 	and.w	r3, r3, #7
 8004346:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004348:	69fb      	ldr	r3, [r7, #28]
 800434a:	f1c3 0307 	rsb	r3, r3, #7
 800434e:	2b04      	cmp	r3, #4
 8004350:	bf28      	it	cs
 8004352:	2304      	movcs	r3, #4
 8004354:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004356:	69fb      	ldr	r3, [r7, #28]
 8004358:	3304      	adds	r3, #4
 800435a:	2b06      	cmp	r3, #6
 800435c:	d902      	bls.n	8004364 <NVIC_EncodePriority+0x30>
 800435e:	69fb      	ldr	r3, [r7, #28]
 8004360:	3b03      	subs	r3, #3
 8004362:	e000      	b.n	8004366 <NVIC_EncodePriority+0x32>
 8004364:	2300      	movs	r3, #0
 8004366:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004368:	f04f 32ff 	mov.w	r2, #4294967295
 800436c:	69bb      	ldr	r3, [r7, #24]
 800436e:	fa02 f303 	lsl.w	r3, r2, r3
 8004372:	43da      	mvns	r2, r3
 8004374:	68bb      	ldr	r3, [r7, #8]
 8004376:	401a      	ands	r2, r3
 8004378:	697b      	ldr	r3, [r7, #20]
 800437a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800437c:	f04f 31ff 	mov.w	r1, #4294967295
 8004380:	697b      	ldr	r3, [r7, #20]
 8004382:	fa01 f303 	lsl.w	r3, r1, r3
 8004386:	43d9      	mvns	r1, r3
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800438c:	4313      	orrs	r3, r2
         );
}
 800438e:	4618      	mov	r0, r3
 8004390:	3724      	adds	r7, #36	; 0x24
 8004392:	46bd      	mov	sp, r7
 8004394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004398:	4770      	bx	lr
	...

0800439c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b082      	sub	sp, #8
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	3b01      	subs	r3, #1
 80043a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80043ac:	d301      	bcc.n	80043b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80043ae:	2301      	movs	r3, #1
 80043b0:	e00f      	b.n	80043d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80043b2:	4a0a      	ldr	r2, [pc, #40]	; (80043dc <SysTick_Config+0x40>)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	3b01      	subs	r3, #1
 80043b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80043ba:	210f      	movs	r1, #15
 80043bc:	f04f 30ff 	mov.w	r0, #4294967295
 80043c0:	f7ff ff8e 	bl	80042e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80043c4:	4b05      	ldr	r3, [pc, #20]	; (80043dc <SysTick_Config+0x40>)
 80043c6:	2200      	movs	r2, #0
 80043c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80043ca:	4b04      	ldr	r3, [pc, #16]	; (80043dc <SysTick_Config+0x40>)
 80043cc:	2207      	movs	r2, #7
 80043ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80043d0:	2300      	movs	r3, #0
}
 80043d2:	4618      	mov	r0, r3
 80043d4:	3708      	adds	r7, #8
 80043d6:	46bd      	mov	sp, r7
 80043d8:	bd80      	pop	{r7, pc}
 80043da:	bf00      	nop
 80043dc:	e000e010 	.word	0xe000e010

080043e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b082      	sub	sp, #8
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80043e8:	6878      	ldr	r0, [r7, #4]
 80043ea:	f7ff ff29 	bl	8004240 <__NVIC_SetPriorityGrouping>
}
 80043ee:	bf00      	nop
 80043f0:	3708      	adds	r7, #8
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bd80      	pop	{r7, pc}

080043f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80043f6:	b580      	push	{r7, lr}
 80043f8:	b086      	sub	sp, #24
 80043fa:	af00      	add	r7, sp, #0
 80043fc:	4603      	mov	r3, r0
 80043fe:	60b9      	str	r1, [r7, #8]
 8004400:	607a      	str	r2, [r7, #4]
 8004402:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004404:	f7ff ff40 	bl	8004288 <__NVIC_GetPriorityGrouping>
 8004408:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800440a:	687a      	ldr	r2, [r7, #4]
 800440c:	68b9      	ldr	r1, [r7, #8]
 800440e:	6978      	ldr	r0, [r7, #20]
 8004410:	f7ff ff90 	bl	8004334 <NVIC_EncodePriority>
 8004414:	4602      	mov	r2, r0
 8004416:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800441a:	4611      	mov	r1, r2
 800441c:	4618      	mov	r0, r3
 800441e:	f7ff ff5f 	bl	80042e0 <__NVIC_SetPriority>
}
 8004422:	bf00      	nop
 8004424:	3718      	adds	r7, #24
 8004426:	46bd      	mov	sp, r7
 8004428:	bd80      	pop	{r7, pc}

0800442a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800442a:	b580      	push	{r7, lr}
 800442c:	b082      	sub	sp, #8
 800442e:	af00      	add	r7, sp, #0
 8004430:	4603      	mov	r3, r0
 8004432:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004434:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004438:	4618      	mov	r0, r3
 800443a:	f7ff ff33 	bl	80042a4 <__NVIC_EnableIRQ>
}
 800443e:	bf00      	nop
 8004440:	3708      	adds	r7, #8
 8004442:	46bd      	mov	sp, r7
 8004444:	bd80      	pop	{r7, pc}

08004446 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004446:	b580      	push	{r7, lr}
 8004448:	b082      	sub	sp, #8
 800444a:	af00      	add	r7, sp, #0
 800444c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800444e:	6878      	ldr	r0, [r7, #4]
 8004450:	f7ff ffa4 	bl	800439c <SysTick_Config>
 8004454:	4603      	mov	r3, r0
}
 8004456:	4618      	mov	r0, r3
 8004458:	3708      	adds	r7, #8
 800445a:	46bd      	mov	sp, r7
 800445c:	bd80      	pop	{r7, pc}

0800445e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800445e:	b580      	push	{r7, lr}
 8004460:	b082      	sub	sp, #8
 8004462:	af00      	add	r7, sp, #0
 8004464:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d101      	bne.n	8004470 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 800446c:	2301      	movs	r3, #1
 800446e:	e014      	b.n	800449a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	791b      	ldrb	r3, [r3, #4]
 8004474:	b2db      	uxtb	r3, r3
 8004476:	2b00      	cmp	r3, #0
 8004478:	d105      	bne.n	8004486 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2200      	movs	r2, #0
 800447e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8004480:	6878      	ldr	r0, [r7, #4]
 8004482:	f7fd f8c3 	bl	800160c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2202      	movs	r2, #2
 800448a:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2200      	movs	r2, #0
 8004490:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2201      	movs	r2, #1
 8004496:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8004498:	2300      	movs	r3, #0
}
 800449a:	4618      	mov	r0, r3
 800449c:	3708      	adds	r7, #8
 800449e:	46bd      	mov	sp, r7
 80044a0:	bd80      	pop	{r7, pc}
	...

080044a4 <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b08a      	sub	sp, #40	; 0x28
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	60f8      	str	r0, [r7, #12]
 80044ac:	60b9      	str	r1, [r7, #8]
 80044ae:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	795b      	ldrb	r3, [r3, #5]
 80044b4:	2b01      	cmp	r3, #1
 80044b6:	d101      	bne.n	80044bc <HAL_DAC_ConfigChannel+0x18>
 80044b8:	2302      	movs	r3, #2
 80044ba:	e192      	b.n	80047e2 <HAL_DAC_ConfigChannel+0x33e>
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	2201      	movs	r2, #1
 80044c0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	2202      	movs	r2, #2
 80044c6:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	689b      	ldr	r3, [r3, #8]
 80044cc:	2b04      	cmp	r3, #4
 80044ce:	d174      	bne.n	80045ba <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80044d0:	f7fd faa2 	bl	8001a18 <HAL_GetTick>
 80044d4:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d134      	bne.n	8004546 <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80044dc:	e011      	b.n	8004502 <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80044de:	f7fd fa9b 	bl	8001a18 <HAL_GetTick>
 80044e2:	4602      	mov	r2, r0
 80044e4:	69fb      	ldr	r3, [r7, #28]
 80044e6:	1ad3      	subs	r3, r2, r3
 80044e8:	2b01      	cmp	r3, #1
 80044ea:	d90a      	bls.n	8004502 <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	691b      	ldr	r3, [r3, #16]
 80044f0:	f043 0208 	orr.w	r2, r3, #8
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	2203      	movs	r2, #3
 80044fc:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80044fe:	2303      	movs	r3, #3
 8004500:	e16f      	b.n	80047e2 <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004508:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800450c:	2b00      	cmp	r3, #0
 800450e:	d1e6      	bne.n	80044de <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 8004510:	2001      	movs	r0, #1
 8004512:	f7fd fa8d 	bl	8001a30 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	68ba      	ldr	r2, [r7, #8]
 800451c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800451e:	641a      	str	r2, [r3, #64]	; 0x40
 8004520:	e01e      	b.n	8004560 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004522:	f7fd fa79 	bl	8001a18 <HAL_GetTick>
 8004526:	4602      	mov	r2, r0
 8004528:	69fb      	ldr	r3, [r7, #28]
 800452a:	1ad3      	subs	r3, r2, r3
 800452c:	2b01      	cmp	r3, #1
 800452e:	d90a      	bls.n	8004546 <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	691b      	ldr	r3, [r3, #16]
 8004534:	f043 0208 	orr.w	r2, r3, #8
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	2203      	movs	r2, #3
 8004540:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8004542:	2303      	movs	r3, #3
 8004544:	e14d      	b.n	80047e2 <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800454c:	2b00      	cmp	r3, #0
 800454e:	dbe8      	blt.n	8004522 <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 8004550:	2001      	movs	r0, #1
 8004552:	f7fd fa6d 	bl	8001a30 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	68ba      	ldr	r2, [r7, #8]
 800455c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800455e:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	f003 0310 	and.w	r3, r3, #16
 800456c:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8004570:	fa01 f303 	lsl.w	r3, r1, r3
 8004574:	43db      	mvns	r3, r3
 8004576:	ea02 0103 	and.w	r1, r2, r3
 800457a:	68bb      	ldr	r3, [r7, #8]
 800457c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	f003 0310 	and.w	r3, r3, #16
 8004584:	409a      	lsls	r2, r3
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	430a      	orrs	r2, r1
 800458c:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	f003 0310 	and.w	r3, r3, #16
 800459a:	21ff      	movs	r1, #255	; 0xff
 800459c:	fa01 f303 	lsl.w	r3, r1, r3
 80045a0:	43db      	mvns	r3, r3
 80045a2:	ea02 0103 	and.w	r1, r2, r3
 80045a6:	68bb      	ldr	r3, [r7, #8]
 80045a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	f003 0310 	and.w	r3, r3, #16
 80045b0:	409a      	lsls	r2, r3
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	430a      	orrs	r2, r1
 80045b8:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80045ba:	68bb      	ldr	r3, [r7, #8]
 80045bc:	69db      	ldr	r3, [r3, #28]
 80045be:	2b01      	cmp	r3, #1
 80045c0:	d11d      	bne.n	80045fe <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045c8:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	f003 0310 	and.w	r3, r3, #16
 80045d0:	221f      	movs	r2, #31
 80045d2:	fa02 f303 	lsl.w	r3, r2, r3
 80045d6:	43db      	mvns	r3, r3
 80045d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045da:	4013      	ands	r3, r2
 80045dc:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80045de:	68bb      	ldr	r3, [r7, #8]
 80045e0:	6a1b      	ldr	r3, [r3, #32]
 80045e2:	61bb      	str	r3, [r7, #24]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	f003 0310 	and.w	r3, r3, #16
 80045ea:	69ba      	ldr	r2, [r7, #24]
 80045ec:	fa02 f303 	lsl.w	r3, r2, r3
 80045f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045f2:	4313      	orrs	r3, r2
 80045f4:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045fc:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004604:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	f003 0310 	and.w	r3, r3, #16
 800460c:	2207      	movs	r2, #7
 800460e:	fa02 f303 	lsl.w	r3, r2, r3
 8004612:	43db      	mvns	r3, r3
 8004614:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004616:	4013      	ands	r3, r2
 8004618:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 800461a:	68bb      	ldr	r3, [r7, #8]
 800461c:	699b      	ldr	r3, [r3, #24]
 800461e:	2b01      	cmp	r3, #1
 8004620:	d102      	bne.n	8004628 <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 8004622:	2300      	movs	r3, #0
 8004624:	623b      	str	r3, [r7, #32]
 8004626:	e00f      	b.n	8004648 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8004628:	68bb      	ldr	r3, [r7, #8]
 800462a:	699b      	ldr	r3, [r3, #24]
 800462c:	2b02      	cmp	r3, #2
 800462e:	d102      	bne.n	8004636 <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8004630:	2301      	movs	r3, #1
 8004632:	623b      	str	r3, [r7, #32]
 8004634:	e008      	b.n	8004648 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8004636:	68bb      	ldr	r3, [r7, #8]
 8004638:	695b      	ldr	r3, [r3, #20]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d102      	bne.n	8004644 <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 800463e:	2301      	movs	r3, #1
 8004640:	623b      	str	r3, [r7, #32]
 8004642:	e001      	b.n	8004648 <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8004644:	2300      	movs	r3, #0
 8004646:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	689a      	ldr	r2, [r3, #8]
 800464c:	68bb      	ldr	r3, [r7, #8]
 800464e:	695b      	ldr	r3, [r3, #20]
 8004650:	4313      	orrs	r3, r2
 8004652:	6a3a      	ldr	r2, [r7, #32]
 8004654:	4313      	orrs	r3, r2
 8004656:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	f003 0310 	and.w	r3, r3, #16
 800465e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004662:	fa02 f303 	lsl.w	r3, r2, r3
 8004666:	43db      	mvns	r3, r3
 8004668:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800466a:	4013      	ands	r3, r2
 800466c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 800466e:	68bb      	ldr	r3, [r7, #8]
 8004670:	791b      	ldrb	r3, [r3, #4]
 8004672:	2b01      	cmp	r3, #1
 8004674:	d102      	bne.n	800467c <HAL_DAC_ConfigChannel+0x1d8>
 8004676:	f44f 7380 	mov.w	r3, #256	; 0x100
 800467a:	e000      	b.n	800467e <HAL_DAC_ConfigChannel+0x1da>
 800467c:	2300      	movs	r3, #0
 800467e:	69ba      	ldr	r2, [r7, #24]
 8004680:	4313      	orrs	r3, r2
 8004682:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	f003 0310 	and.w	r3, r3, #16
 800468a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800468e:	fa02 f303 	lsl.w	r3, r2, r3
 8004692:	43db      	mvns	r3, r3
 8004694:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004696:	4013      	ands	r3, r2
 8004698:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 800469a:	68bb      	ldr	r3, [r7, #8]
 800469c:	795b      	ldrb	r3, [r3, #5]
 800469e:	2b01      	cmp	r3, #1
 80046a0:	d102      	bne.n	80046a8 <HAL_DAC_ConfigChannel+0x204>
 80046a2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80046a6:	e000      	b.n	80046aa <HAL_DAC_ConfigChannel+0x206>
 80046a8:	2300      	movs	r3, #0
 80046aa:	69ba      	ldr	r2, [r7, #24]
 80046ac:	4313      	orrs	r3, r2
 80046ae:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 80046b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046b2:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80046b6:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 80046b8:	68bb      	ldr	r3, [r7, #8]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	2b02      	cmp	r3, #2
 80046be:	d114      	bne.n	80046ea <HAL_DAC_ConfigChannel+0x246>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 80046c0:	f001 f960 	bl	8005984 <HAL_RCC_GetHCLKFreq>
 80046c4:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 80046c6:	697b      	ldr	r3, [r7, #20]
 80046c8:	4a48      	ldr	r2, [pc, #288]	; (80047ec <HAL_DAC_ConfigChannel+0x348>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d904      	bls.n	80046d8 <HAL_DAC_ConfigChannel+0x234>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 80046ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046d4:	627b      	str	r3, [r7, #36]	; 0x24
 80046d6:	e00f      	b.n	80046f8 <HAL_DAC_ConfigChannel+0x254>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 80046d8:	697b      	ldr	r3, [r7, #20]
 80046da:	4a45      	ldr	r2, [pc, #276]	; (80047f0 <HAL_DAC_ConfigChannel+0x34c>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d90a      	bls.n	80046f6 <HAL_DAC_ConfigChannel+0x252>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 80046e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80046e6:	627b      	str	r3, [r7, #36]	; 0x24
 80046e8:	e006      	b.n	80046f8 <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 80046ea:	68bb      	ldr	r3, [r7, #8]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046f0:	4313      	orrs	r3, r2
 80046f2:	627b      	str	r3, [r7, #36]	; 0x24
 80046f4:	e000      	b.n	80046f8 <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 80046f6:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	f003 0310 	and.w	r3, r3, #16
 80046fe:	69ba      	ldr	r2, [r7, #24]
 8004700:	fa02 f303 	lsl.w	r3, r2, r3
 8004704:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004706:	4313      	orrs	r3, r2
 8004708:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004710:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	6819      	ldr	r1, [r3, #0]
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	f003 0310 	and.w	r3, r3, #16
 800471e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004722:	fa02 f303 	lsl.w	r3, r2, r3
 8004726:	43da      	mvns	r2, r3
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	400a      	ands	r2, r1
 800472e:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	f003 0310 	and.w	r3, r3, #16
 800473e:	f640 72fe 	movw	r2, #4094	; 0xffe
 8004742:	fa02 f303 	lsl.w	r3, r2, r3
 8004746:	43db      	mvns	r3, r3
 8004748:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800474a:	4013      	ands	r3, r2
 800474c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800474e:	68bb      	ldr	r3, [r7, #8]
 8004750:	68db      	ldr	r3, [r3, #12]
 8004752:	61bb      	str	r3, [r7, #24]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	f003 0310 	and.w	r3, r3, #16
 800475a:	69ba      	ldr	r2, [r7, #24]
 800475c:	fa02 f303 	lsl.w	r3, r2, r3
 8004760:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004762:	4313      	orrs	r3, r2
 8004764:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800476c:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	6819      	ldr	r1, [r3, #0]
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	f003 0310 	and.w	r3, r3, #16
 800477a:	22c0      	movs	r2, #192	; 0xc0
 800477c:	fa02 f303 	lsl.w	r3, r2, r3
 8004780:	43da      	mvns	r2, r3
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	400a      	ands	r2, r1
 8004788:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 800478a:	68bb      	ldr	r3, [r7, #8]
 800478c:	68db      	ldr	r3, [r3, #12]
 800478e:	089b      	lsrs	r3, r3, #2
 8004790:	f003 030f 	and.w	r3, r3, #15
 8004794:	61bb      	str	r3, [r7, #24]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8004796:	68bb      	ldr	r3, [r7, #8]
 8004798:	691b      	ldr	r3, [r3, #16]
 800479a:	089b      	lsrs	r3, r3, #2
 800479c:	021b      	lsls	r3, r3, #8
 800479e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80047a2:	69ba      	ldr	r2, [r7, #24]
 80047a4:	4313      	orrs	r3, r2
 80047a6:	61bb      	str	r3, [r7, #24]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	f003 0310 	and.w	r3, r3, #16
 80047b4:	f640 710f 	movw	r1, #3855	; 0xf0f
 80047b8:	fa01 f303 	lsl.w	r3, r1, r3
 80047bc:	43db      	mvns	r3, r3
 80047be:	ea02 0103 	and.w	r1, r2, r3
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	f003 0310 	and.w	r3, r3, #16
 80047c8:	69ba      	ldr	r2, [r7, #24]
 80047ca:	409a      	lsls	r2, r3
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	430a      	orrs	r2, r1
 80047d2:	661a      	str	r2, [r3, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	2201      	movs	r2, #1
 80047d8:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	2200      	movs	r2, #0
 80047de:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80047e0:	2300      	movs	r3, #0
}
 80047e2:	4618      	mov	r0, r3
 80047e4:	3728      	adds	r7, #40	; 0x28
 80047e6:	46bd      	mov	sp, r7
 80047e8:	bd80      	pop	{r7, pc}
 80047ea:	bf00      	nop
 80047ec:	09896800 	.word	0x09896800
 80047f0:	04c4b400 	.word	0x04c4b400

080047f4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b084      	sub	sp, #16
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d101      	bne.n	8004806 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004802:	2301      	movs	r3, #1
 8004804:	e08d      	b.n	8004922 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	461a      	mov	r2, r3
 800480c:	4b47      	ldr	r3, [pc, #284]	; (800492c <HAL_DMA_Init+0x138>)
 800480e:	429a      	cmp	r2, r3
 8004810:	d80f      	bhi.n	8004832 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	461a      	mov	r2, r3
 8004818:	4b45      	ldr	r3, [pc, #276]	; (8004930 <HAL_DMA_Init+0x13c>)
 800481a:	4413      	add	r3, r2
 800481c:	4a45      	ldr	r2, [pc, #276]	; (8004934 <HAL_DMA_Init+0x140>)
 800481e:	fba2 2303 	umull	r2, r3, r2, r3
 8004822:	091b      	lsrs	r3, r3, #4
 8004824:	009a      	lsls	r2, r3, #2
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	4a42      	ldr	r2, [pc, #264]	; (8004938 <HAL_DMA_Init+0x144>)
 800482e:	641a      	str	r2, [r3, #64]	; 0x40
 8004830:	e00e      	b.n	8004850 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	461a      	mov	r2, r3
 8004838:	4b40      	ldr	r3, [pc, #256]	; (800493c <HAL_DMA_Init+0x148>)
 800483a:	4413      	add	r3, r2
 800483c:	4a3d      	ldr	r2, [pc, #244]	; (8004934 <HAL_DMA_Init+0x140>)
 800483e:	fba2 2303 	umull	r2, r3, r2, r3
 8004842:	091b      	lsrs	r3, r3, #4
 8004844:	009a      	lsls	r2, r3, #2
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	4a3c      	ldr	r2, [pc, #240]	; (8004940 <HAL_DMA_Init+0x14c>)
 800484e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2202      	movs	r2, #2
 8004854:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8004866:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800486a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004874:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	691b      	ldr	r3, [r3, #16]
 800487a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004880:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	699b      	ldr	r3, [r3, #24]
 8004886:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800488c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6a1b      	ldr	r3, [r3, #32]
 8004892:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004894:	68fa      	ldr	r2, [r7, #12]
 8004896:	4313      	orrs	r3, r2
 8004898:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	68fa      	ldr	r2, [r7, #12]
 80048a0:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80048a2:	6878      	ldr	r0, [r7, #4]
 80048a4:	f000 f908 	bl	8004ab8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	689b      	ldr	r3, [r3, #8]
 80048ac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80048b0:	d102      	bne.n	80048b8 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2200      	movs	r2, #0
 80048b6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	685a      	ldr	r2, [r3, #4]
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048c0:	b2d2      	uxtb	r2, r2
 80048c2:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048c8:	687a      	ldr	r2, [r7, #4]
 80048ca:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80048cc:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	685b      	ldr	r3, [r3, #4]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d010      	beq.n	80048f8 <HAL_DMA_Init+0x104>
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	685b      	ldr	r3, [r3, #4]
 80048da:	2b04      	cmp	r3, #4
 80048dc:	d80c      	bhi.n	80048f8 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80048de:	6878      	ldr	r0, [r7, #4]
 80048e0:	f000 f928 	bl	8004b34 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048e8:	2200      	movs	r2, #0
 80048ea:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048f0:	687a      	ldr	r2, [r7, #4]
 80048f2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80048f4:	605a      	str	r2, [r3, #4]
 80048f6:	e008      	b.n	800490a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2200      	movs	r2, #0
 80048fc:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2200      	movs	r2, #0
 8004902:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2200      	movs	r2, #0
 8004908:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2200      	movs	r2, #0
 800490e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2201      	movs	r2, #1
 8004914:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2200      	movs	r2, #0
 800491c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004920:	2300      	movs	r3, #0
}
 8004922:	4618      	mov	r0, r3
 8004924:	3710      	adds	r7, #16
 8004926:	46bd      	mov	sp, r7
 8004928:	bd80      	pop	{r7, pc}
 800492a:	bf00      	nop
 800492c:	40020407 	.word	0x40020407
 8004930:	bffdfff8 	.word	0xbffdfff8
 8004934:	cccccccd 	.word	0xcccccccd
 8004938:	40020000 	.word	0x40020000
 800493c:	bffdfbf8 	.word	0xbffdfbf8
 8004940:	40020400 	.word	0x40020400

08004944 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b086      	sub	sp, #24
 8004948:	af00      	add	r7, sp, #0
 800494a:	60f8      	str	r0, [r7, #12]
 800494c:	60b9      	str	r1, [r7, #8]
 800494e:	607a      	str	r2, [r7, #4]
 8004950:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004952:	2300      	movs	r3, #0
 8004954:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800495c:	2b01      	cmp	r3, #1
 800495e:	d101      	bne.n	8004964 <HAL_DMA_Start_IT+0x20>
 8004960:	2302      	movs	r3, #2
 8004962:	e066      	b.n	8004a32 <HAL_DMA_Start_IT+0xee>
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	2201      	movs	r2, #1
 8004968:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004972:	b2db      	uxtb	r3, r3
 8004974:	2b01      	cmp	r3, #1
 8004976:	d155      	bne.n	8004a24 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	2202      	movs	r2, #2
 800497c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	2200      	movs	r2, #0
 8004984:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	681a      	ldr	r2, [r3, #0]
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f022 0201 	bic.w	r2, r2, #1
 8004994:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	687a      	ldr	r2, [r7, #4]
 800499a:	68b9      	ldr	r1, [r7, #8]
 800499c:	68f8      	ldr	r0, [r7, #12]
 800499e:	f000 f84c 	bl	8004a3a <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d008      	beq.n	80049bc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	681a      	ldr	r2, [r3, #0]
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f042 020e 	orr.w	r2, r2, #14
 80049b8:	601a      	str	r2, [r3, #0]
 80049ba:	e00f      	b.n	80049dc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	681a      	ldr	r2, [r3, #0]
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f022 0204 	bic.w	r2, r2, #4
 80049ca:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	681a      	ldr	r2, [r3, #0]
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f042 020a 	orr.w	r2, r2, #10
 80049da:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d007      	beq.n	80049fa <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049ee:	681a      	ldr	r2, [r3, #0]
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80049f8:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d007      	beq.n	8004a12 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a06:	681a      	ldr	r2, [r3, #0]
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a0c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a10:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	681a      	ldr	r2, [r3, #0]
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f042 0201 	orr.w	r2, r2, #1
 8004a20:	601a      	str	r2, [r3, #0]
 8004a22:	e005      	b.n	8004a30 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	2200      	movs	r2, #0
 8004a28:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004a2c:	2302      	movs	r3, #2
 8004a2e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004a30:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a32:	4618      	mov	r0, r3
 8004a34:	3718      	adds	r7, #24
 8004a36:	46bd      	mov	sp, r7
 8004a38:	bd80      	pop	{r7, pc}

08004a3a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004a3a:	b480      	push	{r7}
 8004a3c:	b085      	sub	sp, #20
 8004a3e:	af00      	add	r7, sp, #0
 8004a40:	60f8      	str	r0, [r7, #12]
 8004a42:	60b9      	str	r1, [r7, #8]
 8004a44:	607a      	str	r2, [r7, #4]
 8004a46:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a4c:	68fa      	ldr	r2, [r7, #12]
 8004a4e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004a50:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d004      	beq.n	8004a64 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a5e:	68fa      	ldr	r2, [r7, #12]
 8004a60:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004a62:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a68:	f003 021f 	and.w	r2, r3, #31
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a70:	2101      	movs	r1, #1
 8004a72:	fa01 f202 	lsl.w	r2, r1, r2
 8004a76:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	683a      	ldr	r2, [r7, #0]
 8004a7e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	689b      	ldr	r3, [r3, #8]
 8004a84:	2b10      	cmp	r3, #16
 8004a86:	d108      	bne.n	8004a9a <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	687a      	ldr	r2, [r7, #4]
 8004a8e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	68ba      	ldr	r2, [r7, #8]
 8004a96:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004a98:	e007      	b.n	8004aaa <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	68ba      	ldr	r2, [r7, #8]
 8004aa0:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	687a      	ldr	r2, [r7, #4]
 8004aa8:	60da      	str	r2, [r3, #12]
}
 8004aaa:	bf00      	nop
 8004aac:	3714      	adds	r7, #20
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab4:	4770      	bx	lr
	...

08004ab8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004ab8:	b480      	push	{r7}
 8004aba:	b087      	sub	sp, #28
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	461a      	mov	r2, r3
 8004ac6:	4b16      	ldr	r3, [pc, #88]	; (8004b20 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8004ac8:	429a      	cmp	r2, r3
 8004aca:	d802      	bhi.n	8004ad2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8004acc:	4b15      	ldr	r3, [pc, #84]	; (8004b24 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8004ace:	617b      	str	r3, [r7, #20]
 8004ad0:	e001      	b.n	8004ad6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8004ad2:	4b15      	ldr	r3, [pc, #84]	; (8004b28 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004ad4:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8004ad6:	697b      	ldr	r3, [r7, #20]
 8004ad8:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	b2db      	uxtb	r3, r3
 8004ae0:	3b08      	subs	r3, #8
 8004ae2:	4a12      	ldr	r2, [pc, #72]	; (8004b2c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8004ae4:	fba2 2303 	umull	r2, r3, r2, r3
 8004ae8:	091b      	lsrs	r3, r3, #4
 8004aea:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004af0:	089b      	lsrs	r3, r3, #2
 8004af2:	009a      	lsls	r2, r3, #2
 8004af4:	693b      	ldr	r3, [r7, #16]
 8004af6:	4413      	add	r3, r2
 8004af8:	461a      	mov	r2, r3
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	4a0b      	ldr	r2, [pc, #44]	; (8004b30 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8004b02:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	f003 031f 	and.w	r3, r3, #31
 8004b0a:	2201      	movs	r2, #1
 8004b0c:	409a      	lsls	r2, r3
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004b12:	bf00      	nop
 8004b14:	371c      	adds	r7, #28
 8004b16:	46bd      	mov	sp, r7
 8004b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1c:	4770      	bx	lr
 8004b1e:	bf00      	nop
 8004b20:	40020407 	.word	0x40020407
 8004b24:	40020800 	.word	0x40020800
 8004b28:	40020820 	.word	0x40020820
 8004b2c:	cccccccd 	.word	0xcccccccd
 8004b30:	40020880 	.word	0x40020880

08004b34 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004b34:	b480      	push	{r7}
 8004b36:	b085      	sub	sp, #20
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	685b      	ldr	r3, [r3, #4]
 8004b40:	b2db      	uxtb	r3, r3
 8004b42:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004b44:	68fa      	ldr	r2, [r7, #12]
 8004b46:	4b0b      	ldr	r3, [pc, #44]	; (8004b74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004b48:	4413      	add	r3, r2
 8004b4a:	009b      	lsls	r3, r3, #2
 8004b4c:	461a      	mov	r2, r3
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	4a08      	ldr	r2, [pc, #32]	; (8004b78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004b56:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	3b01      	subs	r3, #1
 8004b5c:	f003 031f 	and.w	r3, r3, #31
 8004b60:	2201      	movs	r2, #1
 8004b62:	409a      	lsls	r2, r3
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8004b68:	bf00      	nop
 8004b6a:	3714      	adds	r7, #20
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b72:	4770      	bx	lr
 8004b74:	1000823f 	.word	0x1000823f
 8004b78:	40020940 	.word	0x40020940

08004b7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004b7c:	b480      	push	{r7}
 8004b7e:	b087      	sub	sp, #28
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
 8004b84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004b86:	2300      	movs	r3, #0
 8004b88:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004b8a:	e15a      	b.n	8004e42 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	681a      	ldr	r2, [r3, #0]
 8004b90:	2101      	movs	r1, #1
 8004b92:	697b      	ldr	r3, [r7, #20]
 8004b94:	fa01 f303 	lsl.w	r3, r1, r3
 8004b98:	4013      	ands	r3, r2
 8004b9a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	f000 814c 	beq.w	8004e3c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	685b      	ldr	r3, [r3, #4]
 8004ba8:	f003 0303 	and.w	r3, r3, #3
 8004bac:	2b01      	cmp	r3, #1
 8004bae:	d005      	beq.n	8004bbc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	685b      	ldr	r3, [r3, #4]
 8004bb4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004bb8:	2b02      	cmp	r3, #2
 8004bba:	d130      	bne.n	8004c1e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	689b      	ldr	r3, [r3, #8]
 8004bc0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004bc2:	697b      	ldr	r3, [r7, #20]
 8004bc4:	005b      	lsls	r3, r3, #1
 8004bc6:	2203      	movs	r2, #3
 8004bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8004bcc:	43db      	mvns	r3, r3
 8004bce:	693a      	ldr	r2, [r7, #16]
 8004bd0:	4013      	ands	r3, r2
 8004bd2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	68da      	ldr	r2, [r3, #12]
 8004bd8:	697b      	ldr	r3, [r7, #20]
 8004bda:	005b      	lsls	r3, r3, #1
 8004bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8004be0:	693a      	ldr	r2, [r7, #16]
 8004be2:	4313      	orrs	r3, r2
 8004be4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	693a      	ldr	r2, [r7, #16]
 8004bea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	685b      	ldr	r3, [r3, #4]
 8004bf0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004bf2:	2201      	movs	r2, #1
 8004bf4:	697b      	ldr	r3, [r7, #20]
 8004bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8004bfa:	43db      	mvns	r3, r3
 8004bfc:	693a      	ldr	r2, [r7, #16]
 8004bfe:	4013      	ands	r3, r2
 8004c00:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	685b      	ldr	r3, [r3, #4]
 8004c06:	091b      	lsrs	r3, r3, #4
 8004c08:	f003 0201 	and.w	r2, r3, #1
 8004c0c:	697b      	ldr	r3, [r7, #20]
 8004c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c12:	693a      	ldr	r2, [r7, #16]
 8004c14:	4313      	orrs	r3, r2
 8004c16:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	693a      	ldr	r2, [r7, #16]
 8004c1c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	685b      	ldr	r3, [r3, #4]
 8004c22:	f003 0303 	and.w	r3, r3, #3
 8004c26:	2b03      	cmp	r3, #3
 8004c28:	d017      	beq.n	8004c5a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	68db      	ldr	r3, [r3, #12]
 8004c2e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004c30:	697b      	ldr	r3, [r7, #20]
 8004c32:	005b      	lsls	r3, r3, #1
 8004c34:	2203      	movs	r2, #3
 8004c36:	fa02 f303 	lsl.w	r3, r2, r3
 8004c3a:	43db      	mvns	r3, r3
 8004c3c:	693a      	ldr	r2, [r7, #16]
 8004c3e:	4013      	ands	r3, r2
 8004c40:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	689a      	ldr	r2, [r3, #8]
 8004c46:	697b      	ldr	r3, [r7, #20]
 8004c48:	005b      	lsls	r3, r3, #1
 8004c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c4e:	693a      	ldr	r2, [r7, #16]
 8004c50:	4313      	orrs	r3, r2
 8004c52:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	693a      	ldr	r2, [r7, #16]
 8004c58:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	685b      	ldr	r3, [r3, #4]
 8004c5e:	f003 0303 	and.w	r3, r3, #3
 8004c62:	2b02      	cmp	r3, #2
 8004c64:	d123      	bne.n	8004cae <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004c66:	697b      	ldr	r3, [r7, #20]
 8004c68:	08da      	lsrs	r2, r3, #3
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	3208      	adds	r2, #8
 8004c6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c72:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004c74:	697b      	ldr	r3, [r7, #20]
 8004c76:	f003 0307 	and.w	r3, r3, #7
 8004c7a:	009b      	lsls	r3, r3, #2
 8004c7c:	220f      	movs	r2, #15
 8004c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c82:	43db      	mvns	r3, r3
 8004c84:	693a      	ldr	r2, [r7, #16]
 8004c86:	4013      	ands	r3, r2
 8004c88:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	691a      	ldr	r2, [r3, #16]
 8004c8e:	697b      	ldr	r3, [r7, #20]
 8004c90:	f003 0307 	and.w	r3, r3, #7
 8004c94:	009b      	lsls	r3, r3, #2
 8004c96:	fa02 f303 	lsl.w	r3, r2, r3
 8004c9a:	693a      	ldr	r2, [r7, #16]
 8004c9c:	4313      	orrs	r3, r2
 8004c9e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004ca0:	697b      	ldr	r3, [r7, #20]
 8004ca2:	08da      	lsrs	r2, r3, #3
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	3208      	adds	r2, #8
 8004ca8:	6939      	ldr	r1, [r7, #16]
 8004caa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004cb4:	697b      	ldr	r3, [r7, #20]
 8004cb6:	005b      	lsls	r3, r3, #1
 8004cb8:	2203      	movs	r2, #3
 8004cba:	fa02 f303 	lsl.w	r3, r2, r3
 8004cbe:	43db      	mvns	r3, r3
 8004cc0:	693a      	ldr	r2, [r7, #16]
 8004cc2:	4013      	ands	r3, r2
 8004cc4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	685b      	ldr	r3, [r3, #4]
 8004cca:	f003 0203 	and.w	r2, r3, #3
 8004cce:	697b      	ldr	r3, [r7, #20]
 8004cd0:	005b      	lsls	r3, r3, #1
 8004cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8004cd6:	693a      	ldr	r2, [r7, #16]
 8004cd8:	4313      	orrs	r3, r2
 8004cda:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	693a      	ldr	r2, [r7, #16]
 8004ce0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	685b      	ldr	r3, [r3, #4]
 8004ce6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	f000 80a6 	beq.w	8004e3c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004cf0:	4b5b      	ldr	r3, [pc, #364]	; (8004e60 <HAL_GPIO_Init+0x2e4>)
 8004cf2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cf4:	4a5a      	ldr	r2, [pc, #360]	; (8004e60 <HAL_GPIO_Init+0x2e4>)
 8004cf6:	f043 0301 	orr.w	r3, r3, #1
 8004cfa:	6613      	str	r3, [r2, #96]	; 0x60
 8004cfc:	4b58      	ldr	r3, [pc, #352]	; (8004e60 <HAL_GPIO_Init+0x2e4>)
 8004cfe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d00:	f003 0301 	and.w	r3, r3, #1
 8004d04:	60bb      	str	r3, [r7, #8]
 8004d06:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004d08:	4a56      	ldr	r2, [pc, #344]	; (8004e64 <HAL_GPIO_Init+0x2e8>)
 8004d0a:	697b      	ldr	r3, [r7, #20]
 8004d0c:	089b      	lsrs	r3, r3, #2
 8004d0e:	3302      	adds	r3, #2
 8004d10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d14:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004d16:	697b      	ldr	r3, [r7, #20]
 8004d18:	f003 0303 	and.w	r3, r3, #3
 8004d1c:	009b      	lsls	r3, r3, #2
 8004d1e:	220f      	movs	r2, #15
 8004d20:	fa02 f303 	lsl.w	r3, r2, r3
 8004d24:	43db      	mvns	r3, r3
 8004d26:	693a      	ldr	r2, [r7, #16]
 8004d28:	4013      	ands	r3, r2
 8004d2a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004d32:	d01f      	beq.n	8004d74 <HAL_GPIO_Init+0x1f8>
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	4a4c      	ldr	r2, [pc, #304]	; (8004e68 <HAL_GPIO_Init+0x2ec>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d019      	beq.n	8004d70 <HAL_GPIO_Init+0x1f4>
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	4a4b      	ldr	r2, [pc, #300]	; (8004e6c <HAL_GPIO_Init+0x2f0>)
 8004d40:	4293      	cmp	r3, r2
 8004d42:	d013      	beq.n	8004d6c <HAL_GPIO_Init+0x1f0>
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	4a4a      	ldr	r2, [pc, #296]	; (8004e70 <HAL_GPIO_Init+0x2f4>)
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d00d      	beq.n	8004d68 <HAL_GPIO_Init+0x1ec>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	4a49      	ldr	r2, [pc, #292]	; (8004e74 <HAL_GPIO_Init+0x2f8>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d007      	beq.n	8004d64 <HAL_GPIO_Init+0x1e8>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	4a48      	ldr	r2, [pc, #288]	; (8004e78 <HAL_GPIO_Init+0x2fc>)
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	d101      	bne.n	8004d60 <HAL_GPIO_Init+0x1e4>
 8004d5c:	2305      	movs	r3, #5
 8004d5e:	e00a      	b.n	8004d76 <HAL_GPIO_Init+0x1fa>
 8004d60:	2306      	movs	r3, #6
 8004d62:	e008      	b.n	8004d76 <HAL_GPIO_Init+0x1fa>
 8004d64:	2304      	movs	r3, #4
 8004d66:	e006      	b.n	8004d76 <HAL_GPIO_Init+0x1fa>
 8004d68:	2303      	movs	r3, #3
 8004d6a:	e004      	b.n	8004d76 <HAL_GPIO_Init+0x1fa>
 8004d6c:	2302      	movs	r3, #2
 8004d6e:	e002      	b.n	8004d76 <HAL_GPIO_Init+0x1fa>
 8004d70:	2301      	movs	r3, #1
 8004d72:	e000      	b.n	8004d76 <HAL_GPIO_Init+0x1fa>
 8004d74:	2300      	movs	r3, #0
 8004d76:	697a      	ldr	r2, [r7, #20]
 8004d78:	f002 0203 	and.w	r2, r2, #3
 8004d7c:	0092      	lsls	r2, r2, #2
 8004d7e:	4093      	lsls	r3, r2
 8004d80:	693a      	ldr	r2, [r7, #16]
 8004d82:	4313      	orrs	r3, r2
 8004d84:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004d86:	4937      	ldr	r1, [pc, #220]	; (8004e64 <HAL_GPIO_Init+0x2e8>)
 8004d88:	697b      	ldr	r3, [r7, #20]
 8004d8a:	089b      	lsrs	r3, r3, #2
 8004d8c:	3302      	adds	r3, #2
 8004d8e:	693a      	ldr	r2, [r7, #16]
 8004d90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004d94:	4b39      	ldr	r3, [pc, #228]	; (8004e7c <HAL_GPIO_Init+0x300>)
 8004d96:	689b      	ldr	r3, [r3, #8]
 8004d98:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	43db      	mvns	r3, r3
 8004d9e:	693a      	ldr	r2, [r7, #16]
 8004da0:	4013      	ands	r3, r2
 8004da2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	685b      	ldr	r3, [r3, #4]
 8004da8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d003      	beq.n	8004db8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004db0:	693a      	ldr	r2, [r7, #16]
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	4313      	orrs	r3, r2
 8004db6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004db8:	4a30      	ldr	r2, [pc, #192]	; (8004e7c <HAL_GPIO_Init+0x300>)
 8004dba:	693b      	ldr	r3, [r7, #16]
 8004dbc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004dbe:	4b2f      	ldr	r3, [pc, #188]	; (8004e7c <HAL_GPIO_Init+0x300>)
 8004dc0:	68db      	ldr	r3, [r3, #12]
 8004dc2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	43db      	mvns	r3, r3
 8004dc8:	693a      	ldr	r2, [r7, #16]
 8004dca:	4013      	ands	r3, r2
 8004dcc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	685b      	ldr	r3, [r3, #4]
 8004dd2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d003      	beq.n	8004de2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004dda:	693a      	ldr	r2, [r7, #16]
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	4313      	orrs	r3, r2
 8004de0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004de2:	4a26      	ldr	r2, [pc, #152]	; (8004e7c <HAL_GPIO_Init+0x300>)
 8004de4:	693b      	ldr	r3, [r7, #16]
 8004de6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004de8:	4b24      	ldr	r3, [pc, #144]	; (8004e7c <HAL_GPIO_Init+0x300>)
 8004dea:	685b      	ldr	r3, [r3, #4]
 8004dec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	43db      	mvns	r3, r3
 8004df2:	693a      	ldr	r2, [r7, #16]
 8004df4:	4013      	ands	r3, r2
 8004df6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	685b      	ldr	r3, [r3, #4]
 8004dfc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d003      	beq.n	8004e0c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004e04:	693a      	ldr	r2, [r7, #16]
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	4313      	orrs	r3, r2
 8004e0a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004e0c:	4a1b      	ldr	r2, [pc, #108]	; (8004e7c <HAL_GPIO_Init+0x300>)
 8004e0e:	693b      	ldr	r3, [r7, #16]
 8004e10:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004e12:	4b1a      	ldr	r3, [pc, #104]	; (8004e7c <HAL_GPIO_Init+0x300>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	43db      	mvns	r3, r3
 8004e1c:	693a      	ldr	r2, [r7, #16]
 8004e1e:	4013      	ands	r3, r2
 8004e20:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	685b      	ldr	r3, [r3, #4]
 8004e26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d003      	beq.n	8004e36 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004e2e:	693a      	ldr	r2, [r7, #16]
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	4313      	orrs	r3, r2
 8004e34:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004e36:	4a11      	ldr	r2, [pc, #68]	; (8004e7c <HAL_GPIO_Init+0x300>)
 8004e38:	693b      	ldr	r3, [r7, #16]
 8004e3a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004e3c:	697b      	ldr	r3, [r7, #20]
 8004e3e:	3301      	adds	r3, #1
 8004e40:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	681a      	ldr	r2, [r3, #0]
 8004e46:	697b      	ldr	r3, [r7, #20]
 8004e48:	fa22 f303 	lsr.w	r3, r2, r3
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	f47f ae9d 	bne.w	8004b8c <HAL_GPIO_Init+0x10>
  }
}
 8004e52:	bf00      	nop
 8004e54:	bf00      	nop
 8004e56:	371c      	adds	r7, #28
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5e:	4770      	bx	lr
 8004e60:	40021000 	.word	0x40021000
 8004e64:	40010000 	.word	0x40010000
 8004e68:	48000400 	.word	0x48000400
 8004e6c:	48000800 	.word	0x48000800
 8004e70:	48000c00 	.word	0x48000c00
 8004e74:	48001000 	.word	0x48001000
 8004e78:	48001400 	.word	0x48001400
 8004e7c:	40010400 	.word	0x40010400

08004e80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004e80:	b480      	push	{r7}
 8004e82:	b083      	sub	sp, #12
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
 8004e88:	460b      	mov	r3, r1
 8004e8a:	807b      	strh	r3, [r7, #2]
 8004e8c:	4613      	mov	r3, r2
 8004e8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004e90:	787b      	ldrb	r3, [r7, #1]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d003      	beq.n	8004e9e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004e96:	887a      	ldrh	r2, [r7, #2]
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004e9c:	e002      	b.n	8004ea4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004e9e:	887a      	ldrh	r2, [r7, #2]
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004ea4:	bf00      	nop
 8004ea6:	370c      	adds	r7, #12
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eae:	4770      	bx	lr

08004eb0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004eb0:	b480      	push	{r7}
 8004eb2:	b085      	sub	sp, #20
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d141      	bne.n	8004f42 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004ebe:	4b4b      	ldr	r3, [pc, #300]	; (8004fec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004ec6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004eca:	d131      	bne.n	8004f30 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004ecc:	4b47      	ldr	r3, [pc, #284]	; (8004fec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ece:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004ed2:	4a46      	ldr	r2, [pc, #280]	; (8004fec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ed4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ed8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004edc:	4b43      	ldr	r3, [pc, #268]	; (8004fec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004ee4:	4a41      	ldr	r2, [pc, #260]	; (8004fec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ee6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004eea:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004eec:	4b40      	ldr	r3, [pc, #256]	; (8004ff0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	2232      	movs	r2, #50	; 0x32
 8004ef2:	fb02 f303 	mul.w	r3, r2, r3
 8004ef6:	4a3f      	ldr	r2, [pc, #252]	; (8004ff4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004ef8:	fba2 2303 	umull	r2, r3, r2, r3
 8004efc:	0c9b      	lsrs	r3, r3, #18
 8004efe:	3301      	adds	r3, #1
 8004f00:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004f02:	e002      	b.n	8004f0a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	3b01      	subs	r3, #1
 8004f08:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004f0a:	4b38      	ldr	r3, [pc, #224]	; (8004fec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f0c:	695b      	ldr	r3, [r3, #20]
 8004f0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f16:	d102      	bne.n	8004f1e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d1f2      	bne.n	8004f04 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004f1e:	4b33      	ldr	r3, [pc, #204]	; (8004fec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f20:	695b      	ldr	r3, [r3, #20]
 8004f22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f2a:	d158      	bne.n	8004fde <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004f2c:	2303      	movs	r3, #3
 8004f2e:	e057      	b.n	8004fe0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004f30:	4b2e      	ldr	r3, [pc, #184]	; (8004fec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f32:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f36:	4a2d      	ldr	r2, [pc, #180]	; (8004fec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f38:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f3c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004f40:	e04d      	b.n	8004fde <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f48:	d141      	bne.n	8004fce <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004f4a:	4b28      	ldr	r3, [pc, #160]	; (8004fec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004f52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f56:	d131      	bne.n	8004fbc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004f58:	4b24      	ldr	r3, [pc, #144]	; (8004fec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f5e:	4a23      	ldr	r2, [pc, #140]	; (8004fec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f64:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004f68:	4b20      	ldr	r3, [pc, #128]	; (8004fec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004f70:	4a1e      	ldr	r2, [pc, #120]	; (8004fec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f72:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004f76:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004f78:	4b1d      	ldr	r3, [pc, #116]	; (8004ff0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	2232      	movs	r2, #50	; 0x32
 8004f7e:	fb02 f303 	mul.w	r3, r2, r3
 8004f82:	4a1c      	ldr	r2, [pc, #112]	; (8004ff4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004f84:	fba2 2303 	umull	r2, r3, r2, r3
 8004f88:	0c9b      	lsrs	r3, r3, #18
 8004f8a:	3301      	adds	r3, #1
 8004f8c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004f8e:	e002      	b.n	8004f96 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	3b01      	subs	r3, #1
 8004f94:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004f96:	4b15      	ldr	r3, [pc, #84]	; (8004fec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f98:	695b      	ldr	r3, [r3, #20]
 8004f9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fa2:	d102      	bne.n	8004faa <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d1f2      	bne.n	8004f90 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004faa:	4b10      	ldr	r3, [pc, #64]	; (8004fec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004fac:	695b      	ldr	r3, [r3, #20]
 8004fae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fb2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fb6:	d112      	bne.n	8004fde <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004fb8:	2303      	movs	r3, #3
 8004fba:	e011      	b.n	8004fe0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004fbc:	4b0b      	ldr	r3, [pc, #44]	; (8004fec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004fbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004fc2:	4a0a      	ldr	r2, [pc, #40]	; (8004fec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004fc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004fc8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004fcc:	e007      	b.n	8004fde <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004fce:	4b07      	ldr	r3, [pc, #28]	; (8004fec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004fd6:	4a05      	ldr	r2, [pc, #20]	; (8004fec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004fd8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004fdc:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004fde:	2300      	movs	r3, #0
}
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	3714      	adds	r7, #20
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fea:	4770      	bx	lr
 8004fec:	40007000 	.word	0x40007000
 8004ff0:	20000010 	.word	0x20000010
 8004ff4:	431bde83 	.word	0x431bde83

08004ff8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004ff8:	b480      	push	{r7}
 8004ffa:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004ffc:	4b05      	ldr	r3, [pc, #20]	; (8005014 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004ffe:	689b      	ldr	r3, [r3, #8]
 8005000:	4a04      	ldr	r2, [pc, #16]	; (8005014 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005002:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005006:	6093      	str	r3, [r2, #8]
}
 8005008:	bf00      	nop
 800500a:	46bd      	mov	sp, r7
 800500c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005010:	4770      	bx	lr
 8005012:	bf00      	nop
 8005014:	40007000 	.word	0x40007000

08005018 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b088      	sub	sp, #32
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d101      	bne.n	800502a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005026:	2301      	movs	r3, #1
 8005028:	e306      	b.n	8005638 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f003 0301 	and.w	r3, r3, #1
 8005032:	2b00      	cmp	r3, #0
 8005034:	d075      	beq.n	8005122 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005036:	4b97      	ldr	r3, [pc, #604]	; (8005294 <HAL_RCC_OscConfig+0x27c>)
 8005038:	689b      	ldr	r3, [r3, #8]
 800503a:	f003 030c 	and.w	r3, r3, #12
 800503e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005040:	4b94      	ldr	r3, [pc, #592]	; (8005294 <HAL_RCC_OscConfig+0x27c>)
 8005042:	68db      	ldr	r3, [r3, #12]
 8005044:	f003 0303 	and.w	r3, r3, #3
 8005048:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800504a:	69bb      	ldr	r3, [r7, #24]
 800504c:	2b0c      	cmp	r3, #12
 800504e:	d102      	bne.n	8005056 <HAL_RCC_OscConfig+0x3e>
 8005050:	697b      	ldr	r3, [r7, #20]
 8005052:	2b03      	cmp	r3, #3
 8005054:	d002      	beq.n	800505c <HAL_RCC_OscConfig+0x44>
 8005056:	69bb      	ldr	r3, [r7, #24]
 8005058:	2b08      	cmp	r3, #8
 800505a:	d10b      	bne.n	8005074 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800505c:	4b8d      	ldr	r3, [pc, #564]	; (8005294 <HAL_RCC_OscConfig+0x27c>)
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005064:	2b00      	cmp	r3, #0
 8005066:	d05b      	beq.n	8005120 <HAL_RCC_OscConfig+0x108>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	685b      	ldr	r3, [r3, #4]
 800506c:	2b00      	cmp	r3, #0
 800506e:	d157      	bne.n	8005120 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005070:	2301      	movs	r3, #1
 8005072:	e2e1      	b.n	8005638 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	685b      	ldr	r3, [r3, #4]
 8005078:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800507c:	d106      	bne.n	800508c <HAL_RCC_OscConfig+0x74>
 800507e:	4b85      	ldr	r3, [pc, #532]	; (8005294 <HAL_RCC_OscConfig+0x27c>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	4a84      	ldr	r2, [pc, #528]	; (8005294 <HAL_RCC_OscConfig+0x27c>)
 8005084:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005088:	6013      	str	r3, [r2, #0]
 800508a:	e01d      	b.n	80050c8 <HAL_RCC_OscConfig+0xb0>
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	685b      	ldr	r3, [r3, #4]
 8005090:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005094:	d10c      	bne.n	80050b0 <HAL_RCC_OscConfig+0x98>
 8005096:	4b7f      	ldr	r3, [pc, #508]	; (8005294 <HAL_RCC_OscConfig+0x27c>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	4a7e      	ldr	r2, [pc, #504]	; (8005294 <HAL_RCC_OscConfig+0x27c>)
 800509c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80050a0:	6013      	str	r3, [r2, #0]
 80050a2:	4b7c      	ldr	r3, [pc, #496]	; (8005294 <HAL_RCC_OscConfig+0x27c>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	4a7b      	ldr	r2, [pc, #492]	; (8005294 <HAL_RCC_OscConfig+0x27c>)
 80050a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050ac:	6013      	str	r3, [r2, #0]
 80050ae:	e00b      	b.n	80050c8 <HAL_RCC_OscConfig+0xb0>
 80050b0:	4b78      	ldr	r3, [pc, #480]	; (8005294 <HAL_RCC_OscConfig+0x27c>)
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	4a77      	ldr	r2, [pc, #476]	; (8005294 <HAL_RCC_OscConfig+0x27c>)
 80050b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80050ba:	6013      	str	r3, [r2, #0]
 80050bc:	4b75      	ldr	r3, [pc, #468]	; (8005294 <HAL_RCC_OscConfig+0x27c>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	4a74      	ldr	r2, [pc, #464]	; (8005294 <HAL_RCC_OscConfig+0x27c>)
 80050c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80050c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	685b      	ldr	r3, [r3, #4]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d013      	beq.n	80050f8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050d0:	f7fc fca2 	bl	8001a18 <HAL_GetTick>
 80050d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80050d6:	e008      	b.n	80050ea <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80050d8:	f7fc fc9e 	bl	8001a18 <HAL_GetTick>
 80050dc:	4602      	mov	r2, r0
 80050de:	693b      	ldr	r3, [r7, #16]
 80050e0:	1ad3      	subs	r3, r2, r3
 80050e2:	2b64      	cmp	r3, #100	; 0x64
 80050e4:	d901      	bls.n	80050ea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80050e6:	2303      	movs	r3, #3
 80050e8:	e2a6      	b.n	8005638 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80050ea:	4b6a      	ldr	r3, [pc, #424]	; (8005294 <HAL_RCC_OscConfig+0x27c>)
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d0f0      	beq.n	80050d8 <HAL_RCC_OscConfig+0xc0>
 80050f6:	e014      	b.n	8005122 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050f8:	f7fc fc8e 	bl	8001a18 <HAL_GetTick>
 80050fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80050fe:	e008      	b.n	8005112 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005100:	f7fc fc8a 	bl	8001a18 <HAL_GetTick>
 8005104:	4602      	mov	r2, r0
 8005106:	693b      	ldr	r3, [r7, #16]
 8005108:	1ad3      	subs	r3, r2, r3
 800510a:	2b64      	cmp	r3, #100	; 0x64
 800510c:	d901      	bls.n	8005112 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800510e:	2303      	movs	r3, #3
 8005110:	e292      	b.n	8005638 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005112:	4b60      	ldr	r3, [pc, #384]	; (8005294 <HAL_RCC_OscConfig+0x27c>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800511a:	2b00      	cmp	r3, #0
 800511c:	d1f0      	bne.n	8005100 <HAL_RCC_OscConfig+0xe8>
 800511e:	e000      	b.n	8005122 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005120:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f003 0302 	and.w	r3, r3, #2
 800512a:	2b00      	cmp	r3, #0
 800512c:	d075      	beq.n	800521a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800512e:	4b59      	ldr	r3, [pc, #356]	; (8005294 <HAL_RCC_OscConfig+0x27c>)
 8005130:	689b      	ldr	r3, [r3, #8]
 8005132:	f003 030c 	and.w	r3, r3, #12
 8005136:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005138:	4b56      	ldr	r3, [pc, #344]	; (8005294 <HAL_RCC_OscConfig+0x27c>)
 800513a:	68db      	ldr	r3, [r3, #12]
 800513c:	f003 0303 	and.w	r3, r3, #3
 8005140:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8005142:	69bb      	ldr	r3, [r7, #24]
 8005144:	2b0c      	cmp	r3, #12
 8005146:	d102      	bne.n	800514e <HAL_RCC_OscConfig+0x136>
 8005148:	697b      	ldr	r3, [r7, #20]
 800514a:	2b02      	cmp	r3, #2
 800514c:	d002      	beq.n	8005154 <HAL_RCC_OscConfig+0x13c>
 800514e:	69bb      	ldr	r3, [r7, #24]
 8005150:	2b04      	cmp	r3, #4
 8005152:	d11f      	bne.n	8005194 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005154:	4b4f      	ldr	r3, [pc, #316]	; (8005294 <HAL_RCC_OscConfig+0x27c>)
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800515c:	2b00      	cmp	r3, #0
 800515e:	d005      	beq.n	800516c <HAL_RCC_OscConfig+0x154>
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	68db      	ldr	r3, [r3, #12]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d101      	bne.n	800516c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8005168:	2301      	movs	r3, #1
 800516a:	e265      	b.n	8005638 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800516c:	4b49      	ldr	r3, [pc, #292]	; (8005294 <HAL_RCC_OscConfig+0x27c>)
 800516e:	685b      	ldr	r3, [r3, #4]
 8005170:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	691b      	ldr	r3, [r3, #16]
 8005178:	061b      	lsls	r3, r3, #24
 800517a:	4946      	ldr	r1, [pc, #280]	; (8005294 <HAL_RCC_OscConfig+0x27c>)
 800517c:	4313      	orrs	r3, r2
 800517e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005180:	4b45      	ldr	r3, [pc, #276]	; (8005298 <HAL_RCC_OscConfig+0x280>)
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	4618      	mov	r0, r3
 8005186:	f7fc fbfb 	bl	8001980 <HAL_InitTick>
 800518a:	4603      	mov	r3, r0
 800518c:	2b00      	cmp	r3, #0
 800518e:	d043      	beq.n	8005218 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8005190:	2301      	movs	r3, #1
 8005192:	e251      	b.n	8005638 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	68db      	ldr	r3, [r3, #12]
 8005198:	2b00      	cmp	r3, #0
 800519a:	d023      	beq.n	80051e4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800519c:	4b3d      	ldr	r3, [pc, #244]	; (8005294 <HAL_RCC_OscConfig+0x27c>)
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4a3c      	ldr	r2, [pc, #240]	; (8005294 <HAL_RCC_OscConfig+0x27c>)
 80051a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051a8:	f7fc fc36 	bl	8001a18 <HAL_GetTick>
 80051ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80051ae:	e008      	b.n	80051c2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80051b0:	f7fc fc32 	bl	8001a18 <HAL_GetTick>
 80051b4:	4602      	mov	r2, r0
 80051b6:	693b      	ldr	r3, [r7, #16]
 80051b8:	1ad3      	subs	r3, r2, r3
 80051ba:	2b02      	cmp	r3, #2
 80051bc:	d901      	bls.n	80051c2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80051be:	2303      	movs	r3, #3
 80051c0:	e23a      	b.n	8005638 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80051c2:	4b34      	ldr	r3, [pc, #208]	; (8005294 <HAL_RCC_OscConfig+0x27c>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d0f0      	beq.n	80051b0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051ce:	4b31      	ldr	r3, [pc, #196]	; (8005294 <HAL_RCC_OscConfig+0x27c>)
 80051d0:	685b      	ldr	r3, [r3, #4]
 80051d2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	691b      	ldr	r3, [r3, #16]
 80051da:	061b      	lsls	r3, r3, #24
 80051dc:	492d      	ldr	r1, [pc, #180]	; (8005294 <HAL_RCC_OscConfig+0x27c>)
 80051de:	4313      	orrs	r3, r2
 80051e0:	604b      	str	r3, [r1, #4]
 80051e2:	e01a      	b.n	800521a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80051e4:	4b2b      	ldr	r3, [pc, #172]	; (8005294 <HAL_RCC_OscConfig+0x27c>)
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	4a2a      	ldr	r2, [pc, #168]	; (8005294 <HAL_RCC_OscConfig+0x27c>)
 80051ea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80051ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051f0:	f7fc fc12 	bl	8001a18 <HAL_GetTick>
 80051f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80051f6:	e008      	b.n	800520a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80051f8:	f7fc fc0e 	bl	8001a18 <HAL_GetTick>
 80051fc:	4602      	mov	r2, r0
 80051fe:	693b      	ldr	r3, [r7, #16]
 8005200:	1ad3      	subs	r3, r2, r3
 8005202:	2b02      	cmp	r3, #2
 8005204:	d901      	bls.n	800520a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8005206:	2303      	movs	r3, #3
 8005208:	e216      	b.n	8005638 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800520a:	4b22      	ldr	r3, [pc, #136]	; (8005294 <HAL_RCC_OscConfig+0x27c>)
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005212:	2b00      	cmp	r3, #0
 8005214:	d1f0      	bne.n	80051f8 <HAL_RCC_OscConfig+0x1e0>
 8005216:	e000      	b.n	800521a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005218:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f003 0308 	and.w	r3, r3, #8
 8005222:	2b00      	cmp	r3, #0
 8005224:	d041      	beq.n	80052aa <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	695b      	ldr	r3, [r3, #20]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d01c      	beq.n	8005268 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800522e:	4b19      	ldr	r3, [pc, #100]	; (8005294 <HAL_RCC_OscConfig+0x27c>)
 8005230:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005234:	4a17      	ldr	r2, [pc, #92]	; (8005294 <HAL_RCC_OscConfig+0x27c>)
 8005236:	f043 0301 	orr.w	r3, r3, #1
 800523a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800523e:	f7fc fbeb 	bl	8001a18 <HAL_GetTick>
 8005242:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005244:	e008      	b.n	8005258 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005246:	f7fc fbe7 	bl	8001a18 <HAL_GetTick>
 800524a:	4602      	mov	r2, r0
 800524c:	693b      	ldr	r3, [r7, #16]
 800524e:	1ad3      	subs	r3, r2, r3
 8005250:	2b02      	cmp	r3, #2
 8005252:	d901      	bls.n	8005258 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005254:	2303      	movs	r3, #3
 8005256:	e1ef      	b.n	8005638 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005258:	4b0e      	ldr	r3, [pc, #56]	; (8005294 <HAL_RCC_OscConfig+0x27c>)
 800525a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800525e:	f003 0302 	and.w	r3, r3, #2
 8005262:	2b00      	cmp	r3, #0
 8005264:	d0ef      	beq.n	8005246 <HAL_RCC_OscConfig+0x22e>
 8005266:	e020      	b.n	80052aa <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005268:	4b0a      	ldr	r3, [pc, #40]	; (8005294 <HAL_RCC_OscConfig+0x27c>)
 800526a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800526e:	4a09      	ldr	r2, [pc, #36]	; (8005294 <HAL_RCC_OscConfig+0x27c>)
 8005270:	f023 0301 	bic.w	r3, r3, #1
 8005274:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005278:	f7fc fbce 	bl	8001a18 <HAL_GetTick>
 800527c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800527e:	e00d      	b.n	800529c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005280:	f7fc fbca 	bl	8001a18 <HAL_GetTick>
 8005284:	4602      	mov	r2, r0
 8005286:	693b      	ldr	r3, [r7, #16]
 8005288:	1ad3      	subs	r3, r2, r3
 800528a:	2b02      	cmp	r3, #2
 800528c:	d906      	bls.n	800529c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800528e:	2303      	movs	r3, #3
 8005290:	e1d2      	b.n	8005638 <HAL_RCC_OscConfig+0x620>
 8005292:	bf00      	nop
 8005294:	40021000 	.word	0x40021000
 8005298:	20000014 	.word	0x20000014
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800529c:	4b8c      	ldr	r3, [pc, #560]	; (80054d0 <HAL_RCC_OscConfig+0x4b8>)
 800529e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80052a2:	f003 0302 	and.w	r3, r3, #2
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d1ea      	bne.n	8005280 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f003 0304 	and.w	r3, r3, #4
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	f000 80a6 	beq.w	8005404 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80052b8:	2300      	movs	r3, #0
 80052ba:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80052bc:	4b84      	ldr	r3, [pc, #528]	; (80054d0 <HAL_RCC_OscConfig+0x4b8>)
 80052be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d101      	bne.n	80052cc <HAL_RCC_OscConfig+0x2b4>
 80052c8:	2301      	movs	r3, #1
 80052ca:	e000      	b.n	80052ce <HAL_RCC_OscConfig+0x2b6>
 80052cc:	2300      	movs	r3, #0
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d00d      	beq.n	80052ee <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80052d2:	4b7f      	ldr	r3, [pc, #508]	; (80054d0 <HAL_RCC_OscConfig+0x4b8>)
 80052d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052d6:	4a7e      	ldr	r2, [pc, #504]	; (80054d0 <HAL_RCC_OscConfig+0x4b8>)
 80052d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052dc:	6593      	str	r3, [r2, #88]	; 0x58
 80052de:	4b7c      	ldr	r3, [pc, #496]	; (80054d0 <HAL_RCC_OscConfig+0x4b8>)
 80052e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052e6:	60fb      	str	r3, [r7, #12]
 80052e8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80052ea:	2301      	movs	r3, #1
 80052ec:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80052ee:	4b79      	ldr	r3, [pc, #484]	; (80054d4 <HAL_RCC_OscConfig+0x4bc>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d118      	bne.n	800532c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80052fa:	4b76      	ldr	r3, [pc, #472]	; (80054d4 <HAL_RCC_OscConfig+0x4bc>)
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	4a75      	ldr	r2, [pc, #468]	; (80054d4 <HAL_RCC_OscConfig+0x4bc>)
 8005300:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005304:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005306:	f7fc fb87 	bl	8001a18 <HAL_GetTick>
 800530a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800530c:	e008      	b.n	8005320 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800530e:	f7fc fb83 	bl	8001a18 <HAL_GetTick>
 8005312:	4602      	mov	r2, r0
 8005314:	693b      	ldr	r3, [r7, #16]
 8005316:	1ad3      	subs	r3, r2, r3
 8005318:	2b02      	cmp	r3, #2
 800531a:	d901      	bls.n	8005320 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800531c:	2303      	movs	r3, #3
 800531e:	e18b      	b.n	8005638 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005320:	4b6c      	ldr	r3, [pc, #432]	; (80054d4 <HAL_RCC_OscConfig+0x4bc>)
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005328:	2b00      	cmp	r3, #0
 800532a:	d0f0      	beq.n	800530e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	689b      	ldr	r3, [r3, #8]
 8005330:	2b01      	cmp	r3, #1
 8005332:	d108      	bne.n	8005346 <HAL_RCC_OscConfig+0x32e>
 8005334:	4b66      	ldr	r3, [pc, #408]	; (80054d0 <HAL_RCC_OscConfig+0x4b8>)
 8005336:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800533a:	4a65      	ldr	r2, [pc, #404]	; (80054d0 <HAL_RCC_OscConfig+0x4b8>)
 800533c:	f043 0301 	orr.w	r3, r3, #1
 8005340:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005344:	e024      	b.n	8005390 <HAL_RCC_OscConfig+0x378>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	689b      	ldr	r3, [r3, #8]
 800534a:	2b05      	cmp	r3, #5
 800534c:	d110      	bne.n	8005370 <HAL_RCC_OscConfig+0x358>
 800534e:	4b60      	ldr	r3, [pc, #384]	; (80054d0 <HAL_RCC_OscConfig+0x4b8>)
 8005350:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005354:	4a5e      	ldr	r2, [pc, #376]	; (80054d0 <HAL_RCC_OscConfig+0x4b8>)
 8005356:	f043 0304 	orr.w	r3, r3, #4
 800535a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800535e:	4b5c      	ldr	r3, [pc, #368]	; (80054d0 <HAL_RCC_OscConfig+0x4b8>)
 8005360:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005364:	4a5a      	ldr	r2, [pc, #360]	; (80054d0 <HAL_RCC_OscConfig+0x4b8>)
 8005366:	f043 0301 	orr.w	r3, r3, #1
 800536a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800536e:	e00f      	b.n	8005390 <HAL_RCC_OscConfig+0x378>
 8005370:	4b57      	ldr	r3, [pc, #348]	; (80054d0 <HAL_RCC_OscConfig+0x4b8>)
 8005372:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005376:	4a56      	ldr	r2, [pc, #344]	; (80054d0 <HAL_RCC_OscConfig+0x4b8>)
 8005378:	f023 0301 	bic.w	r3, r3, #1
 800537c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005380:	4b53      	ldr	r3, [pc, #332]	; (80054d0 <HAL_RCC_OscConfig+0x4b8>)
 8005382:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005386:	4a52      	ldr	r2, [pc, #328]	; (80054d0 <HAL_RCC_OscConfig+0x4b8>)
 8005388:	f023 0304 	bic.w	r3, r3, #4
 800538c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	689b      	ldr	r3, [r3, #8]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d016      	beq.n	80053c6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005398:	f7fc fb3e 	bl	8001a18 <HAL_GetTick>
 800539c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800539e:	e00a      	b.n	80053b6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053a0:	f7fc fb3a 	bl	8001a18 <HAL_GetTick>
 80053a4:	4602      	mov	r2, r0
 80053a6:	693b      	ldr	r3, [r7, #16]
 80053a8:	1ad3      	subs	r3, r2, r3
 80053aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d901      	bls.n	80053b6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80053b2:	2303      	movs	r3, #3
 80053b4:	e140      	b.n	8005638 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80053b6:	4b46      	ldr	r3, [pc, #280]	; (80054d0 <HAL_RCC_OscConfig+0x4b8>)
 80053b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053bc:	f003 0302 	and.w	r3, r3, #2
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d0ed      	beq.n	80053a0 <HAL_RCC_OscConfig+0x388>
 80053c4:	e015      	b.n	80053f2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053c6:	f7fc fb27 	bl	8001a18 <HAL_GetTick>
 80053ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80053cc:	e00a      	b.n	80053e4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053ce:	f7fc fb23 	bl	8001a18 <HAL_GetTick>
 80053d2:	4602      	mov	r2, r0
 80053d4:	693b      	ldr	r3, [r7, #16]
 80053d6:	1ad3      	subs	r3, r2, r3
 80053d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80053dc:	4293      	cmp	r3, r2
 80053de:	d901      	bls.n	80053e4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80053e0:	2303      	movs	r3, #3
 80053e2:	e129      	b.n	8005638 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80053e4:	4b3a      	ldr	r3, [pc, #232]	; (80054d0 <HAL_RCC_OscConfig+0x4b8>)
 80053e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053ea:	f003 0302 	and.w	r3, r3, #2
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d1ed      	bne.n	80053ce <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80053f2:	7ffb      	ldrb	r3, [r7, #31]
 80053f4:	2b01      	cmp	r3, #1
 80053f6:	d105      	bne.n	8005404 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80053f8:	4b35      	ldr	r3, [pc, #212]	; (80054d0 <HAL_RCC_OscConfig+0x4b8>)
 80053fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053fc:	4a34      	ldr	r2, [pc, #208]	; (80054d0 <HAL_RCC_OscConfig+0x4b8>)
 80053fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005402:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f003 0320 	and.w	r3, r3, #32
 800540c:	2b00      	cmp	r3, #0
 800540e:	d03c      	beq.n	800548a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	699b      	ldr	r3, [r3, #24]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d01c      	beq.n	8005452 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005418:	4b2d      	ldr	r3, [pc, #180]	; (80054d0 <HAL_RCC_OscConfig+0x4b8>)
 800541a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800541e:	4a2c      	ldr	r2, [pc, #176]	; (80054d0 <HAL_RCC_OscConfig+0x4b8>)
 8005420:	f043 0301 	orr.w	r3, r3, #1
 8005424:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005428:	f7fc faf6 	bl	8001a18 <HAL_GetTick>
 800542c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800542e:	e008      	b.n	8005442 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005430:	f7fc faf2 	bl	8001a18 <HAL_GetTick>
 8005434:	4602      	mov	r2, r0
 8005436:	693b      	ldr	r3, [r7, #16]
 8005438:	1ad3      	subs	r3, r2, r3
 800543a:	2b02      	cmp	r3, #2
 800543c:	d901      	bls.n	8005442 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800543e:	2303      	movs	r3, #3
 8005440:	e0fa      	b.n	8005638 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005442:	4b23      	ldr	r3, [pc, #140]	; (80054d0 <HAL_RCC_OscConfig+0x4b8>)
 8005444:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005448:	f003 0302 	and.w	r3, r3, #2
 800544c:	2b00      	cmp	r3, #0
 800544e:	d0ef      	beq.n	8005430 <HAL_RCC_OscConfig+0x418>
 8005450:	e01b      	b.n	800548a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005452:	4b1f      	ldr	r3, [pc, #124]	; (80054d0 <HAL_RCC_OscConfig+0x4b8>)
 8005454:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005458:	4a1d      	ldr	r2, [pc, #116]	; (80054d0 <HAL_RCC_OscConfig+0x4b8>)
 800545a:	f023 0301 	bic.w	r3, r3, #1
 800545e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005462:	f7fc fad9 	bl	8001a18 <HAL_GetTick>
 8005466:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005468:	e008      	b.n	800547c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800546a:	f7fc fad5 	bl	8001a18 <HAL_GetTick>
 800546e:	4602      	mov	r2, r0
 8005470:	693b      	ldr	r3, [r7, #16]
 8005472:	1ad3      	subs	r3, r2, r3
 8005474:	2b02      	cmp	r3, #2
 8005476:	d901      	bls.n	800547c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8005478:	2303      	movs	r3, #3
 800547a:	e0dd      	b.n	8005638 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800547c:	4b14      	ldr	r3, [pc, #80]	; (80054d0 <HAL_RCC_OscConfig+0x4b8>)
 800547e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005482:	f003 0302 	and.w	r3, r3, #2
 8005486:	2b00      	cmp	r3, #0
 8005488:	d1ef      	bne.n	800546a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	69db      	ldr	r3, [r3, #28]
 800548e:	2b00      	cmp	r3, #0
 8005490:	f000 80d1 	beq.w	8005636 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005494:	4b0e      	ldr	r3, [pc, #56]	; (80054d0 <HAL_RCC_OscConfig+0x4b8>)
 8005496:	689b      	ldr	r3, [r3, #8]
 8005498:	f003 030c 	and.w	r3, r3, #12
 800549c:	2b0c      	cmp	r3, #12
 800549e:	f000 808b 	beq.w	80055b8 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	69db      	ldr	r3, [r3, #28]
 80054a6:	2b02      	cmp	r3, #2
 80054a8:	d15e      	bne.n	8005568 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80054aa:	4b09      	ldr	r3, [pc, #36]	; (80054d0 <HAL_RCC_OscConfig+0x4b8>)
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	4a08      	ldr	r2, [pc, #32]	; (80054d0 <HAL_RCC_OscConfig+0x4b8>)
 80054b0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80054b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054b6:	f7fc faaf 	bl	8001a18 <HAL_GetTick>
 80054ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80054bc:	e00c      	b.n	80054d8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80054be:	f7fc faab 	bl	8001a18 <HAL_GetTick>
 80054c2:	4602      	mov	r2, r0
 80054c4:	693b      	ldr	r3, [r7, #16]
 80054c6:	1ad3      	subs	r3, r2, r3
 80054c8:	2b02      	cmp	r3, #2
 80054ca:	d905      	bls.n	80054d8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80054cc:	2303      	movs	r3, #3
 80054ce:	e0b3      	b.n	8005638 <HAL_RCC_OscConfig+0x620>
 80054d0:	40021000 	.word	0x40021000
 80054d4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80054d8:	4b59      	ldr	r3, [pc, #356]	; (8005640 <HAL_RCC_OscConfig+0x628>)
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d1ec      	bne.n	80054be <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80054e4:	4b56      	ldr	r3, [pc, #344]	; (8005640 <HAL_RCC_OscConfig+0x628>)
 80054e6:	68da      	ldr	r2, [r3, #12]
 80054e8:	4b56      	ldr	r3, [pc, #344]	; (8005644 <HAL_RCC_OscConfig+0x62c>)
 80054ea:	4013      	ands	r3, r2
 80054ec:	687a      	ldr	r2, [r7, #4]
 80054ee:	6a11      	ldr	r1, [r2, #32]
 80054f0:	687a      	ldr	r2, [r7, #4]
 80054f2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80054f4:	3a01      	subs	r2, #1
 80054f6:	0112      	lsls	r2, r2, #4
 80054f8:	4311      	orrs	r1, r2
 80054fa:	687a      	ldr	r2, [r7, #4]
 80054fc:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80054fe:	0212      	lsls	r2, r2, #8
 8005500:	4311      	orrs	r1, r2
 8005502:	687a      	ldr	r2, [r7, #4]
 8005504:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005506:	0852      	lsrs	r2, r2, #1
 8005508:	3a01      	subs	r2, #1
 800550a:	0552      	lsls	r2, r2, #21
 800550c:	4311      	orrs	r1, r2
 800550e:	687a      	ldr	r2, [r7, #4]
 8005510:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005512:	0852      	lsrs	r2, r2, #1
 8005514:	3a01      	subs	r2, #1
 8005516:	0652      	lsls	r2, r2, #25
 8005518:	4311      	orrs	r1, r2
 800551a:	687a      	ldr	r2, [r7, #4]
 800551c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800551e:	06d2      	lsls	r2, r2, #27
 8005520:	430a      	orrs	r2, r1
 8005522:	4947      	ldr	r1, [pc, #284]	; (8005640 <HAL_RCC_OscConfig+0x628>)
 8005524:	4313      	orrs	r3, r2
 8005526:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005528:	4b45      	ldr	r3, [pc, #276]	; (8005640 <HAL_RCC_OscConfig+0x628>)
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	4a44      	ldr	r2, [pc, #272]	; (8005640 <HAL_RCC_OscConfig+0x628>)
 800552e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005532:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005534:	4b42      	ldr	r3, [pc, #264]	; (8005640 <HAL_RCC_OscConfig+0x628>)
 8005536:	68db      	ldr	r3, [r3, #12]
 8005538:	4a41      	ldr	r2, [pc, #260]	; (8005640 <HAL_RCC_OscConfig+0x628>)
 800553a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800553e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005540:	f7fc fa6a 	bl	8001a18 <HAL_GetTick>
 8005544:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005546:	e008      	b.n	800555a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005548:	f7fc fa66 	bl	8001a18 <HAL_GetTick>
 800554c:	4602      	mov	r2, r0
 800554e:	693b      	ldr	r3, [r7, #16]
 8005550:	1ad3      	subs	r3, r2, r3
 8005552:	2b02      	cmp	r3, #2
 8005554:	d901      	bls.n	800555a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8005556:	2303      	movs	r3, #3
 8005558:	e06e      	b.n	8005638 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800555a:	4b39      	ldr	r3, [pc, #228]	; (8005640 <HAL_RCC_OscConfig+0x628>)
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005562:	2b00      	cmp	r3, #0
 8005564:	d0f0      	beq.n	8005548 <HAL_RCC_OscConfig+0x530>
 8005566:	e066      	b.n	8005636 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005568:	4b35      	ldr	r3, [pc, #212]	; (8005640 <HAL_RCC_OscConfig+0x628>)
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	4a34      	ldr	r2, [pc, #208]	; (8005640 <HAL_RCC_OscConfig+0x628>)
 800556e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005572:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8005574:	4b32      	ldr	r3, [pc, #200]	; (8005640 <HAL_RCC_OscConfig+0x628>)
 8005576:	68db      	ldr	r3, [r3, #12]
 8005578:	4a31      	ldr	r2, [pc, #196]	; (8005640 <HAL_RCC_OscConfig+0x628>)
 800557a:	f023 0303 	bic.w	r3, r3, #3
 800557e:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8005580:	4b2f      	ldr	r3, [pc, #188]	; (8005640 <HAL_RCC_OscConfig+0x628>)
 8005582:	68db      	ldr	r3, [r3, #12]
 8005584:	4a2e      	ldr	r2, [pc, #184]	; (8005640 <HAL_RCC_OscConfig+0x628>)
 8005586:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800558a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800558e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005590:	f7fc fa42 	bl	8001a18 <HAL_GetTick>
 8005594:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005596:	e008      	b.n	80055aa <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005598:	f7fc fa3e 	bl	8001a18 <HAL_GetTick>
 800559c:	4602      	mov	r2, r0
 800559e:	693b      	ldr	r3, [r7, #16]
 80055a0:	1ad3      	subs	r3, r2, r3
 80055a2:	2b02      	cmp	r3, #2
 80055a4:	d901      	bls.n	80055aa <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 80055a6:	2303      	movs	r3, #3
 80055a8:	e046      	b.n	8005638 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80055aa:	4b25      	ldr	r3, [pc, #148]	; (8005640 <HAL_RCC_OscConfig+0x628>)
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d1f0      	bne.n	8005598 <HAL_RCC_OscConfig+0x580>
 80055b6:	e03e      	b.n	8005636 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	69db      	ldr	r3, [r3, #28]
 80055bc:	2b01      	cmp	r3, #1
 80055be:	d101      	bne.n	80055c4 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 80055c0:	2301      	movs	r3, #1
 80055c2:	e039      	b.n	8005638 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80055c4:	4b1e      	ldr	r3, [pc, #120]	; (8005640 <HAL_RCC_OscConfig+0x628>)
 80055c6:	68db      	ldr	r3, [r3, #12]
 80055c8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80055ca:	697b      	ldr	r3, [r7, #20]
 80055cc:	f003 0203 	and.w	r2, r3, #3
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	6a1b      	ldr	r3, [r3, #32]
 80055d4:	429a      	cmp	r2, r3
 80055d6:	d12c      	bne.n	8005632 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80055d8:	697b      	ldr	r3, [r7, #20]
 80055da:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055e2:	3b01      	subs	r3, #1
 80055e4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80055e6:	429a      	cmp	r2, r3
 80055e8:	d123      	bne.n	8005632 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80055ea:	697b      	ldr	r3, [r7, #20]
 80055ec:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055f4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80055f6:	429a      	cmp	r2, r3
 80055f8:	d11b      	bne.n	8005632 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80055fa:	697b      	ldr	r3, [r7, #20]
 80055fc:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005604:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005606:	429a      	cmp	r2, r3
 8005608:	d113      	bne.n	8005632 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800560a:	697b      	ldr	r3, [r7, #20]
 800560c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005614:	085b      	lsrs	r3, r3, #1
 8005616:	3b01      	subs	r3, #1
 8005618:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800561a:	429a      	cmp	r2, r3
 800561c:	d109      	bne.n	8005632 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800561e:	697b      	ldr	r3, [r7, #20]
 8005620:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005628:	085b      	lsrs	r3, r3, #1
 800562a:	3b01      	subs	r3, #1
 800562c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800562e:	429a      	cmp	r2, r3
 8005630:	d001      	beq.n	8005636 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8005632:	2301      	movs	r3, #1
 8005634:	e000      	b.n	8005638 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8005636:	2300      	movs	r3, #0
}
 8005638:	4618      	mov	r0, r3
 800563a:	3720      	adds	r7, #32
 800563c:	46bd      	mov	sp, r7
 800563e:	bd80      	pop	{r7, pc}
 8005640:	40021000 	.word	0x40021000
 8005644:	019f800c 	.word	0x019f800c

08005648 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005648:	b580      	push	{r7, lr}
 800564a:	b086      	sub	sp, #24
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
 8005650:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005652:	2300      	movs	r3, #0
 8005654:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d101      	bne.n	8005660 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800565c:	2301      	movs	r3, #1
 800565e:	e11e      	b.n	800589e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005660:	4b91      	ldr	r3, [pc, #580]	; (80058a8 <HAL_RCC_ClockConfig+0x260>)
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f003 030f 	and.w	r3, r3, #15
 8005668:	683a      	ldr	r2, [r7, #0]
 800566a:	429a      	cmp	r2, r3
 800566c:	d910      	bls.n	8005690 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800566e:	4b8e      	ldr	r3, [pc, #568]	; (80058a8 <HAL_RCC_ClockConfig+0x260>)
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f023 020f 	bic.w	r2, r3, #15
 8005676:	498c      	ldr	r1, [pc, #560]	; (80058a8 <HAL_RCC_ClockConfig+0x260>)
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	4313      	orrs	r3, r2
 800567c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800567e:	4b8a      	ldr	r3, [pc, #552]	; (80058a8 <HAL_RCC_ClockConfig+0x260>)
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f003 030f 	and.w	r3, r3, #15
 8005686:	683a      	ldr	r2, [r7, #0]
 8005688:	429a      	cmp	r2, r3
 800568a:	d001      	beq.n	8005690 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800568c:	2301      	movs	r3, #1
 800568e:	e106      	b.n	800589e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f003 0301 	and.w	r3, r3, #1
 8005698:	2b00      	cmp	r3, #0
 800569a:	d073      	beq.n	8005784 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	685b      	ldr	r3, [r3, #4]
 80056a0:	2b03      	cmp	r3, #3
 80056a2:	d129      	bne.n	80056f8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80056a4:	4b81      	ldr	r3, [pc, #516]	; (80058ac <HAL_RCC_ClockConfig+0x264>)
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d101      	bne.n	80056b4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80056b0:	2301      	movs	r3, #1
 80056b2:	e0f4      	b.n	800589e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80056b4:	f000 f972 	bl	800599c <RCC_GetSysClockFreqFromPLLSource>
 80056b8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80056ba:	693b      	ldr	r3, [r7, #16]
 80056bc:	4a7c      	ldr	r2, [pc, #496]	; (80058b0 <HAL_RCC_ClockConfig+0x268>)
 80056be:	4293      	cmp	r3, r2
 80056c0:	d93f      	bls.n	8005742 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80056c2:	4b7a      	ldr	r3, [pc, #488]	; (80058ac <HAL_RCC_ClockConfig+0x264>)
 80056c4:	689b      	ldr	r3, [r3, #8]
 80056c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d009      	beq.n	80056e2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d033      	beq.n	8005742 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d12f      	bne.n	8005742 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80056e2:	4b72      	ldr	r3, [pc, #456]	; (80058ac <HAL_RCC_ClockConfig+0x264>)
 80056e4:	689b      	ldr	r3, [r3, #8]
 80056e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80056ea:	4a70      	ldr	r2, [pc, #448]	; (80058ac <HAL_RCC_ClockConfig+0x264>)
 80056ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056f0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80056f2:	2380      	movs	r3, #128	; 0x80
 80056f4:	617b      	str	r3, [r7, #20]
 80056f6:	e024      	b.n	8005742 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	685b      	ldr	r3, [r3, #4]
 80056fc:	2b02      	cmp	r3, #2
 80056fe:	d107      	bne.n	8005710 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005700:	4b6a      	ldr	r3, [pc, #424]	; (80058ac <HAL_RCC_ClockConfig+0x264>)
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005708:	2b00      	cmp	r3, #0
 800570a:	d109      	bne.n	8005720 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800570c:	2301      	movs	r3, #1
 800570e:	e0c6      	b.n	800589e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005710:	4b66      	ldr	r3, [pc, #408]	; (80058ac <HAL_RCC_ClockConfig+0x264>)
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005718:	2b00      	cmp	r3, #0
 800571a:	d101      	bne.n	8005720 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800571c:	2301      	movs	r3, #1
 800571e:	e0be      	b.n	800589e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005720:	f000 f8ce 	bl	80058c0 <HAL_RCC_GetSysClockFreq>
 8005724:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8005726:	693b      	ldr	r3, [r7, #16]
 8005728:	4a61      	ldr	r2, [pc, #388]	; (80058b0 <HAL_RCC_ClockConfig+0x268>)
 800572a:	4293      	cmp	r3, r2
 800572c:	d909      	bls.n	8005742 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800572e:	4b5f      	ldr	r3, [pc, #380]	; (80058ac <HAL_RCC_ClockConfig+0x264>)
 8005730:	689b      	ldr	r3, [r3, #8]
 8005732:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005736:	4a5d      	ldr	r2, [pc, #372]	; (80058ac <HAL_RCC_ClockConfig+0x264>)
 8005738:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800573c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800573e:	2380      	movs	r3, #128	; 0x80
 8005740:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005742:	4b5a      	ldr	r3, [pc, #360]	; (80058ac <HAL_RCC_ClockConfig+0x264>)
 8005744:	689b      	ldr	r3, [r3, #8]
 8005746:	f023 0203 	bic.w	r2, r3, #3
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	685b      	ldr	r3, [r3, #4]
 800574e:	4957      	ldr	r1, [pc, #348]	; (80058ac <HAL_RCC_ClockConfig+0x264>)
 8005750:	4313      	orrs	r3, r2
 8005752:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005754:	f7fc f960 	bl	8001a18 <HAL_GetTick>
 8005758:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800575a:	e00a      	b.n	8005772 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800575c:	f7fc f95c 	bl	8001a18 <HAL_GetTick>
 8005760:	4602      	mov	r2, r0
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	1ad3      	subs	r3, r2, r3
 8005766:	f241 3288 	movw	r2, #5000	; 0x1388
 800576a:	4293      	cmp	r3, r2
 800576c:	d901      	bls.n	8005772 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800576e:	2303      	movs	r3, #3
 8005770:	e095      	b.n	800589e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005772:	4b4e      	ldr	r3, [pc, #312]	; (80058ac <HAL_RCC_ClockConfig+0x264>)
 8005774:	689b      	ldr	r3, [r3, #8]
 8005776:	f003 020c 	and.w	r2, r3, #12
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	685b      	ldr	r3, [r3, #4]
 800577e:	009b      	lsls	r3, r3, #2
 8005780:	429a      	cmp	r2, r3
 8005782:	d1eb      	bne.n	800575c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f003 0302 	and.w	r3, r3, #2
 800578c:	2b00      	cmp	r3, #0
 800578e:	d023      	beq.n	80057d8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f003 0304 	and.w	r3, r3, #4
 8005798:	2b00      	cmp	r3, #0
 800579a:	d005      	beq.n	80057a8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800579c:	4b43      	ldr	r3, [pc, #268]	; (80058ac <HAL_RCC_ClockConfig+0x264>)
 800579e:	689b      	ldr	r3, [r3, #8]
 80057a0:	4a42      	ldr	r2, [pc, #264]	; (80058ac <HAL_RCC_ClockConfig+0x264>)
 80057a2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80057a6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f003 0308 	and.w	r3, r3, #8
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d007      	beq.n	80057c4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80057b4:	4b3d      	ldr	r3, [pc, #244]	; (80058ac <HAL_RCC_ClockConfig+0x264>)
 80057b6:	689b      	ldr	r3, [r3, #8]
 80057b8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80057bc:	4a3b      	ldr	r2, [pc, #236]	; (80058ac <HAL_RCC_ClockConfig+0x264>)
 80057be:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80057c2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80057c4:	4b39      	ldr	r3, [pc, #228]	; (80058ac <HAL_RCC_ClockConfig+0x264>)
 80057c6:	689b      	ldr	r3, [r3, #8]
 80057c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	689b      	ldr	r3, [r3, #8]
 80057d0:	4936      	ldr	r1, [pc, #216]	; (80058ac <HAL_RCC_ClockConfig+0x264>)
 80057d2:	4313      	orrs	r3, r2
 80057d4:	608b      	str	r3, [r1, #8]
 80057d6:	e008      	b.n	80057ea <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80057d8:	697b      	ldr	r3, [r7, #20]
 80057da:	2b80      	cmp	r3, #128	; 0x80
 80057dc:	d105      	bne.n	80057ea <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80057de:	4b33      	ldr	r3, [pc, #204]	; (80058ac <HAL_RCC_ClockConfig+0x264>)
 80057e0:	689b      	ldr	r3, [r3, #8]
 80057e2:	4a32      	ldr	r2, [pc, #200]	; (80058ac <HAL_RCC_ClockConfig+0x264>)
 80057e4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80057e8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80057ea:	4b2f      	ldr	r3, [pc, #188]	; (80058a8 <HAL_RCC_ClockConfig+0x260>)
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f003 030f 	and.w	r3, r3, #15
 80057f2:	683a      	ldr	r2, [r7, #0]
 80057f4:	429a      	cmp	r2, r3
 80057f6:	d21d      	bcs.n	8005834 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80057f8:	4b2b      	ldr	r3, [pc, #172]	; (80058a8 <HAL_RCC_ClockConfig+0x260>)
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f023 020f 	bic.w	r2, r3, #15
 8005800:	4929      	ldr	r1, [pc, #164]	; (80058a8 <HAL_RCC_ClockConfig+0x260>)
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	4313      	orrs	r3, r2
 8005806:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005808:	f7fc f906 	bl	8001a18 <HAL_GetTick>
 800580c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800580e:	e00a      	b.n	8005826 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005810:	f7fc f902 	bl	8001a18 <HAL_GetTick>
 8005814:	4602      	mov	r2, r0
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	1ad3      	subs	r3, r2, r3
 800581a:	f241 3288 	movw	r2, #5000	; 0x1388
 800581e:	4293      	cmp	r3, r2
 8005820:	d901      	bls.n	8005826 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8005822:	2303      	movs	r3, #3
 8005824:	e03b      	b.n	800589e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005826:	4b20      	ldr	r3, [pc, #128]	; (80058a8 <HAL_RCC_ClockConfig+0x260>)
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f003 030f 	and.w	r3, r3, #15
 800582e:	683a      	ldr	r2, [r7, #0]
 8005830:	429a      	cmp	r2, r3
 8005832:	d1ed      	bne.n	8005810 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f003 0304 	and.w	r3, r3, #4
 800583c:	2b00      	cmp	r3, #0
 800583e:	d008      	beq.n	8005852 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005840:	4b1a      	ldr	r3, [pc, #104]	; (80058ac <HAL_RCC_ClockConfig+0x264>)
 8005842:	689b      	ldr	r3, [r3, #8]
 8005844:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	68db      	ldr	r3, [r3, #12]
 800584c:	4917      	ldr	r1, [pc, #92]	; (80058ac <HAL_RCC_ClockConfig+0x264>)
 800584e:	4313      	orrs	r3, r2
 8005850:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f003 0308 	and.w	r3, r3, #8
 800585a:	2b00      	cmp	r3, #0
 800585c:	d009      	beq.n	8005872 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800585e:	4b13      	ldr	r3, [pc, #76]	; (80058ac <HAL_RCC_ClockConfig+0x264>)
 8005860:	689b      	ldr	r3, [r3, #8]
 8005862:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	691b      	ldr	r3, [r3, #16]
 800586a:	00db      	lsls	r3, r3, #3
 800586c:	490f      	ldr	r1, [pc, #60]	; (80058ac <HAL_RCC_ClockConfig+0x264>)
 800586e:	4313      	orrs	r3, r2
 8005870:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005872:	f000 f825 	bl	80058c0 <HAL_RCC_GetSysClockFreq>
 8005876:	4602      	mov	r2, r0
 8005878:	4b0c      	ldr	r3, [pc, #48]	; (80058ac <HAL_RCC_ClockConfig+0x264>)
 800587a:	689b      	ldr	r3, [r3, #8]
 800587c:	091b      	lsrs	r3, r3, #4
 800587e:	f003 030f 	and.w	r3, r3, #15
 8005882:	490c      	ldr	r1, [pc, #48]	; (80058b4 <HAL_RCC_ClockConfig+0x26c>)
 8005884:	5ccb      	ldrb	r3, [r1, r3]
 8005886:	f003 031f 	and.w	r3, r3, #31
 800588a:	fa22 f303 	lsr.w	r3, r2, r3
 800588e:	4a0a      	ldr	r2, [pc, #40]	; (80058b8 <HAL_RCC_ClockConfig+0x270>)
 8005890:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005892:	4b0a      	ldr	r3, [pc, #40]	; (80058bc <HAL_RCC_ClockConfig+0x274>)
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	4618      	mov	r0, r3
 8005898:	f7fc f872 	bl	8001980 <HAL_InitTick>
 800589c:	4603      	mov	r3, r0
}
 800589e:	4618      	mov	r0, r3
 80058a0:	3718      	adds	r7, #24
 80058a2:	46bd      	mov	sp, r7
 80058a4:	bd80      	pop	{r7, pc}
 80058a6:	bf00      	nop
 80058a8:	40022000 	.word	0x40022000
 80058ac:	40021000 	.word	0x40021000
 80058b0:	04c4b400 	.word	0x04c4b400
 80058b4:	08007ba4 	.word	0x08007ba4
 80058b8:	20000010 	.word	0x20000010
 80058bc:	20000014 	.word	0x20000014

080058c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80058c0:	b480      	push	{r7}
 80058c2:	b087      	sub	sp, #28
 80058c4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80058c6:	4b2c      	ldr	r3, [pc, #176]	; (8005978 <HAL_RCC_GetSysClockFreq+0xb8>)
 80058c8:	689b      	ldr	r3, [r3, #8]
 80058ca:	f003 030c 	and.w	r3, r3, #12
 80058ce:	2b04      	cmp	r3, #4
 80058d0:	d102      	bne.n	80058d8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80058d2:	4b2a      	ldr	r3, [pc, #168]	; (800597c <HAL_RCC_GetSysClockFreq+0xbc>)
 80058d4:	613b      	str	r3, [r7, #16]
 80058d6:	e047      	b.n	8005968 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80058d8:	4b27      	ldr	r3, [pc, #156]	; (8005978 <HAL_RCC_GetSysClockFreq+0xb8>)
 80058da:	689b      	ldr	r3, [r3, #8]
 80058dc:	f003 030c 	and.w	r3, r3, #12
 80058e0:	2b08      	cmp	r3, #8
 80058e2:	d102      	bne.n	80058ea <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80058e4:	4b26      	ldr	r3, [pc, #152]	; (8005980 <HAL_RCC_GetSysClockFreq+0xc0>)
 80058e6:	613b      	str	r3, [r7, #16]
 80058e8:	e03e      	b.n	8005968 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80058ea:	4b23      	ldr	r3, [pc, #140]	; (8005978 <HAL_RCC_GetSysClockFreq+0xb8>)
 80058ec:	689b      	ldr	r3, [r3, #8]
 80058ee:	f003 030c 	and.w	r3, r3, #12
 80058f2:	2b0c      	cmp	r3, #12
 80058f4:	d136      	bne.n	8005964 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80058f6:	4b20      	ldr	r3, [pc, #128]	; (8005978 <HAL_RCC_GetSysClockFreq+0xb8>)
 80058f8:	68db      	ldr	r3, [r3, #12]
 80058fa:	f003 0303 	and.w	r3, r3, #3
 80058fe:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005900:	4b1d      	ldr	r3, [pc, #116]	; (8005978 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005902:	68db      	ldr	r3, [r3, #12]
 8005904:	091b      	lsrs	r3, r3, #4
 8005906:	f003 030f 	and.w	r3, r3, #15
 800590a:	3301      	adds	r3, #1
 800590c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	2b03      	cmp	r3, #3
 8005912:	d10c      	bne.n	800592e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005914:	4a1a      	ldr	r2, [pc, #104]	; (8005980 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005916:	68bb      	ldr	r3, [r7, #8]
 8005918:	fbb2 f3f3 	udiv	r3, r2, r3
 800591c:	4a16      	ldr	r2, [pc, #88]	; (8005978 <HAL_RCC_GetSysClockFreq+0xb8>)
 800591e:	68d2      	ldr	r2, [r2, #12]
 8005920:	0a12      	lsrs	r2, r2, #8
 8005922:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005926:	fb02 f303 	mul.w	r3, r2, r3
 800592a:	617b      	str	r3, [r7, #20]
      break;
 800592c:	e00c      	b.n	8005948 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800592e:	4a13      	ldr	r2, [pc, #76]	; (800597c <HAL_RCC_GetSysClockFreq+0xbc>)
 8005930:	68bb      	ldr	r3, [r7, #8]
 8005932:	fbb2 f3f3 	udiv	r3, r2, r3
 8005936:	4a10      	ldr	r2, [pc, #64]	; (8005978 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005938:	68d2      	ldr	r2, [r2, #12]
 800593a:	0a12      	lsrs	r2, r2, #8
 800593c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005940:	fb02 f303 	mul.w	r3, r2, r3
 8005944:	617b      	str	r3, [r7, #20]
      break;
 8005946:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005948:	4b0b      	ldr	r3, [pc, #44]	; (8005978 <HAL_RCC_GetSysClockFreq+0xb8>)
 800594a:	68db      	ldr	r3, [r3, #12]
 800594c:	0e5b      	lsrs	r3, r3, #25
 800594e:	f003 0303 	and.w	r3, r3, #3
 8005952:	3301      	adds	r3, #1
 8005954:	005b      	lsls	r3, r3, #1
 8005956:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005958:	697a      	ldr	r2, [r7, #20]
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005960:	613b      	str	r3, [r7, #16]
 8005962:	e001      	b.n	8005968 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005964:	2300      	movs	r3, #0
 8005966:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005968:	693b      	ldr	r3, [r7, #16]
}
 800596a:	4618      	mov	r0, r3
 800596c:	371c      	adds	r7, #28
 800596e:	46bd      	mov	sp, r7
 8005970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005974:	4770      	bx	lr
 8005976:	bf00      	nop
 8005978:	40021000 	.word	0x40021000
 800597c:	00f42400 	.word	0x00f42400
 8005980:	007a1200 	.word	0x007a1200

08005984 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005984:	b480      	push	{r7}
 8005986:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005988:	4b03      	ldr	r3, [pc, #12]	; (8005998 <HAL_RCC_GetHCLKFreq+0x14>)
 800598a:	681b      	ldr	r3, [r3, #0]
}
 800598c:	4618      	mov	r0, r3
 800598e:	46bd      	mov	sp, r7
 8005990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005994:	4770      	bx	lr
 8005996:	bf00      	nop
 8005998:	20000010 	.word	0x20000010

0800599c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800599c:	b480      	push	{r7}
 800599e:	b087      	sub	sp, #28
 80059a0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80059a2:	4b1e      	ldr	r3, [pc, #120]	; (8005a1c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80059a4:	68db      	ldr	r3, [r3, #12]
 80059a6:	f003 0303 	and.w	r3, r3, #3
 80059aa:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80059ac:	4b1b      	ldr	r3, [pc, #108]	; (8005a1c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80059ae:	68db      	ldr	r3, [r3, #12]
 80059b0:	091b      	lsrs	r3, r3, #4
 80059b2:	f003 030f 	and.w	r3, r3, #15
 80059b6:	3301      	adds	r3, #1
 80059b8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80059ba:	693b      	ldr	r3, [r7, #16]
 80059bc:	2b03      	cmp	r3, #3
 80059be:	d10c      	bne.n	80059da <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80059c0:	4a17      	ldr	r2, [pc, #92]	; (8005a20 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80059c8:	4a14      	ldr	r2, [pc, #80]	; (8005a1c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80059ca:	68d2      	ldr	r2, [r2, #12]
 80059cc:	0a12      	lsrs	r2, r2, #8
 80059ce:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80059d2:	fb02 f303 	mul.w	r3, r2, r3
 80059d6:	617b      	str	r3, [r7, #20]
    break;
 80059d8:	e00c      	b.n	80059f4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80059da:	4a12      	ldr	r2, [pc, #72]	; (8005a24 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	fbb2 f3f3 	udiv	r3, r2, r3
 80059e2:	4a0e      	ldr	r2, [pc, #56]	; (8005a1c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80059e4:	68d2      	ldr	r2, [r2, #12]
 80059e6:	0a12      	lsrs	r2, r2, #8
 80059e8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80059ec:	fb02 f303 	mul.w	r3, r2, r3
 80059f0:	617b      	str	r3, [r7, #20]
    break;
 80059f2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80059f4:	4b09      	ldr	r3, [pc, #36]	; (8005a1c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80059f6:	68db      	ldr	r3, [r3, #12]
 80059f8:	0e5b      	lsrs	r3, r3, #25
 80059fa:	f003 0303 	and.w	r3, r3, #3
 80059fe:	3301      	adds	r3, #1
 8005a00:	005b      	lsls	r3, r3, #1
 8005a02:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005a04:	697a      	ldr	r2, [r7, #20]
 8005a06:	68bb      	ldr	r3, [r7, #8]
 8005a08:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a0c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8005a0e:	687b      	ldr	r3, [r7, #4]
}
 8005a10:	4618      	mov	r0, r3
 8005a12:	371c      	adds	r7, #28
 8005a14:	46bd      	mov	sp, r7
 8005a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1a:	4770      	bx	lr
 8005a1c:	40021000 	.word	0x40021000
 8005a20:	007a1200 	.word	0x007a1200
 8005a24:	00f42400 	.word	0x00f42400

08005a28 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b086      	sub	sp, #24
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005a30:	2300      	movs	r3, #0
 8005a32:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005a34:	2300      	movs	r3, #0
 8005a36:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	f000 8098 	beq.w	8005b76 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005a46:	2300      	movs	r3, #0
 8005a48:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005a4a:	4b43      	ldr	r3, [pc, #268]	; (8005b58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005a4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d10d      	bne.n	8005a72 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005a56:	4b40      	ldr	r3, [pc, #256]	; (8005b58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005a58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a5a:	4a3f      	ldr	r2, [pc, #252]	; (8005b58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005a5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a60:	6593      	str	r3, [r2, #88]	; 0x58
 8005a62:	4b3d      	ldr	r3, [pc, #244]	; (8005b58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005a64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a6a:	60bb      	str	r3, [r7, #8]
 8005a6c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005a6e:	2301      	movs	r3, #1
 8005a70:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005a72:	4b3a      	ldr	r3, [pc, #232]	; (8005b5c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	4a39      	ldr	r2, [pc, #228]	; (8005b5c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005a78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a7c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005a7e:	f7fb ffcb 	bl	8001a18 <HAL_GetTick>
 8005a82:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005a84:	e009      	b.n	8005a9a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a86:	f7fb ffc7 	bl	8001a18 <HAL_GetTick>
 8005a8a:	4602      	mov	r2, r0
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	1ad3      	subs	r3, r2, r3
 8005a90:	2b02      	cmp	r3, #2
 8005a92:	d902      	bls.n	8005a9a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005a94:	2303      	movs	r3, #3
 8005a96:	74fb      	strb	r3, [r7, #19]
        break;
 8005a98:	e005      	b.n	8005aa6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005a9a:	4b30      	ldr	r3, [pc, #192]	; (8005b5c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d0ef      	beq.n	8005a86 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8005aa6:	7cfb      	ldrb	r3, [r7, #19]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d159      	bne.n	8005b60 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005aac:	4b2a      	ldr	r3, [pc, #168]	; (8005b58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005aae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ab2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ab6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005ab8:	697b      	ldr	r3, [r7, #20]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d01e      	beq.n	8005afc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ac2:	697a      	ldr	r2, [r7, #20]
 8005ac4:	429a      	cmp	r2, r3
 8005ac6:	d019      	beq.n	8005afc <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005ac8:	4b23      	ldr	r3, [pc, #140]	; (8005b58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005aca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ace:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ad2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005ad4:	4b20      	ldr	r3, [pc, #128]	; (8005b58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005ad6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ada:	4a1f      	ldr	r2, [pc, #124]	; (8005b58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005adc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ae0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005ae4:	4b1c      	ldr	r3, [pc, #112]	; (8005b58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005ae6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005aea:	4a1b      	ldr	r2, [pc, #108]	; (8005b58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005aec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005af0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005af4:	4a18      	ldr	r2, [pc, #96]	; (8005b58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005af6:	697b      	ldr	r3, [r7, #20]
 8005af8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005afc:	697b      	ldr	r3, [r7, #20]
 8005afe:	f003 0301 	and.w	r3, r3, #1
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d016      	beq.n	8005b34 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b06:	f7fb ff87 	bl	8001a18 <HAL_GetTick>
 8005b0a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005b0c:	e00b      	b.n	8005b26 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b0e:	f7fb ff83 	bl	8001a18 <HAL_GetTick>
 8005b12:	4602      	mov	r2, r0
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	1ad3      	subs	r3, r2, r3
 8005b18:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	d902      	bls.n	8005b26 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005b20:	2303      	movs	r3, #3
 8005b22:	74fb      	strb	r3, [r7, #19]
            break;
 8005b24:	e006      	b.n	8005b34 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005b26:	4b0c      	ldr	r3, [pc, #48]	; (8005b58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b2c:	f003 0302 	and.w	r3, r3, #2
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d0ec      	beq.n	8005b0e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005b34:	7cfb      	ldrb	r3, [r7, #19]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d10b      	bne.n	8005b52 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005b3a:	4b07      	ldr	r3, [pc, #28]	; (8005b58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b40:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b48:	4903      	ldr	r1, [pc, #12]	; (8005b58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b4a:	4313      	orrs	r3, r2
 8005b4c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005b50:	e008      	b.n	8005b64 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005b52:	7cfb      	ldrb	r3, [r7, #19]
 8005b54:	74bb      	strb	r3, [r7, #18]
 8005b56:	e005      	b.n	8005b64 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005b58:	40021000 	.word	0x40021000
 8005b5c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b60:	7cfb      	ldrb	r3, [r7, #19]
 8005b62:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005b64:	7c7b      	ldrb	r3, [r7, #17]
 8005b66:	2b01      	cmp	r3, #1
 8005b68:	d105      	bne.n	8005b76 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005b6a:	4ba7      	ldr	r3, [pc, #668]	; (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b6e:	4aa6      	ldr	r2, [pc, #664]	; (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b70:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005b74:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f003 0301 	and.w	r3, r3, #1
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d00a      	beq.n	8005b98 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005b82:	4ba1      	ldr	r3, [pc, #644]	; (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b88:	f023 0203 	bic.w	r2, r3, #3
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	685b      	ldr	r3, [r3, #4]
 8005b90:	499d      	ldr	r1, [pc, #628]	; (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b92:	4313      	orrs	r3, r2
 8005b94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f003 0302 	and.w	r3, r3, #2
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d00a      	beq.n	8005bba <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005ba4:	4b98      	ldr	r3, [pc, #608]	; (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ba6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005baa:	f023 020c 	bic.w	r2, r3, #12
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	689b      	ldr	r3, [r3, #8]
 8005bb2:	4995      	ldr	r1, [pc, #596]	; (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005bb4:	4313      	orrs	r3, r2
 8005bb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f003 0304 	and.w	r3, r3, #4
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d00a      	beq.n	8005bdc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005bc6:	4b90      	ldr	r3, [pc, #576]	; (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005bc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bcc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	68db      	ldr	r3, [r3, #12]
 8005bd4:	498c      	ldr	r1, [pc, #560]	; (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005bd6:	4313      	orrs	r3, r2
 8005bd8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f003 0308 	and.w	r3, r3, #8
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d00a      	beq.n	8005bfe <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005be8:	4b87      	ldr	r3, [pc, #540]	; (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005bea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bee:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	691b      	ldr	r3, [r3, #16]
 8005bf6:	4984      	ldr	r1, [pc, #528]	; (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005bf8:	4313      	orrs	r3, r2
 8005bfa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f003 0310 	and.w	r3, r3, #16
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d00a      	beq.n	8005c20 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005c0a:	4b7f      	ldr	r3, [pc, #508]	; (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c10:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	695b      	ldr	r3, [r3, #20]
 8005c18:	497b      	ldr	r1, [pc, #492]	; (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c1a:	4313      	orrs	r3, r2
 8005c1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f003 0320 	and.w	r3, r3, #32
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d00a      	beq.n	8005c42 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005c2c:	4b76      	ldr	r3, [pc, #472]	; (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c32:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	699b      	ldr	r3, [r3, #24]
 8005c3a:	4973      	ldr	r1, [pc, #460]	; (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c3c:	4313      	orrs	r3, r2
 8005c3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d00a      	beq.n	8005c64 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005c4e:	4b6e      	ldr	r3, [pc, #440]	; (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c54:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	69db      	ldr	r3, [r3, #28]
 8005c5c:	496a      	ldr	r1, [pc, #424]	; (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c5e:	4313      	orrs	r3, r2
 8005c60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d00a      	beq.n	8005c86 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005c70:	4b65      	ldr	r3, [pc, #404]	; (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c76:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6a1b      	ldr	r3, [r3, #32]
 8005c7e:	4962      	ldr	r1, [pc, #392]	; (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c80:	4313      	orrs	r3, r2
 8005c82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d00a      	beq.n	8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005c92:	4b5d      	ldr	r3, [pc, #372]	; (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c98:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ca0:	4959      	ldr	r1, [pc, #356]	; (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ca2:	4313      	orrs	r3, r2
 8005ca4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d00a      	beq.n	8005cca <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005cb4:	4b54      	ldr	r3, [pc, #336]	; (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005cb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cba:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cc2:	4951      	ldr	r1, [pc, #324]	; (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005cc4:	4313      	orrs	r3, r2
 8005cc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d015      	beq.n	8005d02 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005cd6:	4b4c      	ldr	r3, [pc, #304]	; (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005cd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cdc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ce4:	4948      	ldr	r1, [pc, #288]	; (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ce6:	4313      	orrs	r3, r2
 8005ce8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cf0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005cf4:	d105      	bne.n	8005d02 <HAL_RCCEx_PeriphCLKConfig+0x2da>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005cf6:	4b44      	ldr	r3, [pc, #272]	; (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005cf8:	68db      	ldr	r3, [r3, #12]
 8005cfa:	4a43      	ldr	r2, [pc, #268]	; (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005cfc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005d00:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d015      	beq.n	8005d3a <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005d0e:	4b3e      	ldr	r3, [pc, #248]	; (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d14:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d1c:	493a      	ldr	r1, [pc, #232]	; (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d1e:	4313      	orrs	r3, r2
 8005d20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d28:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005d2c:	d105      	bne.n	8005d3a <HAL_RCCEx_PeriphCLKConfig+0x312>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005d2e:	4b36      	ldr	r3, [pc, #216]	; (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d30:	68db      	ldr	r3, [r3, #12]
 8005d32:	4a35      	ldr	r2, [pc, #212]	; (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d34:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005d38:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d015      	beq.n	8005d72 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005d46:	4b30      	ldr	r3, [pc, #192]	; (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d4c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d54:	492c      	ldr	r1, [pc, #176]	; (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d56:	4313      	orrs	r3, r2
 8005d58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d60:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005d64:	d105      	bne.n	8005d72 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005d66:	4b28      	ldr	r3, [pc, #160]	; (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d68:	68db      	ldr	r3, [r3, #12]
 8005d6a:	4a27      	ldr	r2, [pc, #156]	; (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d6c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005d70:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d015      	beq.n	8005daa <HAL_RCCEx_PeriphCLKConfig+0x382>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005d7e:	4b22      	ldr	r3, [pc, #136]	; (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d84:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d8c:	491e      	ldr	r1, [pc, #120]	; (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d8e:	4313      	orrs	r3, r2
 8005d90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d98:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005d9c:	d105      	bne.n	8005daa <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005d9e:	4b1a      	ldr	r3, [pc, #104]	; (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005da0:	68db      	ldr	r3, [r3, #12]
 8005da2:	4a19      	ldr	r2, [pc, #100]	; (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005da4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005da8:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d015      	beq.n	8005de2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005db6:	4b14      	ldr	r3, [pc, #80]	; (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005db8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dbc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dc4:	4910      	ldr	r1, [pc, #64]	; (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005dc6:	4313      	orrs	r3, r2
 8005dc8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dd0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005dd4:	d105      	bne.n	8005de2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005dd6:	4b0c      	ldr	r3, [pc, #48]	; (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005dd8:	68db      	ldr	r3, [r3, #12]
 8005dda:	4a0b      	ldr	r2, [pc, #44]	; (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ddc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005de0:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d018      	beq.n	8005e20 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005dee:	4b06      	ldr	r3, [pc, #24]	; (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005df0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005df4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dfc:	4902      	ldr	r1, [pc, #8]	; (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005dfe:	4313      	orrs	r3, r2
 8005e00:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	e001      	b.n	8005e0c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8005e08:	40021000 	.word	0x40021000
 8005e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e0e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005e12:	d105      	bne.n	8005e20 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005e14:	4b21      	ldr	r3, [pc, #132]	; (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8005e16:	68db      	ldr	r3, [r3, #12]
 8005e18:	4a20      	ldr	r2, [pc, #128]	; (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8005e1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e1e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d015      	beq.n	8005e58 <HAL_RCCEx_PeriphCLKConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8005e2c:	4b1b      	ldr	r3, [pc, #108]	; (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8005e2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e32:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e3a:	4918      	ldr	r1, [pc, #96]	; (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8005e3c:	4313      	orrs	r3, r2
 8005e3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e4a:	d105      	bne.n	8005e58 <HAL_RCCEx_PeriphCLKConfig+0x430>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005e4c:	4b13      	ldr	r3, [pc, #76]	; (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8005e4e:	68db      	ldr	r3, [r3, #12]
 8005e50:	4a12      	ldr	r2, [pc, #72]	; (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8005e52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e56:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d015      	beq.n	8005e90 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005e64:	4b0d      	ldr	r3, [pc, #52]	; (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8005e66:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005e6a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e72:	490a      	ldr	r1, [pc, #40]	; (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8005e74:	4313      	orrs	r3, r2
 8005e76:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e7e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005e82:	d105      	bne.n	8005e90 <HAL_RCCEx_PeriphCLKConfig+0x468>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005e84:	4b05      	ldr	r3, [pc, #20]	; (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8005e86:	68db      	ldr	r3, [r3, #12]
 8005e88:	4a04      	ldr	r2, [pc, #16]	; (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8005e8a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005e8e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005e90:	7cbb      	ldrb	r3, [r7, #18]
}
 8005e92:	4618      	mov	r0, r3
 8005e94:	3718      	adds	r7, #24
 8005e96:	46bd      	mov	sp, r7
 8005e98:	bd80      	pop	{r7, pc}
 8005e9a:	bf00      	nop
 8005e9c:	40021000 	.word	0x40021000

08005ea0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b084      	sub	sp, #16
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d101      	bne.n	8005eb2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005eae:	2301      	movs	r3, #1
 8005eb0:	e09d      	b.n	8005fee <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d108      	bne.n	8005ecc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	685b      	ldr	r3, [r3, #4]
 8005ebe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005ec2:	d009      	beq.n	8005ed8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	61da      	str	r2, [r3, #28]
 8005eca:	e005      	b.n	8005ed8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2200      	movs	r2, #0
 8005ed0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	2200      	movs	r2, #0
 8005ed6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2200      	movs	r2, #0
 8005edc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005ee4:	b2db      	uxtb	r3, r3
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d106      	bne.n	8005ef8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	2200      	movs	r2, #0
 8005eee:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005ef2:	6878      	ldr	r0, [r7, #4]
 8005ef4:	f7fb fbdc 	bl	80016b0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2202      	movs	r2, #2
 8005efc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	681a      	ldr	r2, [r3, #0]
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f0e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	68db      	ldr	r3, [r3, #12]
 8005f14:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005f18:	d902      	bls.n	8005f20 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	60fb      	str	r3, [r7, #12]
 8005f1e:	e002      	b.n	8005f26 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005f20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005f24:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	68db      	ldr	r3, [r3, #12]
 8005f2a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005f2e:	d007      	beq.n	8005f40 <HAL_SPI_Init+0xa0>
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	68db      	ldr	r3, [r3, #12]
 8005f34:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005f38:	d002      	beq.n	8005f40 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	685b      	ldr	r3, [r3, #4]
 8005f44:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	689b      	ldr	r3, [r3, #8]
 8005f4c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005f50:	431a      	orrs	r2, r3
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	691b      	ldr	r3, [r3, #16]
 8005f56:	f003 0302 	and.w	r3, r3, #2
 8005f5a:	431a      	orrs	r2, r3
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	695b      	ldr	r3, [r3, #20]
 8005f60:	f003 0301 	and.w	r3, r3, #1
 8005f64:	431a      	orrs	r2, r3
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	699b      	ldr	r3, [r3, #24]
 8005f6a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005f6e:	431a      	orrs	r2, r3
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	69db      	ldr	r3, [r3, #28]
 8005f74:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005f78:	431a      	orrs	r2, r3
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6a1b      	ldr	r3, [r3, #32]
 8005f7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f82:	ea42 0103 	orr.w	r1, r2, r3
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f8a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	430a      	orrs	r2, r1
 8005f94:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	699b      	ldr	r3, [r3, #24]
 8005f9a:	0c1b      	lsrs	r3, r3, #16
 8005f9c:	f003 0204 	and.w	r2, r3, #4
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fa4:	f003 0310 	and.w	r3, r3, #16
 8005fa8:	431a      	orrs	r2, r3
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fae:	f003 0308 	and.w	r3, r3, #8
 8005fb2:	431a      	orrs	r2, r3
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	68db      	ldr	r3, [r3, #12]
 8005fb8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005fbc:	ea42 0103 	orr.w	r1, r2, r3
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	430a      	orrs	r2, r1
 8005fcc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	69da      	ldr	r2, [r3, #28]
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005fdc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2201      	movs	r2, #1
 8005fe8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005fec:	2300      	movs	r3, #0
}
 8005fee:	4618      	mov	r0, r3
 8005ff0:	3710      	adds	r7, #16
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	bd80      	pop	{r7, pc}

08005ff6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005ff6:	b580      	push	{r7, lr}
 8005ff8:	b082      	sub	sp, #8
 8005ffa:	af00      	add	r7, sp, #0
 8005ffc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d101      	bne.n	8006008 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006004:	2301      	movs	r3, #1
 8006006:	e049      	b.n	800609c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800600e:	b2db      	uxtb	r3, r3
 8006010:	2b00      	cmp	r3, #0
 8006012:	d106      	bne.n	8006022 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2200      	movs	r2, #0
 8006018:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800601c:	6878      	ldr	r0, [r7, #4]
 800601e:	f7fb fba9 	bl	8001774 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	2202      	movs	r2, #2
 8006026:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681a      	ldr	r2, [r3, #0]
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	3304      	adds	r3, #4
 8006032:	4619      	mov	r1, r3
 8006034:	4610      	mov	r0, r2
 8006036:	f000 fcb9 	bl	80069ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2201      	movs	r2, #1
 800603e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	2201      	movs	r2, #1
 8006046:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	2201      	movs	r2, #1
 800604e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	2201      	movs	r2, #1
 8006056:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	2201      	movs	r2, #1
 800605e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	2201      	movs	r2, #1
 8006066:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	2201      	movs	r2, #1
 800606e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2201      	movs	r2, #1
 8006076:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	2201      	movs	r2, #1
 800607e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	2201      	movs	r2, #1
 8006086:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2201      	movs	r2, #1
 800608e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	2201      	movs	r2, #1
 8006096:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800609a:	2300      	movs	r3, #0
}
 800609c:	4618      	mov	r0, r3
 800609e:	3708      	adds	r7, #8
 80060a0:	46bd      	mov	sp, r7
 80060a2:	bd80      	pop	{r7, pc}

080060a4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80060a4:	b580      	push	{r7, lr}
 80060a6:	b082      	sub	sp, #8
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d101      	bne.n	80060b6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80060b2:	2301      	movs	r3, #1
 80060b4:	e049      	b.n	800614a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060bc:	b2db      	uxtb	r3, r3
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d106      	bne.n	80060d0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	2200      	movs	r2, #0
 80060c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80060ca:	6878      	ldr	r0, [r7, #4]
 80060cc:	f000 f841 	bl	8006152 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2202      	movs	r2, #2
 80060d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681a      	ldr	r2, [r3, #0]
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	3304      	adds	r3, #4
 80060e0:	4619      	mov	r1, r3
 80060e2:	4610      	mov	r0, r2
 80060e4:	f000 fc62 	bl	80069ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2201      	movs	r2, #1
 80060ec:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2201      	movs	r2, #1
 80060f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2201      	movs	r2, #1
 80060fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2201      	movs	r2, #1
 8006104:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2201      	movs	r2, #1
 800610c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2201      	movs	r2, #1
 8006114:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2201      	movs	r2, #1
 800611c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2201      	movs	r2, #1
 8006124:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2201      	movs	r2, #1
 800612c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2201      	movs	r2, #1
 8006134:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2201      	movs	r2, #1
 800613c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2201      	movs	r2, #1
 8006144:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006148:	2300      	movs	r3, #0
}
 800614a:	4618      	mov	r0, r3
 800614c:	3708      	adds	r7, #8
 800614e:	46bd      	mov	sp, r7
 8006150:	bd80      	pop	{r7, pc}

08006152 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006152:	b480      	push	{r7}
 8006154:	b083      	sub	sp, #12
 8006156:	af00      	add	r7, sp, #0
 8006158:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800615a:	bf00      	nop
 800615c:	370c      	adds	r7, #12
 800615e:	46bd      	mov	sp, r7
 8006160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006164:	4770      	bx	lr

08006166 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8006166:	b580      	push	{r7, lr}
 8006168:	b082      	sub	sp, #8
 800616a:	af00      	add	r7, sp, #0
 800616c:	6078      	str	r0, [r7, #4]
 800616e:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2b00      	cmp	r3, #0
 8006174:	d101      	bne.n	800617a <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8006176:	2301      	movs	r3, #1
 8006178:	e041      	b.n	80061fe <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006180:	b2db      	uxtb	r3, r3
 8006182:	2b00      	cmp	r3, #0
 8006184:	d106      	bne.n	8006194 <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	2200      	movs	r2, #0
 800618a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 800618e:	6878      	ldr	r0, [r7, #4]
 8006190:	f000 f839 	bl	8006206 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2202      	movs	r2, #2
 8006198:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681a      	ldr	r2, [r3, #0]
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	3304      	adds	r3, #4
 80061a4:	4619      	mov	r1, r3
 80061a6:	4610      	mov	r0, r2
 80061a8:	f000 fc00 	bl	80069ac <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	681a      	ldr	r2, [r3, #0]
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f022 0208 	bic.w	r2, r2, #8
 80061ba:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	6819      	ldr	r1, [r3, #0]
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	683a      	ldr	r2, [r7, #0]
 80061c8:	430a      	orrs	r2, r1
 80061ca:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2201      	movs	r2, #1
 80061d0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2201      	movs	r2, #1
 80061d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2201      	movs	r2, #1
 80061e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2201      	movs	r2, #1
 80061e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2201      	movs	r2, #1
 80061f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2201      	movs	r2, #1
 80061f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80061fc:	2300      	movs	r3, #0
}
 80061fe:	4618      	mov	r0, r3
 8006200:	3708      	adds	r7, #8
 8006202:	46bd      	mov	sp, r7
 8006204:	bd80      	pop	{r7, pc}

08006206 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8006206:	b480      	push	{r7}
 8006208:	b083      	sub	sp, #12
 800620a:	af00      	add	r7, sp, #0
 800620c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 800620e:	bf00      	nop
 8006210:	370c      	adds	r7, #12
 8006212:	46bd      	mov	sp, r7
 8006214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006218:	4770      	bx	lr

0800621a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800621a:	b580      	push	{r7, lr}
 800621c:	b082      	sub	sp, #8
 800621e:	af00      	add	r7, sp, #0
 8006220:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	691b      	ldr	r3, [r3, #16]
 8006228:	f003 0302 	and.w	r3, r3, #2
 800622c:	2b02      	cmp	r3, #2
 800622e:	d122      	bne.n	8006276 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	68db      	ldr	r3, [r3, #12]
 8006236:	f003 0302 	and.w	r3, r3, #2
 800623a:	2b02      	cmp	r3, #2
 800623c:	d11b      	bne.n	8006276 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f06f 0202 	mvn.w	r2, #2
 8006246:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2201      	movs	r2, #1
 800624c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	699b      	ldr	r3, [r3, #24]
 8006254:	f003 0303 	and.w	r3, r3, #3
 8006258:	2b00      	cmp	r3, #0
 800625a:	d003      	beq.n	8006264 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800625c:	6878      	ldr	r0, [r7, #4]
 800625e:	f000 fb87 	bl	8006970 <HAL_TIM_IC_CaptureCallback>
 8006262:	e005      	b.n	8006270 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006264:	6878      	ldr	r0, [r7, #4]
 8006266:	f000 fb79 	bl	800695c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800626a:	6878      	ldr	r0, [r7, #4]
 800626c:	f000 fb8a 	bl	8006984 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2200      	movs	r2, #0
 8006274:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	691b      	ldr	r3, [r3, #16]
 800627c:	f003 0304 	and.w	r3, r3, #4
 8006280:	2b04      	cmp	r3, #4
 8006282:	d122      	bne.n	80062ca <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	68db      	ldr	r3, [r3, #12]
 800628a:	f003 0304 	and.w	r3, r3, #4
 800628e:	2b04      	cmp	r3, #4
 8006290:	d11b      	bne.n	80062ca <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f06f 0204 	mvn.w	r2, #4
 800629a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2202      	movs	r2, #2
 80062a0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	699b      	ldr	r3, [r3, #24]
 80062a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d003      	beq.n	80062b8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80062b0:	6878      	ldr	r0, [r7, #4]
 80062b2:	f000 fb5d 	bl	8006970 <HAL_TIM_IC_CaptureCallback>
 80062b6:	e005      	b.n	80062c4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80062b8:	6878      	ldr	r0, [r7, #4]
 80062ba:	f000 fb4f 	bl	800695c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062be:	6878      	ldr	r0, [r7, #4]
 80062c0:	f000 fb60 	bl	8006984 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2200      	movs	r2, #0
 80062c8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	691b      	ldr	r3, [r3, #16]
 80062d0:	f003 0308 	and.w	r3, r3, #8
 80062d4:	2b08      	cmp	r3, #8
 80062d6:	d122      	bne.n	800631e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	68db      	ldr	r3, [r3, #12]
 80062de:	f003 0308 	and.w	r3, r3, #8
 80062e2:	2b08      	cmp	r3, #8
 80062e4:	d11b      	bne.n	800631e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f06f 0208 	mvn.w	r2, #8
 80062ee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2204      	movs	r2, #4
 80062f4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	69db      	ldr	r3, [r3, #28]
 80062fc:	f003 0303 	and.w	r3, r3, #3
 8006300:	2b00      	cmp	r3, #0
 8006302:	d003      	beq.n	800630c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006304:	6878      	ldr	r0, [r7, #4]
 8006306:	f000 fb33 	bl	8006970 <HAL_TIM_IC_CaptureCallback>
 800630a:	e005      	b.n	8006318 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800630c:	6878      	ldr	r0, [r7, #4]
 800630e:	f000 fb25 	bl	800695c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006312:	6878      	ldr	r0, [r7, #4]
 8006314:	f000 fb36 	bl	8006984 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2200      	movs	r2, #0
 800631c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	691b      	ldr	r3, [r3, #16]
 8006324:	f003 0310 	and.w	r3, r3, #16
 8006328:	2b10      	cmp	r3, #16
 800632a:	d122      	bne.n	8006372 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	68db      	ldr	r3, [r3, #12]
 8006332:	f003 0310 	and.w	r3, r3, #16
 8006336:	2b10      	cmp	r3, #16
 8006338:	d11b      	bne.n	8006372 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f06f 0210 	mvn.w	r2, #16
 8006342:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2208      	movs	r2, #8
 8006348:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	69db      	ldr	r3, [r3, #28]
 8006350:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006354:	2b00      	cmp	r3, #0
 8006356:	d003      	beq.n	8006360 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006358:	6878      	ldr	r0, [r7, #4]
 800635a:	f000 fb09 	bl	8006970 <HAL_TIM_IC_CaptureCallback>
 800635e:	e005      	b.n	800636c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006360:	6878      	ldr	r0, [r7, #4]
 8006362:	f000 fafb 	bl	800695c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006366:	6878      	ldr	r0, [r7, #4]
 8006368:	f000 fb0c 	bl	8006984 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2200      	movs	r2, #0
 8006370:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	691b      	ldr	r3, [r3, #16]
 8006378:	f003 0301 	and.w	r3, r3, #1
 800637c:	2b01      	cmp	r3, #1
 800637e:	d10e      	bne.n	800639e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	68db      	ldr	r3, [r3, #12]
 8006386:	f003 0301 	and.w	r3, r3, #1
 800638a:	2b01      	cmp	r3, #1
 800638c:	d107      	bne.n	800639e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f06f 0201 	mvn.w	r2, #1
 8006396:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006398:	6878      	ldr	r0, [r7, #4]
 800639a:	f000 fad5 	bl	8006948 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	691b      	ldr	r3, [r3, #16]
 80063a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063a8:	2b80      	cmp	r3, #128	; 0x80
 80063aa:	d10e      	bne.n	80063ca <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	68db      	ldr	r3, [r3, #12]
 80063b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063b6:	2b80      	cmp	r3, #128	; 0x80
 80063b8:	d107      	bne.n	80063ca <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80063c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80063c4:	6878      	ldr	r0, [r7, #4]
 80063c6:	f7fa fe53 	bl	8001070 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	691b      	ldr	r3, [r3, #16]
 80063d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80063d8:	d10e      	bne.n	80063f8 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	68db      	ldr	r3, [r3, #12]
 80063e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063e4:	2b80      	cmp	r3, #128	; 0x80
 80063e6:	d107      	bne.n	80063f8 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80063f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80063f2:	6878      	ldr	r0, [r7, #4]
 80063f4:	f001 f960 	bl	80076b8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	691b      	ldr	r3, [r3, #16]
 80063fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006402:	2b40      	cmp	r3, #64	; 0x40
 8006404:	d10e      	bne.n	8006424 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	68db      	ldr	r3, [r3, #12]
 800640c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006410:	2b40      	cmp	r3, #64	; 0x40
 8006412:	d107      	bne.n	8006424 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800641c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800641e:	6878      	ldr	r0, [r7, #4]
 8006420:	f000 faba 	bl	8006998 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	691b      	ldr	r3, [r3, #16]
 800642a:	f003 0320 	and.w	r3, r3, #32
 800642e:	2b20      	cmp	r3, #32
 8006430:	d10e      	bne.n	8006450 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	68db      	ldr	r3, [r3, #12]
 8006438:	f003 0320 	and.w	r3, r3, #32
 800643c:	2b20      	cmp	r3, #32
 800643e:	d107      	bne.n	8006450 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	f06f 0220 	mvn.w	r2, #32
 8006448:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800644a:	6878      	ldr	r0, [r7, #4]
 800644c:	f001 f92a 	bl	80076a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	691b      	ldr	r3, [r3, #16]
 8006456:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800645a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800645e:	d10f      	bne.n	8006480 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	68db      	ldr	r3, [r3, #12]
 8006466:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800646a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800646e:	d107      	bne.n	8006480 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8006478:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800647a:	6878      	ldr	r0, [r7, #4]
 800647c:	f001 f926 	bl	80076cc <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	691b      	ldr	r3, [r3, #16]
 8006486:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800648a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800648e:	d10f      	bne.n	80064b0 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	68db      	ldr	r3, [r3, #12]
 8006496:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800649a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800649e:	d107      	bne.n	80064b0 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 80064a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80064aa:	6878      	ldr	r0, [r7, #4]
 80064ac:	f001 f918 	bl	80076e0 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	691b      	ldr	r3, [r3, #16]
 80064b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80064ba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80064be:	d10f      	bne.n	80064e0 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	68db      	ldr	r3, [r3, #12]
 80064c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80064ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80064ce:	d107      	bne.n	80064e0 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 80064d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80064da:	6878      	ldr	r0, [r7, #4]
 80064dc:	f001 f90a 	bl	80076f4 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	691b      	ldr	r3, [r3, #16]
 80064e6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80064ea:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80064ee:	d10f      	bne.n	8006510 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	68db      	ldr	r3, [r3, #12]
 80064f6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80064fa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80064fe:	d107      	bne.n	8006510 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8006508:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800650a:	6878      	ldr	r0, [r7, #4]
 800650c:	f001 f8fc 	bl	8007708 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006510:	bf00      	nop
 8006512:	3708      	adds	r7, #8
 8006514:	46bd      	mov	sp, r7
 8006516:	bd80      	pop	{r7, pc}

08006518 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006518:	b580      	push	{r7, lr}
 800651a:	b086      	sub	sp, #24
 800651c:	af00      	add	r7, sp, #0
 800651e:	60f8      	str	r0, [r7, #12]
 8006520:	60b9      	str	r1, [r7, #8]
 8006522:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006524:	2300      	movs	r3, #0
 8006526:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800652e:	2b01      	cmp	r3, #1
 8006530:	d101      	bne.n	8006536 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006532:	2302      	movs	r3, #2
 8006534:	e0ff      	b.n	8006736 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	2201      	movs	r2, #1
 800653a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	2b14      	cmp	r3, #20
 8006542:	f200 80f0 	bhi.w	8006726 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006546:	a201      	add	r2, pc, #4	; (adr r2, 800654c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006548:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800654c:	080065a1 	.word	0x080065a1
 8006550:	08006727 	.word	0x08006727
 8006554:	08006727 	.word	0x08006727
 8006558:	08006727 	.word	0x08006727
 800655c:	080065e1 	.word	0x080065e1
 8006560:	08006727 	.word	0x08006727
 8006564:	08006727 	.word	0x08006727
 8006568:	08006727 	.word	0x08006727
 800656c:	08006623 	.word	0x08006623
 8006570:	08006727 	.word	0x08006727
 8006574:	08006727 	.word	0x08006727
 8006578:	08006727 	.word	0x08006727
 800657c:	08006663 	.word	0x08006663
 8006580:	08006727 	.word	0x08006727
 8006584:	08006727 	.word	0x08006727
 8006588:	08006727 	.word	0x08006727
 800658c:	080066a5 	.word	0x080066a5
 8006590:	08006727 	.word	0x08006727
 8006594:	08006727 	.word	0x08006727
 8006598:	08006727 	.word	0x08006727
 800659c:	080066e5 	.word	0x080066e5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	68b9      	ldr	r1, [r7, #8]
 80065a6:	4618      	mov	r0, r3
 80065a8:	f000 fa9e 	bl	8006ae8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	699a      	ldr	r2, [r3, #24]
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f042 0208 	orr.w	r2, r2, #8
 80065ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	699a      	ldr	r2, [r3, #24]
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	f022 0204 	bic.w	r2, r2, #4
 80065ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	6999      	ldr	r1, [r3, #24]
 80065d2:	68bb      	ldr	r3, [r7, #8]
 80065d4:	691a      	ldr	r2, [r3, #16]
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	430a      	orrs	r2, r1
 80065dc:	619a      	str	r2, [r3, #24]
      break;
 80065de:	e0a5      	b.n	800672c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	68b9      	ldr	r1, [r7, #8]
 80065e6:	4618      	mov	r0, r3
 80065e8:	f000 fb18 	bl	8006c1c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	699a      	ldr	r2, [r3, #24]
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80065fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	699a      	ldr	r2, [r3, #24]
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800660a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	6999      	ldr	r1, [r3, #24]
 8006612:	68bb      	ldr	r3, [r7, #8]
 8006614:	691b      	ldr	r3, [r3, #16]
 8006616:	021a      	lsls	r2, r3, #8
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	430a      	orrs	r2, r1
 800661e:	619a      	str	r2, [r3, #24]
      break;
 8006620:	e084      	b.n	800672c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	68b9      	ldr	r1, [r7, #8]
 8006628:	4618      	mov	r0, r3
 800662a:	f000 fb8b 	bl	8006d44 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	69da      	ldr	r2, [r3, #28]
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f042 0208 	orr.w	r2, r2, #8
 800663c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	69da      	ldr	r2, [r3, #28]
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f022 0204 	bic.w	r2, r2, #4
 800664c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	69d9      	ldr	r1, [r3, #28]
 8006654:	68bb      	ldr	r3, [r7, #8]
 8006656:	691a      	ldr	r2, [r3, #16]
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	430a      	orrs	r2, r1
 800665e:	61da      	str	r2, [r3, #28]
      break;
 8006660:	e064      	b.n	800672c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	68b9      	ldr	r1, [r7, #8]
 8006668:	4618      	mov	r0, r3
 800666a:	f000 fbfd 	bl	8006e68 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	69da      	ldr	r2, [r3, #28]
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800667c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	69da      	ldr	r2, [r3, #28]
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800668c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	69d9      	ldr	r1, [r3, #28]
 8006694:	68bb      	ldr	r3, [r7, #8]
 8006696:	691b      	ldr	r3, [r3, #16]
 8006698:	021a      	lsls	r2, r3, #8
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	430a      	orrs	r2, r1
 80066a0:	61da      	str	r2, [r3, #28]
      break;
 80066a2:	e043      	b.n	800672c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	68b9      	ldr	r1, [r7, #8]
 80066aa:	4618      	mov	r0, r3
 80066ac:	f000 fc70 	bl	8006f90 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f042 0208 	orr.w	r2, r2, #8
 80066be:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	f022 0204 	bic.w	r2, r2, #4
 80066ce:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80066d6:	68bb      	ldr	r3, [r7, #8]
 80066d8:	691a      	ldr	r2, [r3, #16]
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	430a      	orrs	r2, r1
 80066e0:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80066e2:	e023      	b.n	800672c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	68b9      	ldr	r1, [r7, #8]
 80066ea:	4618      	mov	r0, r3
 80066ec:	f000 fcba 	bl	8007064 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80066fe:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800670e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8006716:	68bb      	ldr	r3, [r7, #8]
 8006718:	691b      	ldr	r3, [r3, #16]
 800671a:	021a      	lsls	r2, r3, #8
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	430a      	orrs	r2, r1
 8006722:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8006724:	e002      	b.n	800672c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006726:	2301      	movs	r3, #1
 8006728:	75fb      	strb	r3, [r7, #23]
      break;
 800672a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	2200      	movs	r2, #0
 8006730:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006734:	7dfb      	ldrb	r3, [r7, #23]
}
 8006736:	4618      	mov	r0, r3
 8006738:	3718      	adds	r7, #24
 800673a:	46bd      	mov	sp, r7
 800673c:	bd80      	pop	{r7, pc}
 800673e:	bf00      	nop

08006740 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006740:	b580      	push	{r7, lr}
 8006742:	b084      	sub	sp, #16
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
 8006748:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800674a:	2300      	movs	r3, #0
 800674c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006754:	2b01      	cmp	r3, #1
 8006756:	d101      	bne.n	800675c <HAL_TIM_ConfigClockSource+0x1c>
 8006758:	2302      	movs	r3, #2
 800675a:	e0e6      	b.n	800692a <HAL_TIM_ConfigClockSource+0x1ea>
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2201      	movs	r2, #1
 8006760:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2202      	movs	r2, #2
 8006768:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	689b      	ldr	r3, [r3, #8]
 8006772:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006774:	68bb      	ldr	r3, [r7, #8]
 8006776:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800677a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800677e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006780:	68bb      	ldr	r3, [r7, #8]
 8006782:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006786:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	68ba      	ldr	r2, [r7, #8]
 800678e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006790:	683b      	ldr	r3, [r7, #0]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	4a67      	ldr	r2, [pc, #412]	; (8006934 <HAL_TIM_ConfigClockSource+0x1f4>)
 8006796:	4293      	cmp	r3, r2
 8006798:	f000 80b1 	beq.w	80068fe <HAL_TIM_ConfigClockSource+0x1be>
 800679c:	4a65      	ldr	r2, [pc, #404]	; (8006934 <HAL_TIM_ConfigClockSource+0x1f4>)
 800679e:	4293      	cmp	r3, r2
 80067a0:	f200 80b6 	bhi.w	8006910 <HAL_TIM_ConfigClockSource+0x1d0>
 80067a4:	4a64      	ldr	r2, [pc, #400]	; (8006938 <HAL_TIM_ConfigClockSource+0x1f8>)
 80067a6:	4293      	cmp	r3, r2
 80067a8:	f000 80a9 	beq.w	80068fe <HAL_TIM_ConfigClockSource+0x1be>
 80067ac:	4a62      	ldr	r2, [pc, #392]	; (8006938 <HAL_TIM_ConfigClockSource+0x1f8>)
 80067ae:	4293      	cmp	r3, r2
 80067b0:	f200 80ae 	bhi.w	8006910 <HAL_TIM_ConfigClockSource+0x1d0>
 80067b4:	4a61      	ldr	r2, [pc, #388]	; (800693c <HAL_TIM_ConfigClockSource+0x1fc>)
 80067b6:	4293      	cmp	r3, r2
 80067b8:	f000 80a1 	beq.w	80068fe <HAL_TIM_ConfigClockSource+0x1be>
 80067bc:	4a5f      	ldr	r2, [pc, #380]	; (800693c <HAL_TIM_ConfigClockSource+0x1fc>)
 80067be:	4293      	cmp	r3, r2
 80067c0:	f200 80a6 	bhi.w	8006910 <HAL_TIM_ConfigClockSource+0x1d0>
 80067c4:	4a5e      	ldr	r2, [pc, #376]	; (8006940 <HAL_TIM_ConfigClockSource+0x200>)
 80067c6:	4293      	cmp	r3, r2
 80067c8:	f000 8099 	beq.w	80068fe <HAL_TIM_ConfigClockSource+0x1be>
 80067cc:	4a5c      	ldr	r2, [pc, #368]	; (8006940 <HAL_TIM_ConfigClockSource+0x200>)
 80067ce:	4293      	cmp	r3, r2
 80067d0:	f200 809e 	bhi.w	8006910 <HAL_TIM_ConfigClockSource+0x1d0>
 80067d4:	4a5b      	ldr	r2, [pc, #364]	; (8006944 <HAL_TIM_ConfigClockSource+0x204>)
 80067d6:	4293      	cmp	r3, r2
 80067d8:	f000 8091 	beq.w	80068fe <HAL_TIM_ConfigClockSource+0x1be>
 80067dc:	4a59      	ldr	r2, [pc, #356]	; (8006944 <HAL_TIM_ConfigClockSource+0x204>)
 80067de:	4293      	cmp	r3, r2
 80067e0:	f200 8096 	bhi.w	8006910 <HAL_TIM_ConfigClockSource+0x1d0>
 80067e4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80067e8:	f000 8089 	beq.w	80068fe <HAL_TIM_ConfigClockSource+0x1be>
 80067ec:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80067f0:	f200 808e 	bhi.w	8006910 <HAL_TIM_ConfigClockSource+0x1d0>
 80067f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80067f8:	d03e      	beq.n	8006878 <HAL_TIM_ConfigClockSource+0x138>
 80067fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80067fe:	f200 8087 	bhi.w	8006910 <HAL_TIM_ConfigClockSource+0x1d0>
 8006802:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006806:	f000 8086 	beq.w	8006916 <HAL_TIM_ConfigClockSource+0x1d6>
 800680a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800680e:	d87f      	bhi.n	8006910 <HAL_TIM_ConfigClockSource+0x1d0>
 8006810:	2b70      	cmp	r3, #112	; 0x70
 8006812:	d01a      	beq.n	800684a <HAL_TIM_ConfigClockSource+0x10a>
 8006814:	2b70      	cmp	r3, #112	; 0x70
 8006816:	d87b      	bhi.n	8006910 <HAL_TIM_ConfigClockSource+0x1d0>
 8006818:	2b60      	cmp	r3, #96	; 0x60
 800681a:	d050      	beq.n	80068be <HAL_TIM_ConfigClockSource+0x17e>
 800681c:	2b60      	cmp	r3, #96	; 0x60
 800681e:	d877      	bhi.n	8006910 <HAL_TIM_ConfigClockSource+0x1d0>
 8006820:	2b50      	cmp	r3, #80	; 0x50
 8006822:	d03c      	beq.n	800689e <HAL_TIM_ConfigClockSource+0x15e>
 8006824:	2b50      	cmp	r3, #80	; 0x50
 8006826:	d873      	bhi.n	8006910 <HAL_TIM_ConfigClockSource+0x1d0>
 8006828:	2b40      	cmp	r3, #64	; 0x40
 800682a:	d058      	beq.n	80068de <HAL_TIM_ConfigClockSource+0x19e>
 800682c:	2b40      	cmp	r3, #64	; 0x40
 800682e:	d86f      	bhi.n	8006910 <HAL_TIM_ConfigClockSource+0x1d0>
 8006830:	2b30      	cmp	r3, #48	; 0x30
 8006832:	d064      	beq.n	80068fe <HAL_TIM_ConfigClockSource+0x1be>
 8006834:	2b30      	cmp	r3, #48	; 0x30
 8006836:	d86b      	bhi.n	8006910 <HAL_TIM_ConfigClockSource+0x1d0>
 8006838:	2b20      	cmp	r3, #32
 800683a:	d060      	beq.n	80068fe <HAL_TIM_ConfigClockSource+0x1be>
 800683c:	2b20      	cmp	r3, #32
 800683e:	d867      	bhi.n	8006910 <HAL_TIM_ConfigClockSource+0x1d0>
 8006840:	2b00      	cmp	r3, #0
 8006842:	d05c      	beq.n	80068fe <HAL_TIM_ConfigClockSource+0x1be>
 8006844:	2b10      	cmp	r3, #16
 8006846:	d05a      	beq.n	80068fe <HAL_TIM_ConfigClockSource+0x1be>
 8006848:	e062      	b.n	8006910 <HAL_TIM_ConfigClockSource+0x1d0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6818      	ldr	r0, [r3, #0]
 800684e:	683b      	ldr	r3, [r7, #0]
 8006850:	6899      	ldr	r1, [r3, #8]
 8006852:	683b      	ldr	r3, [r7, #0]
 8006854:	685a      	ldr	r2, [r3, #4]
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	68db      	ldr	r3, [r3, #12]
 800685a:	f000 fceb 	bl	8007234 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	689b      	ldr	r3, [r3, #8]
 8006864:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006866:	68bb      	ldr	r3, [r7, #8]
 8006868:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800686c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	68ba      	ldr	r2, [r7, #8]
 8006874:	609a      	str	r2, [r3, #8]
      break;
 8006876:	e04f      	b.n	8006918 <HAL_TIM_ConfigClockSource+0x1d8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	6818      	ldr	r0, [r3, #0]
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	6899      	ldr	r1, [r3, #8]
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	685a      	ldr	r2, [r3, #4]
 8006884:	683b      	ldr	r3, [r7, #0]
 8006886:	68db      	ldr	r3, [r3, #12]
 8006888:	f000 fcd4 	bl	8007234 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	689a      	ldr	r2, [r3, #8]
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800689a:	609a      	str	r2, [r3, #8]
      break;
 800689c:	e03c      	b.n	8006918 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	6818      	ldr	r0, [r3, #0]
 80068a2:	683b      	ldr	r3, [r7, #0]
 80068a4:	6859      	ldr	r1, [r3, #4]
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	68db      	ldr	r3, [r3, #12]
 80068aa:	461a      	mov	r2, r3
 80068ac:	f000 fc46 	bl	800713c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	2150      	movs	r1, #80	; 0x50
 80068b6:	4618      	mov	r0, r3
 80068b8:	f000 fc9f 	bl	80071fa <TIM_ITRx_SetConfig>
      break;
 80068bc:	e02c      	b.n	8006918 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	6818      	ldr	r0, [r3, #0]
 80068c2:	683b      	ldr	r3, [r7, #0]
 80068c4:	6859      	ldr	r1, [r3, #4]
 80068c6:	683b      	ldr	r3, [r7, #0]
 80068c8:	68db      	ldr	r3, [r3, #12]
 80068ca:	461a      	mov	r2, r3
 80068cc:	f000 fc65 	bl	800719a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	2160      	movs	r1, #96	; 0x60
 80068d6:	4618      	mov	r0, r3
 80068d8:	f000 fc8f 	bl	80071fa <TIM_ITRx_SetConfig>
      break;
 80068dc:	e01c      	b.n	8006918 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	6818      	ldr	r0, [r3, #0]
 80068e2:	683b      	ldr	r3, [r7, #0]
 80068e4:	6859      	ldr	r1, [r3, #4]
 80068e6:	683b      	ldr	r3, [r7, #0]
 80068e8:	68db      	ldr	r3, [r3, #12]
 80068ea:	461a      	mov	r2, r3
 80068ec:	f000 fc26 	bl	800713c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	2140      	movs	r1, #64	; 0x40
 80068f6:	4618      	mov	r0, r3
 80068f8:	f000 fc7f 	bl	80071fa <TIM_ITRx_SetConfig>
      break;
 80068fc:	e00c      	b.n	8006918 <HAL_TIM_ConfigClockSource+0x1d8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681a      	ldr	r2, [r3, #0]
 8006902:	683b      	ldr	r3, [r7, #0]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	4619      	mov	r1, r3
 8006908:	4610      	mov	r0, r2
 800690a:	f000 fc76 	bl	80071fa <TIM_ITRx_SetConfig>
      break;
 800690e:	e003      	b.n	8006918 <HAL_TIM_ConfigClockSource+0x1d8>
    }

    default:
      status = HAL_ERROR;
 8006910:	2301      	movs	r3, #1
 8006912:	73fb      	strb	r3, [r7, #15]
      break;
 8006914:	e000      	b.n	8006918 <HAL_TIM_ConfigClockSource+0x1d8>
      break;
 8006916:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2201      	movs	r2, #1
 800691c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2200      	movs	r2, #0
 8006924:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006928:	7bfb      	ldrb	r3, [r7, #15]
}
 800692a:	4618      	mov	r0, r3
 800692c:	3710      	adds	r7, #16
 800692e:	46bd      	mov	sp, r7
 8006930:	bd80      	pop	{r7, pc}
 8006932:	bf00      	nop
 8006934:	00100070 	.word	0x00100070
 8006938:	00100050 	.word	0x00100050
 800693c:	00100040 	.word	0x00100040
 8006940:	00100030 	.word	0x00100030
 8006944:	00100020 	.word	0x00100020

08006948 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006948:	b480      	push	{r7}
 800694a:	b083      	sub	sp, #12
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006950:	bf00      	nop
 8006952:	370c      	adds	r7, #12
 8006954:	46bd      	mov	sp, r7
 8006956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695a:	4770      	bx	lr

0800695c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800695c:	b480      	push	{r7}
 800695e:	b083      	sub	sp, #12
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006964:	bf00      	nop
 8006966:	370c      	adds	r7, #12
 8006968:	46bd      	mov	sp, r7
 800696a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696e:	4770      	bx	lr

08006970 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006970:	b480      	push	{r7}
 8006972:	b083      	sub	sp, #12
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006978:	bf00      	nop
 800697a:	370c      	adds	r7, #12
 800697c:	46bd      	mov	sp, r7
 800697e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006982:	4770      	bx	lr

08006984 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006984:	b480      	push	{r7}
 8006986:	b083      	sub	sp, #12
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800698c:	bf00      	nop
 800698e:	370c      	adds	r7, #12
 8006990:	46bd      	mov	sp, r7
 8006992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006996:	4770      	bx	lr

08006998 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006998:	b480      	push	{r7}
 800699a:	b083      	sub	sp, #12
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80069a0:	bf00      	nop
 80069a2:	370c      	adds	r7, #12
 80069a4:	46bd      	mov	sp, r7
 80069a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069aa:	4770      	bx	lr

080069ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80069ac:	b480      	push	{r7}
 80069ae:	b085      	sub	sp, #20
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
 80069b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	4a42      	ldr	r2, [pc, #264]	; (8006ac8 <TIM_Base_SetConfig+0x11c>)
 80069c0:	4293      	cmp	r3, r2
 80069c2:	d013      	beq.n	80069ec <TIM_Base_SetConfig+0x40>
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069ca:	d00f      	beq.n	80069ec <TIM_Base_SetConfig+0x40>
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	4a3f      	ldr	r2, [pc, #252]	; (8006acc <TIM_Base_SetConfig+0x120>)
 80069d0:	4293      	cmp	r3, r2
 80069d2:	d00b      	beq.n	80069ec <TIM_Base_SetConfig+0x40>
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	4a3e      	ldr	r2, [pc, #248]	; (8006ad0 <TIM_Base_SetConfig+0x124>)
 80069d8:	4293      	cmp	r3, r2
 80069da:	d007      	beq.n	80069ec <TIM_Base_SetConfig+0x40>
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	4a3d      	ldr	r2, [pc, #244]	; (8006ad4 <TIM_Base_SetConfig+0x128>)
 80069e0:	4293      	cmp	r3, r2
 80069e2:	d003      	beq.n	80069ec <TIM_Base_SetConfig+0x40>
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	4a3c      	ldr	r2, [pc, #240]	; (8006ad8 <TIM_Base_SetConfig+0x12c>)
 80069e8:	4293      	cmp	r3, r2
 80069ea:	d108      	bne.n	80069fe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80069f4:	683b      	ldr	r3, [r7, #0]
 80069f6:	685b      	ldr	r3, [r3, #4]
 80069f8:	68fa      	ldr	r2, [r7, #12]
 80069fa:	4313      	orrs	r3, r2
 80069fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	4a31      	ldr	r2, [pc, #196]	; (8006ac8 <TIM_Base_SetConfig+0x11c>)
 8006a02:	4293      	cmp	r3, r2
 8006a04:	d01f      	beq.n	8006a46 <TIM_Base_SetConfig+0x9a>
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a0c:	d01b      	beq.n	8006a46 <TIM_Base_SetConfig+0x9a>
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	4a2e      	ldr	r2, [pc, #184]	; (8006acc <TIM_Base_SetConfig+0x120>)
 8006a12:	4293      	cmp	r3, r2
 8006a14:	d017      	beq.n	8006a46 <TIM_Base_SetConfig+0x9a>
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	4a2d      	ldr	r2, [pc, #180]	; (8006ad0 <TIM_Base_SetConfig+0x124>)
 8006a1a:	4293      	cmp	r3, r2
 8006a1c:	d013      	beq.n	8006a46 <TIM_Base_SetConfig+0x9a>
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	4a2c      	ldr	r2, [pc, #176]	; (8006ad4 <TIM_Base_SetConfig+0x128>)
 8006a22:	4293      	cmp	r3, r2
 8006a24:	d00f      	beq.n	8006a46 <TIM_Base_SetConfig+0x9a>
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	4a2c      	ldr	r2, [pc, #176]	; (8006adc <TIM_Base_SetConfig+0x130>)
 8006a2a:	4293      	cmp	r3, r2
 8006a2c:	d00b      	beq.n	8006a46 <TIM_Base_SetConfig+0x9a>
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	4a2b      	ldr	r2, [pc, #172]	; (8006ae0 <TIM_Base_SetConfig+0x134>)
 8006a32:	4293      	cmp	r3, r2
 8006a34:	d007      	beq.n	8006a46 <TIM_Base_SetConfig+0x9a>
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	4a2a      	ldr	r2, [pc, #168]	; (8006ae4 <TIM_Base_SetConfig+0x138>)
 8006a3a:	4293      	cmp	r3, r2
 8006a3c:	d003      	beq.n	8006a46 <TIM_Base_SetConfig+0x9a>
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	4a25      	ldr	r2, [pc, #148]	; (8006ad8 <TIM_Base_SetConfig+0x12c>)
 8006a42:	4293      	cmp	r3, r2
 8006a44:	d108      	bne.n	8006a58 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a4c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006a4e:	683b      	ldr	r3, [r7, #0]
 8006a50:	68db      	ldr	r3, [r3, #12]
 8006a52:	68fa      	ldr	r2, [r7, #12]
 8006a54:	4313      	orrs	r3, r2
 8006a56:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006a5e:	683b      	ldr	r3, [r7, #0]
 8006a60:	695b      	ldr	r3, [r3, #20]
 8006a62:	4313      	orrs	r3, r2
 8006a64:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	68fa      	ldr	r2, [r7, #12]
 8006a6a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006a6c:	683b      	ldr	r3, [r7, #0]
 8006a6e:	689a      	ldr	r2, [r3, #8]
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	681a      	ldr	r2, [r3, #0]
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	4a12      	ldr	r2, [pc, #72]	; (8006ac8 <TIM_Base_SetConfig+0x11c>)
 8006a80:	4293      	cmp	r3, r2
 8006a82:	d013      	beq.n	8006aac <TIM_Base_SetConfig+0x100>
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	4a13      	ldr	r2, [pc, #76]	; (8006ad4 <TIM_Base_SetConfig+0x128>)
 8006a88:	4293      	cmp	r3, r2
 8006a8a:	d00f      	beq.n	8006aac <TIM_Base_SetConfig+0x100>
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	4a13      	ldr	r2, [pc, #76]	; (8006adc <TIM_Base_SetConfig+0x130>)
 8006a90:	4293      	cmp	r3, r2
 8006a92:	d00b      	beq.n	8006aac <TIM_Base_SetConfig+0x100>
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	4a12      	ldr	r2, [pc, #72]	; (8006ae0 <TIM_Base_SetConfig+0x134>)
 8006a98:	4293      	cmp	r3, r2
 8006a9a:	d007      	beq.n	8006aac <TIM_Base_SetConfig+0x100>
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	4a11      	ldr	r2, [pc, #68]	; (8006ae4 <TIM_Base_SetConfig+0x138>)
 8006aa0:	4293      	cmp	r3, r2
 8006aa2:	d003      	beq.n	8006aac <TIM_Base_SetConfig+0x100>
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	4a0c      	ldr	r2, [pc, #48]	; (8006ad8 <TIM_Base_SetConfig+0x12c>)
 8006aa8:	4293      	cmp	r3, r2
 8006aaa:	d103      	bne.n	8006ab4 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	691a      	ldr	r2, [r3, #16]
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	2201      	movs	r2, #1
 8006ab8:	615a      	str	r2, [r3, #20]
}
 8006aba:	bf00      	nop
 8006abc:	3714      	adds	r7, #20
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac4:	4770      	bx	lr
 8006ac6:	bf00      	nop
 8006ac8:	40012c00 	.word	0x40012c00
 8006acc:	40000400 	.word	0x40000400
 8006ad0:	40000800 	.word	0x40000800
 8006ad4:	40013400 	.word	0x40013400
 8006ad8:	40015000 	.word	0x40015000
 8006adc:	40014000 	.word	0x40014000
 8006ae0:	40014400 	.word	0x40014400
 8006ae4:	40014800 	.word	0x40014800

08006ae8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006ae8:	b480      	push	{r7}
 8006aea:	b087      	sub	sp, #28
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
 8006af0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	6a1b      	ldr	r3, [r3, #32]
 8006af6:	f023 0201 	bic.w	r2, r3, #1
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	6a1b      	ldr	r3, [r3, #32]
 8006b02:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	685b      	ldr	r3, [r3, #4]
 8006b08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	699b      	ldr	r3, [r3, #24]
 8006b0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006b16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	f023 0303 	bic.w	r3, r3, #3
 8006b22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	68fa      	ldr	r2, [r7, #12]
 8006b2a:	4313      	orrs	r3, r2
 8006b2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006b2e:	697b      	ldr	r3, [r7, #20]
 8006b30:	f023 0302 	bic.w	r3, r3, #2
 8006b34:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006b36:	683b      	ldr	r3, [r7, #0]
 8006b38:	689b      	ldr	r3, [r3, #8]
 8006b3a:	697a      	ldr	r2, [r7, #20]
 8006b3c:	4313      	orrs	r3, r2
 8006b3e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	4a30      	ldr	r2, [pc, #192]	; (8006c04 <TIM_OC1_SetConfig+0x11c>)
 8006b44:	4293      	cmp	r3, r2
 8006b46:	d013      	beq.n	8006b70 <TIM_OC1_SetConfig+0x88>
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	4a2f      	ldr	r2, [pc, #188]	; (8006c08 <TIM_OC1_SetConfig+0x120>)
 8006b4c:	4293      	cmp	r3, r2
 8006b4e:	d00f      	beq.n	8006b70 <TIM_OC1_SetConfig+0x88>
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	4a2e      	ldr	r2, [pc, #184]	; (8006c0c <TIM_OC1_SetConfig+0x124>)
 8006b54:	4293      	cmp	r3, r2
 8006b56:	d00b      	beq.n	8006b70 <TIM_OC1_SetConfig+0x88>
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	4a2d      	ldr	r2, [pc, #180]	; (8006c10 <TIM_OC1_SetConfig+0x128>)
 8006b5c:	4293      	cmp	r3, r2
 8006b5e:	d007      	beq.n	8006b70 <TIM_OC1_SetConfig+0x88>
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	4a2c      	ldr	r2, [pc, #176]	; (8006c14 <TIM_OC1_SetConfig+0x12c>)
 8006b64:	4293      	cmp	r3, r2
 8006b66:	d003      	beq.n	8006b70 <TIM_OC1_SetConfig+0x88>
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	4a2b      	ldr	r2, [pc, #172]	; (8006c18 <TIM_OC1_SetConfig+0x130>)
 8006b6c:	4293      	cmp	r3, r2
 8006b6e:	d10c      	bne.n	8006b8a <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006b70:	697b      	ldr	r3, [r7, #20]
 8006b72:	f023 0308 	bic.w	r3, r3, #8
 8006b76:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006b78:	683b      	ldr	r3, [r7, #0]
 8006b7a:	68db      	ldr	r3, [r3, #12]
 8006b7c:	697a      	ldr	r2, [r7, #20]
 8006b7e:	4313      	orrs	r3, r2
 8006b80:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006b82:	697b      	ldr	r3, [r7, #20]
 8006b84:	f023 0304 	bic.w	r3, r3, #4
 8006b88:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	4a1d      	ldr	r2, [pc, #116]	; (8006c04 <TIM_OC1_SetConfig+0x11c>)
 8006b8e:	4293      	cmp	r3, r2
 8006b90:	d013      	beq.n	8006bba <TIM_OC1_SetConfig+0xd2>
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	4a1c      	ldr	r2, [pc, #112]	; (8006c08 <TIM_OC1_SetConfig+0x120>)
 8006b96:	4293      	cmp	r3, r2
 8006b98:	d00f      	beq.n	8006bba <TIM_OC1_SetConfig+0xd2>
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	4a1b      	ldr	r2, [pc, #108]	; (8006c0c <TIM_OC1_SetConfig+0x124>)
 8006b9e:	4293      	cmp	r3, r2
 8006ba0:	d00b      	beq.n	8006bba <TIM_OC1_SetConfig+0xd2>
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	4a1a      	ldr	r2, [pc, #104]	; (8006c10 <TIM_OC1_SetConfig+0x128>)
 8006ba6:	4293      	cmp	r3, r2
 8006ba8:	d007      	beq.n	8006bba <TIM_OC1_SetConfig+0xd2>
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	4a19      	ldr	r2, [pc, #100]	; (8006c14 <TIM_OC1_SetConfig+0x12c>)
 8006bae:	4293      	cmp	r3, r2
 8006bb0:	d003      	beq.n	8006bba <TIM_OC1_SetConfig+0xd2>
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	4a18      	ldr	r2, [pc, #96]	; (8006c18 <TIM_OC1_SetConfig+0x130>)
 8006bb6:	4293      	cmp	r3, r2
 8006bb8:	d111      	bne.n	8006bde <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006bba:	693b      	ldr	r3, [r7, #16]
 8006bbc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006bc0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006bc2:	693b      	ldr	r3, [r7, #16]
 8006bc4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006bc8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006bca:	683b      	ldr	r3, [r7, #0]
 8006bcc:	695b      	ldr	r3, [r3, #20]
 8006bce:	693a      	ldr	r2, [r7, #16]
 8006bd0:	4313      	orrs	r3, r2
 8006bd2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006bd4:	683b      	ldr	r3, [r7, #0]
 8006bd6:	699b      	ldr	r3, [r3, #24]
 8006bd8:	693a      	ldr	r2, [r7, #16]
 8006bda:	4313      	orrs	r3, r2
 8006bdc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	693a      	ldr	r2, [r7, #16]
 8006be2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	68fa      	ldr	r2, [r7, #12]
 8006be8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006bea:	683b      	ldr	r3, [r7, #0]
 8006bec:	685a      	ldr	r2, [r3, #4]
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	697a      	ldr	r2, [r7, #20]
 8006bf6:	621a      	str	r2, [r3, #32]
}
 8006bf8:	bf00      	nop
 8006bfa:	371c      	adds	r7, #28
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c02:	4770      	bx	lr
 8006c04:	40012c00 	.word	0x40012c00
 8006c08:	40013400 	.word	0x40013400
 8006c0c:	40014000 	.word	0x40014000
 8006c10:	40014400 	.word	0x40014400
 8006c14:	40014800 	.word	0x40014800
 8006c18:	40015000 	.word	0x40015000

08006c1c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006c1c:	b480      	push	{r7}
 8006c1e:	b087      	sub	sp, #28
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	6078      	str	r0, [r7, #4]
 8006c24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	6a1b      	ldr	r3, [r3, #32]
 8006c2a:	f023 0210 	bic.w	r2, r3, #16
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	6a1b      	ldr	r3, [r3, #32]
 8006c36:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	685b      	ldr	r3, [r3, #4]
 8006c3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	699b      	ldr	r3, [r3, #24]
 8006c42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006c4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c56:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006c58:	683b      	ldr	r3, [r7, #0]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	021b      	lsls	r3, r3, #8
 8006c5e:	68fa      	ldr	r2, [r7, #12]
 8006c60:	4313      	orrs	r3, r2
 8006c62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006c64:	697b      	ldr	r3, [r7, #20]
 8006c66:	f023 0320 	bic.w	r3, r3, #32
 8006c6a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006c6c:	683b      	ldr	r3, [r7, #0]
 8006c6e:	689b      	ldr	r3, [r3, #8]
 8006c70:	011b      	lsls	r3, r3, #4
 8006c72:	697a      	ldr	r2, [r7, #20]
 8006c74:	4313      	orrs	r3, r2
 8006c76:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	4a2c      	ldr	r2, [pc, #176]	; (8006d2c <TIM_OC2_SetConfig+0x110>)
 8006c7c:	4293      	cmp	r3, r2
 8006c7e:	d007      	beq.n	8006c90 <TIM_OC2_SetConfig+0x74>
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	4a2b      	ldr	r2, [pc, #172]	; (8006d30 <TIM_OC2_SetConfig+0x114>)
 8006c84:	4293      	cmp	r3, r2
 8006c86:	d003      	beq.n	8006c90 <TIM_OC2_SetConfig+0x74>
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	4a2a      	ldr	r2, [pc, #168]	; (8006d34 <TIM_OC2_SetConfig+0x118>)
 8006c8c:	4293      	cmp	r3, r2
 8006c8e:	d10d      	bne.n	8006cac <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006c90:	697b      	ldr	r3, [r7, #20]
 8006c92:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006c96:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006c98:	683b      	ldr	r3, [r7, #0]
 8006c9a:	68db      	ldr	r3, [r3, #12]
 8006c9c:	011b      	lsls	r3, r3, #4
 8006c9e:	697a      	ldr	r2, [r7, #20]
 8006ca0:	4313      	orrs	r3, r2
 8006ca2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006ca4:	697b      	ldr	r3, [r7, #20]
 8006ca6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006caa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	4a1f      	ldr	r2, [pc, #124]	; (8006d2c <TIM_OC2_SetConfig+0x110>)
 8006cb0:	4293      	cmp	r3, r2
 8006cb2:	d013      	beq.n	8006cdc <TIM_OC2_SetConfig+0xc0>
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	4a1e      	ldr	r2, [pc, #120]	; (8006d30 <TIM_OC2_SetConfig+0x114>)
 8006cb8:	4293      	cmp	r3, r2
 8006cba:	d00f      	beq.n	8006cdc <TIM_OC2_SetConfig+0xc0>
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	4a1e      	ldr	r2, [pc, #120]	; (8006d38 <TIM_OC2_SetConfig+0x11c>)
 8006cc0:	4293      	cmp	r3, r2
 8006cc2:	d00b      	beq.n	8006cdc <TIM_OC2_SetConfig+0xc0>
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	4a1d      	ldr	r2, [pc, #116]	; (8006d3c <TIM_OC2_SetConfig+0x120>)
 8006cc8:	4293      	cmp	r3, r2
 8006cca:	d007      	beq.n	8006cdc <TIM_OC2_SetConfig+0xc0>
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	4a1c      	ldr	r2, [pc, #112]	; (8006d40 <TIM_OC2_SetConfig+0x124>)
 8006cd0:	4293      	cmp	r3, r2
 8006cd2:	d003      	beq.n	8006cdc <TIM_OC2_SetConfig+0xc0>
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	4a17      	ldr	r2, [pc, #92]	; (8006d34 <TIM_OC2_SetConfig+0x118>)
 8006cd8:	4293      	cmp	r3, r2
 8006cda:	d113      	bne.n	8006d04 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006cdc:	693b      	ldr	r3, [r7, #16]
 8006cde:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006ce2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006ce4:	693b      	ldr	r3, [r7, #16]
 8006ce6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006cea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006cec:	683b      	ldr	r3, [r7, #0]
 8006cee:	695b      	ldr	r3, [r3, #20]
 8006cf0:	009b      	lsls	r3, r3, #2
 8006cf2:	693a      	ldr	r2, [r7, #16]
 8006cf4:	4313      	orrs	r3, r2
 8006cf6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006cf8:	683b      	ldr	r3, [r7, #0]
 8006cfa:	699b      	ldr	r3, [r3, #24]
 8006cfc:	009b      	lsls	r3, r3, #2
 8006cfe:	693a      	ldr	r2, [r7, #16]
 8006d00:	4313      	orrs	r3, r2
 8006d02:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	693a      	ldr	r2, [r7, #16]
 8006d08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	68fa      	ldr	r2, [r7, #12]
 8006d0e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006d10:	683b      	ldr	r3, [r7, #0]
 8006d12:	685a      	ldr	r2, [r3, #4]
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	697a      	ldr	r2, [r7, #20]
 8006d1c:	621a      	str	r2, [r3, #32]
}
 8006d1e:	bf00      	nop
 8006d20:	371c      	adds	r7, #28
 8006d22:	46bd      	mov	sp, r7
 8006d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d28:	4770      	bx	lr
 8006d2a:	bf00      	nop
 8006d2c:	40012c00 	.word	0x40012c00
 8006d30:	40013400 	.word	0x40013400
 8006d34:	40015000 	.word	0x40015000
 8006d38:	40014000 	.word	0x40014000
 8006d3c:	40014400 	.word	0x40014400
 8006d40:	40014800 	.word	0x40014800

08006d44 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006d44:	b480      	push	{r7}
 8006d46:	b087      	sub	sp, #28
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
 8006d4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	6a1b      	ldr	r3, [r3, #32]
 8006d52:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	6a1b      	ldr	r3, [r3, #32]
 8006d5e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	685b      	ldr	r3, [r3, #4]
 8006d64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	69db      	ldr	r3, [r3, #28]
 8006d6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006d72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	f023 0303 	bic.w	r3, r3, #3
 8006d7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006d80:	683b      	ldr	r3, [r7, #0]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	68fa      	ldr	r2, [r7, #12]
 8006d86:	4313      	orrs	r3, r2
 8006d88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006d8a:	697b      	ldr	r3, [r7, #20]
 8006d8c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006d90:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006d92:	683b      	ldr	r3, [r7, #0]
 8006d94:	689b      	ldr	r3, [r3, #8]
 8006d96:	021b      	lsls	r3, r3, #8
 8006d98:	697a      	ldr	r2, [r7, #20]
 8006d9a:	4313      	orrs	r3, r2
 8006d9c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	4a2b      	ldr	r2, [pc, #172]	; (8006e50 <TIM_OC3_SetConfig+0x10c>)
 8006da2:	4293      	cmp	r3, r2
 8006da4:	d007      	beq.n	8006db6 <TIM_OC3_SetConfig+0x72>
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	4a2a      	ldr	r2, [pc, #168]	; (8006e54 <TIM_OC3_SetConfig+0x110>)
 8006daa:	4293      	cmp	r3, r2
 8006dac:	d003      	beq.n	8006db6 <TIM_OC3_SetConfig+0x72>
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	4a29      	ldr	r2, [pc, #164]	; (8006e58 <TIM_OC3_SetConfig+0x114>)
 8006db2:	4293      	cmp	r3, r2
 8006db4:	d10d      	bne.n	8006dd2 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006db6:	697b      	ldr	r3, [r7, #20]
 8006db8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006dbc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006dbe:	683b      	ldr	r3, [r7, #0]
 8006dc0:	68db      	ldr	r3, [r3, #12]
 8006dc2:	021b      	lsls	r3, r3, #8
 8006dc4:	697a      	ldr	r2, [r7, #20]
 8006dc6:	4313      	orrs	r3, r2
 8006dc8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006dca:	697b      	ldr	r3, [r7, #20]
 8006dcc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006dd0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	4a1e      	ldr	r2, [pc, #120]	; (8006e50 <TIM_OC3_SetConfig+0x10c>)
 8006dd6:	4293      	cmp	r3, r2
 8006dd8:	d013      	beq.n	8006e02 <TIM_OC3_SetConfig+0xbe>
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	4a1d      	ldr	r2, [pc, #116]	; (8006e54 <TIM_OC3_SetConfig+0x110>)
 8006dde:	4293      	cmp	r3, r2
 8006de0:	d00f      	beq.n	8006e02 <TIM_OC3_SetConfig+0xbe>
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	4a1d      	ldr	r2, [pc, #116]	; (8006e5c <TIM_OC3_SetConfig+0x118>)
 8006de6:	4293      	cmp	r3, r2
 8006de8:	d00b      	beq.n	8006e02 <TIM_OC3_SetConfig+0xbe>
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	4a1c      	ldr	r2, [pc, #112]	; (8006e60 <TIM_OC3_SetConfig+0x11c>)
 8006dee:	4293      	cmp	r3, r2
 8006df0:	d007      	beq.n	8006e02 <TIM_OC3_SetConfig+0xbe>
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	4a1b      	ldr	r2, [pc, #108]	; (8006e64 <TIM_OC3_SetConfig+0x120>)
 8006df6:	4293      	cmp	r3, r2
 8006df8:	d003      	beq.n	8006e02 <TIM_OC3_SetConfig+0xbe>
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	4a16      	ldr	r2, [pc, #88]	; (8006e58 <TIM_OC3_SetConfig+0x114>)
 8006dfe:	4293      	cmp	r3, r2
 8006e00:	d113      	bne.n	8006e2a <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006e02:	693b      	ldr	r3, [r7, #16]
 8006e04:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006e08:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006e0a:	693b      	ldr	r3, [r7, #16]
 8006e0c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006e10:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006e12:	683b      	ldr	r3, [r7, #0]
 8006e14:	695b      	ldr	r3, [r3, #20]
 8006e16:	011b      	lsls	r3, r3, #4
 8006e18:	693a      	ldr	r2, [r7, #16]
 8006e1a:	4313      	orrs	r3, r2
 8006e1c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006e1e:	683b      	ldr	r3, [r7, #0]
 8006e20:	699b      	ldr	r3, [r3, #24]
 8006e22:	011b      	lsls	r3, r3, #4
 8006e24:	693a      	ldr	r2, [r7, #16]
 8006e26:	4313      	orrs	r3, r2
 8006e28:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	693a      	ldr	r2, [r7, #16]
 8006e2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	68fa      	ldr	r2, [r7, #12]
 8006e34:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006e36:	683b      	ldr	r3, [r7, #0]
 8006e38:	685a      	ldr	r2, [r3, #4]
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	697a      	ldr	r2, [r7, #20]
 8006e42:	621a      	str	r2, [r3, #32]
}
 8006e44:	bf00      	nop
 8006e46:	371c      	adds	r7, #28
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4e:	4770      	bx	lr
 8006e50:	40012c00 	.word	0x40012c00
 8006e54:	40013400 	.word	0x40013400
 8006e58:	40015000 	.word	0x40015000
 8006e5c:	40014000 	.word	0x40014000
 8006e60:	40014400 	.word	0x40014400
 8006e64:	40014800 	.word	0x40014800

08006e68 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006e68:	b480      	push	{r7}
 8006e6a:	b087      	sub	sp, #28
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]
 8006e70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	6a1b      	ldr	r3, [r3, #32]
 8006e76:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	6a1b      	ldr	r3, [r3, #32]
 8006e82:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	685b      	ldr	r3, [r3, #4]
 8006e88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	69db      	ldr	r3, [r3, #28]
 8006e8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006e96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ea2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006ea4:	683b      	ldr	r3, [r7, #0]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	021b      	lsls	r3, r3, #8
 8006eaa:	68fa      	ldr	r2, [r7, #12]
 8006eac:	4313      	orrs	r3, r2
 8006eae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006eb0:	697b      	ldr	r3, [r7, #20]
 8006eb2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006eb6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006eb8:	683b      	ldr	r3, [r7, #0]
 8006eba:	689b      	ldr	r3, [r3, #8]
 8006ebc:	031b      	lsls	r3, r3, #12
 8006ebe:	697a      	ldr	r2, [r7, #20]
 8006ec0:	4313      	orrs	r3, r2
 8006ec2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	4a2c      	ldr	r2, [pc, #176]	; (8006f78 <TIM_OC4_SetConfig+0x110>)
 8006ec8:	4293      	cmp	r3, r2
 8006eca:	d007      	beq.n	8006edc <TIM_OC4_SetConfig+0x74>
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	4a2b      	ldr	r2, [pc, #172]	; (8006f7c <TIM_OC4_SetConfig+0x114>)
 8006ed0:	4293      	cmp	r3, r2
 8006ed2:	d003      	beq.n	8006edc <TIM_OC4_SetConfig+0x74>
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	4a2a      	ldr	r2, [pc, #168]	; (8006f80 <TIM_OC4_SetConfig+0x118>)
 8006ed8:	4293      	cmp	r3, r2
 8006eda:	d10d      	bne.n	8006ef8 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8006edc:	697b      	ldr	r3, [r7, #20]
 8006ede:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006ee2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8006ee4:	683b      	ldr	r3, [r7, #0]
 8006ee6:	68db      	ldr	r3, [r3, #12]
 8006ee8:	031b      	lsls	r3, r3, #12
 8006eea:	697a      	ldr	r2, [r7, #20]
 8006eec:	4313      	orrs	r3, r2
 8006eee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8006ef0:	697b      	ldr	r3, [r7, #20]
 8006ef2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006ef6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	4a1f      	ldr	r2, [pc, #124]	; (8006f78 <TIM_OC4_SetConfig+0x110>)
 8006efc:	4293      	cmp	r3, r2
 8006efe:	d013      	beq.n	8006f28 <TIM_OC4_SetConfig+0xc0>
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	4a1e      	ldr	r2, [pc, #120]	; (8006f7c <TIM_OC4_SetConfig+0x114>)
 8006f04:	4293      	cmp	r3, r2
 8006f06:	d00f      	beq.n	8006f28 <TIM_OC4_SetConfig+0xc0>
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	4a1e      	ldr	r2, [pc, #120]	; (8006f84 <TIM_OC4_SetConfig+0x11c>)
 8006f0c:	4293      	cmp	r3, r2
 8006f0e:	d00b      	beq.n	8006f28 <TIM_OC4_SetConfig+0xc0>
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	4a1d      	ldr	r2, [pc, #116]	; (8006f88 <TIM_OC4_SetConfig+0x120>)
 8006f14:	4293      	cmp	r3, r2
 8006f16:	d007      	beq.n	8006f28 <TIM_OC4_SetConfig+0xc0>
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	4a1c      	ldr	r2, [pc, #112]	; (8006f8c <TIM_OC4_SetConfig+0x124>)
 8006f1c:	4293      	cmp	r3, r2
 8006f1e:	d003      	beq.n	8006f28 <TIM_OC4_SetConfig+0xc0>
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	4a17      	ldr	r2, [pc, #92]	; (8006f80 <TIM_OC4_SetConfig+0x118>)
 8006f24:	4293      	cmp	r3, r2
 8006f26:	d113      	bne.n	8006f50 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006f28:	693b      	ldr	r3, [r7, #16]
 8006f2a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006f2e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8006f30:	693b      	ldr	r3, [r7, #16]
 8006f32:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006f36:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006f38:	683b      	ldr	r3, [r7, #0]
 8006f3a:	695b      	ldr	r3, [r3, #20]
 8006f3c:	019b      	lsls	r3, r3, #6
 8006f3e:	693a      	ldr	r2, [r7, #16]
 8006f40:	4313      	orrs	r3, r2
 8006f42:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8006f44:	683b      	ldr	r3, [r7, #0]
 8006f46:	699b      	ldr	r3, [r3, #24]
 8006f48:	019b      	lsls	r3, r3, #6
 8006f4a:	693a      	ldr	r2, [r7, #16]
 8006f4c:	4313      	orrs	r3, r2
 8006f4e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	693a      	ldr	r2, [r7, #16]
 8006f54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	68fa      	ldr	r2, [r7, #12]
 8006f5a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006f5c:	683b      	ldr	r3, [r7, #0]
 8006f5e:	685a      	ldr	r2, [r3, #4]
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	697a      	ldr	r2, [r7, #20]
 8006f68:	621a      	str	r2, [r3, #32]
}
 8006f6a:	bf00      	nop
 8006f6c:	371c      	adds	r7, #28
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f74:	4770      	bx	lr
 8006f76:	bf00      	nop
 8006f78:	40012c00 	.word	0x40012c00
 8006f7c:	40013400 	.word	0x40013400
 8006f80:	40015000 	.word	0x40015000
 8006f84:	40014000 	.word	0x40014000
 8006f88:	40014400 	.word	0x40014400
 8006f8c:	40014800 	.word	0x40014800

08006f90 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006f90:	b480      	push	{r7}
 8006f92:	b087      	sub	sp, #28
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	6078      	str	r0, [r7, #4]
 8006f98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	6a1b      	ldr	r3, [r3, #32]
 8006f9e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	6a1b      	ldr	r3, [r3, #32]
 8006faa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	685b      	ldr	r3, [r3, #4]
 8006fb0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006fb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006fbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fc2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006fc4:	683b      	ldr	r3, [r7, #0]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	68fa      	ldr	r2, [r7, #12]
 8006fca:	4313      	orrs	r3, r2
 8006fcc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006fce:	693b      	ldr	r3, [r7, #16]
 8006fd0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006fd4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006fd6:	683b      	ldr	r3, [r7, #0]
 8006fd8:	689b      	ldr	r3, [r3, #8]
 8006fda:	041b      	lsls	r3, r3, #16
 8006fdc:	693a      	ldr	r2, [r7, #16]
 8006fde:	4313      	orrs	r3, r2
 8006fe0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	4a19      	ldr	r2, [pc, #100]	; (800704c <TIM_OC5_SetConfig+0xbc>)
 8006fe6:	4293      	cmp	r3, r2
 8006fe8:	d013      	beq.n	8007012 <TIM_OC5_SetConfig+0x82>
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	4a18      	ldr	r2, [pc, #96]	; (8007050 <TIM_OC5_SetConfig+0xc0>)
 8006fee:	4293      	cmp	r3, r2
 8006ff0:	d00f      	beq.n	8007012 <TIM_OC5_SetConfig+0x82>
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	4a17      	ldr	r2, [pc, #92]	; (8007054 <TIM_OC5_SetConfig+0xc4>)
 8006ff6:	4293      	cmp	r3, r2
 8006ff8:	d00b      	beq.n	8007012 <TIM_OC5_SetConfig+0x82>
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	4a16      	ldr	r2, [pc, #88]	; (8007058 <TIM_OC5_SetConfig+0xc8>)
 8006ffe:	4293      	cmp	r3, r2
 8007000:	d007      	beq.n	8007012 <TIM_OC5_SetConfig+0x82>
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	4a15      	ldr	r2, [pc, #84]	; (800705c <TIM_OC5_SetConfig+0xcc>)
 8007006:	4293      	cmp	r3, r2
 8007008:	d003      	beq.n	8007012 <TIM_OC5_SetConfig+0x82>
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	4a14      	ldr	r2, [pc, #80]	; (8007060 <TIM_OC5_SetConfig+0xd0>)
 800700e:	4293      	cmp	r3, r2
 8007010:	d109      	bne.n	8007026 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007012:	697b      	ldr	r3, [r7, #20]
 8007014:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007018:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800701a:	683b      	ldr	r3, [r7, #0]
 800701c:	695b      	ldr	r3, [r3, #20]
 800701e:	021b      	lsls	r3, r3, #8
 8007020:	697a      	ldr	r2, [r7, #20]
 8007022:	4313      	orrs	r3, r2
 8007024:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	697a      	ldr	r2, [r7, #20]
 800702a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	68fa      	ldr	r2, [r7, #12]
 8007030:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007032:	683b      	ldr	r3, [r7, #0]
 8007034:	685a      	ldr	r2, [r3, #4]
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	693a      	ldr	r2, [r7, #16]
 800703e:	621a      	str	r2, [r3, #32]
}
 8007040:	bf00      	nop
 8007042:	371c      	adds	r7, #28
 8007044:	46bd      	mov	sp, r7
 8007046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704a:	4770      	bx	lr
 800704c:	40012c00 	.word	0x40012c00
 8007050:	40013400 	.word	0x40013400
 8007054:	40014000 	.word	0x40014000
 8007058:	40014400 	.word	0x40014400
 800705c:	40014800 	.word	0x40014800
 8007060:	40015000 	.word	0x40015000

08007064 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007064:	b480      	push	{r7}
 8007066:	b087      	sub	sp, #28
 8007068:	af00      	add	r7, sp, #0
 800706a:	6078      	str	r0, [r7, #4]
 800706c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	6a1b      	ldr	r3, [r3, #32]
 8007072:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	6a1b      	ldr	r3, [r3, #32]
 800707e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	685b      	ldr	r3, [r3, #4]
 8007084:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800708a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007092:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007096:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007098:	683b      	ldr	r3, [r7, #0]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	021b      	lsls	r3, r3, #8
 800709e:	68fa      	ldr	r2, [r7, #12]
 80070a0:	4313      	orrs	r3, r2
 80070a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80070a4:	693b      	ldr	r3, [r7, #16]
 80070a6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80070aa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80070ac:	683b      	ldr	r3, [r7, #0]
 80070ae:	689b      	ldr	r3, [r3, #8]
 80070b0:	051b      	lsls	r3, r3, #20
 80070b2:	693a      	ldr	r2, [r7, #16]
 80070b4:	4313      	orrs	r3, r2
 80070b6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	4a1a      	ldr	r2, [pc, #104]	; (8007124 <TIM_OC6_SetConfig+0xc0>)
 80070bc:	4293      	cmp	r3, r2
 80070be:	d013      	beq.n	80070e8 <TIM_OC6_SetConfig+0x84>
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	4a19      	ldr	r2, [pc, #100]	; (8007128 <TIM_OC6_SetConfig+0xc4>)
 80070c4:	4293      	cmp	r3, r2
 80070c6:	d00f      	beq.n	80070e8 <TIM_OC6_SetConfig+0x84>
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	4a18      	ldr	r2, [pc, #96]	; (800712c <TIM_OC6_SetConfig+0xc8>)
 80070cc:	4293      	cmp	r3, r2
 80070ce:	d00b      	beq.n	80070e8 <TIM_OC6_SetConfig+0x84>
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	4a17      	ldr	r2, [pc, #92]	; (8007130 <TIM_OC6_SetConfig+0xcc>)
 80070d4:	4293      	cmp	r3, r2
 80070d6:	d007      	beq.n	80070e8 <TIM_OC6_SetConfig+0x84>
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	4a16      	ldr	r2, [pc, #88]	; (8007134 <TIM_OC6_SetConfig+0xd0>)
 80070dc:	4293      	cmp	r3, r2
 80070de:	d003      	beq.n	80070e8 <TIM_OC6_SetConfig+0x84>
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	4a15      	ldr	r2, [pc, #84]	; (8007138 <TIM_OC6_SetConfig+0xd4>)
 80070e4:	4293      	cmp	r3, r2
 80070e6:	d109      	bne.n	80070fc <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80070e8:	697b      	ldr	r3, [r7, #20]
 80070ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80070ee:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80070f0:	683b      	ldr	r3, [r7, #0]
 80070f2:	695b      	ldr	r3, [r3, #20]
 80070f4:	029b      	lsls	r3, r3, #10
 80070f6:	697a      	ldr	r2, [r7, #20]
 80070f8:	4313      	orrs	r3, r2
 80070fa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	697a      	ldr	r2, [r7, #20]
 8007100:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	68fa      	ldr	r2, [r7, #12]
 8007106:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007108:	683b      	ldr	r3, [r7, #0]
 800710a:	685a      	ldr	r2, [r3, #4]
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	693a      	ldr	r2, [r7, #16]
 8007114:	621a      	str	r2, [r3, #32]
}
 8007116:	bf00      	nop
 8007118:	371c      	adds	r7, #28
 800711a:	46bd      	mov	sp, r7
 800711c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007120:	4770      	bx	lr
 8007122:	bf00      	nop
 8007124:	40012c00 	.word	0x40012c00
 8007128:	40013400 	.word	0x40013400
 800712c:	40014000 	.word	0x40014000
 8007130:	40014400 	.word	0x40014400
 8007134:	40014800 	.word	0x40014800
 8007138:	40015000 	.word	0x40015000

0800713c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800713c:	b480      	push	{r7}
 800713e:	b087      	sub	sp, #28
 8007140:	af00      	add	r7, sp, #0
 8007142:	60f8      	str	r0, [r7, #12]
 8007144:	60b9      	str	r1, [r7, #8]
 8007146:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	6a1b      	ldr	r3, [r3, #32]
 800714c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	6a1b      	ldr	r3, [r3, #32]
 8007152:	f023 0201 	bic.w	r2, r3, #1
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	699b      	ldr	r3, [r3, #24]
 800715e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007160:	693b      	ldr	r3, [r7, #16]
 8007162:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007166:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	011b      	lsls	r3, r3, #4
 800716c:	693a      	ldr	r2, [r7, #16]
 800716e:	4313      	orrs	r3, r2
 8007170:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007172:	697b      	ldr	r3, [r7, #20]
 8007174:	f023 030a 	bic.w	r3, r3, #10
 8007178:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800717a:	697a      	ldr	r2, [r7, #20]
 800717c:	68bb      	ldr	r3, [r7, #8]
 800717e:	4313      	orrs	r3, r2
 8007180:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	693a      	ldr	r2, [r7, #16]
 8007186:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	697a      	ldr	r2, [r7, #20]
 800718c:	621a      	str	r2, [r3, #32]
}
 800718e:	bf00      	nop
 8007190:	371c      	adds	r7, #28
 8007192:	46bd      	mov	sp, r7
 8007194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007198:	4770      	bx	lr

0800719a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800719a:	b480      	push	{r7}
 800719c:	b087      	sub	sp, #28
 800719e:	af00      	add	r7, sp, #0
 80071a0:	60f8      	str	r0, [r7, #12]
 80071a2:	60b9      	str	r1, [r7, #8]
 80071a4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	6a1b      	ldr	r3, [r3, #32]
 80071aa:	f023 0210 	bic.w	r2, r3, #16
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	699b      	ldr	r3, [r3, #24]
 80071b6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	6a1b      	ldr	r3, [r3, #32]
 80071bc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80071be:	697b      	ldr	r3, [r7, #20]
 80071c0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80071c4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	031b      	lsls	r3, r3, #12
 80071ca:	697a      	ldr	r2, [r7, #20]
 80071cc:	4313      	orrs	r3, r2
 80071ce:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80071d0:	693b      	ldr	r3, [r7, #16]
 80071d2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80071d6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80071d8:	68bb      	ldr	r3, [r7, #8]
 80071da:	011b      	lsls	r3, r3, #4
 80071dc:	693a      	ldr	r2, [r7, #16]
 80071de:	4313      	orrs	r3, r2
 80071e0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	697a      	ldr	r2, [r7, #20]
 80071e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	693a      	ldr	r2, [r7, #16]
 80071ec:	621a      	str	r2, [r3, #32]
}
 80071ee:	bf00      	nop
 80071f0:	371c      	adds	r7, #28
 80071f2:	46bd      	mov	sp, r7
 80071f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f8:	4770      	bx	lr

080071fa <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80071fa:	b480      	push	{r7}
 80071fc:	b085      	sub	sp, #20
 80071fe:	af00      	add	r7, sp, #0
 8007200:	6078      	str	r0, [r7, #4]
 8007202:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	689b      	ldr	r3, [r3, #8]
 8007208:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8007210:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007214:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007216:	683a      	ldr	r2, [r7, #0]
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	4313      	orrs	r3, r2
 800721c:	f043 0307 	orr.w	r3, r3, #7
 8007220:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	68fa      	ldr	r2, [r7, #12]
 8007226:	609a      	str	r2, [r3, #8]
}
 8007228:	bf00      	nop
 800722a:	3714      	adds	r7, #20
 800722c:	46bd      	mov	sp, r7
 800722e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007232:	4770      	bx	lr

08007234 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007234:	b480      	push	{r7}
 8007236:	b087      	sub	sp, #28
 8007238:	af00      	add	r7, sp, #0
 800723a:	60f8      	str	r0, [r7, #12]
 800723c:	60b9      	str	r1, [r7, #8]
 800723e:	607a      	str	r2, [r7, #4]
 8007240:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	689b      	ldr	r3, [r3, #8]
 8007246:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007248:	697b      	ldr	r3, [r7, #20]
 800724a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800724e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007250:	683b      	ldr	r3, [r7, #0]
 8007252:	021a      	lsls	r2, r3, #8
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	431a      	orrs	r2, r3
 8007258:	68bb      	ldr	r3, [r7, #8]
 800725a:	4313      	orrs	r3, r2
 800725c:	697a      	ldr	r2, [r7, #20]
 800725e:	4313      	orrs	r3, r2
 8007260:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	697a      	ldr	r2, [r7, #20]
 8007266:	609a      	str	r2, [r3, #8]
}
 8007268:	bf00      	nop
 800726a:	371c      	adds	r7, #28
 800726c:	46bd      	mov	sp, r7
 800726e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007272:	4770      	bx	lr

08007274 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007274:	b480      	push	{r7}
 8007276:	b085      	sub	sp, #20
 8007278:	af00      	add	r7, sp, #0
 800727a:	6078      	str	r0, [r7, #4]
 800727c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007284:	2b01      	cmp	r3, #1
 8007286:	d101      	bne.n	800728c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007288:	2302      	movs	r3, #2
 800728a:	e06f      	b.n	800736c <HAL_TIMEx_MasterConfigSynchronization+0xf8>
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	2201      	movs	r2, #1
 8007290:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	2202      	movs	r2, #2
 8007298:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	685b      	ldr	r3, [r3, #4]
 80072a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	689b      	ldr	r3, [r3, #8]
 80072aa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	4a31      	ldr	r2, [pc, #196]	; (8007378 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80072b2:	4293      	cmp	r3, r2
 80072b4:	d009      	beq.n	80072ca <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	4a30      	ldr	r2, [pc, #192]	; (800737c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80072bc:	4293      	cmp	r3, r2
 80072be:	d004      	beq.n	80072ca <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	4a2e      	ldr	r2, [pc, #184]	; (8007380 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80072c6:	4293      	cmp	r3, r2
 80072c8:	d108      	bne.n	80072dc <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80072d0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80072d2:	683b      	ldr	r3, [r7, #0]
 80072d4:	685b      	ldr	r3, [r3, #4]
 80072d6:	68fa      	ldr	r2, [r7, #12]
 80072d8:	4313      	orrs	r3, r2
 80072da:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80072e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072e6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80072e8:	683b      	ldr	r3, [r7, #0]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	68fa      	ldr	r2, [r7, #12]
 80072ee:	4313      	orrs	r3, r2
 80072f0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	68fa      	ldr	r2, [r7, #12]
 80072f8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	4a1e      	ldr	r2, [pc, #120]	; (8007378 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007300:	4293      	cmp	r3, r2
 8007302:	d01d      	beq.n	8007340 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800730c:	d018      	beq.n	8007340 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	4a1c      	ldr	r2, [pc, #112]	; (8007384 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007314:	4293      	cmp	r3, r2
 8007316:	d013      	beq.n	8007340 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	4a1a      	ldr	r2, [pc, #104]	; (8007388 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800731e:	4293      	cmp	r3, r2
 8007320:	d00e      	beq.n	8007340 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	4a15      	ldr	r2, [pc, #84]	; (800737c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007328:	4293      	cmp	r3, r2
 800732a:	d009      	beq.n	8007340 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	4a16      	ldr	r2, [pc, #88]	; (800738c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007332:	4293      	cmp	r3, r2
 8007334:	d004      	beq.n	8007340 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	4a11      	ldr	r2, [pc, #68]	; (8007380 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800733c:	4293      	cmp	r3, r2
 800733e:	d10c      	bne.n	800735a <HAL_TIMEx_MasterConfigSynchronization+0xe6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007340:	68bb      	ldr	r3, [r7, #8]
 8007342:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007346:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007348:	683b      	ldr	r3, [r7, #0]
 800734a:	689b      	ldr	r3, [r3, #8]
 800734c:	68ba      	ldr	r2, [r7, #8]
 800734e:	4313      	orrs	r3, r2
 8007350:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	68ba      	ldr	r2, [r7, #8]
 8007358:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	2201      	movs	r2, #1
 800735e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	2200      	movs	r2, #0
 8007366:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800736a:	2300      	movs	r3, #0
}
 800736c:	4618      	mov	r0, r3
 800736e:	3714      	adds	r7, #20
 8007370:	46bd      	mov	sp, r7
 8007372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007376:	4770      	bx	lr
 8007378:	40012c00 	.word	0x40012c00
 800737c:	40013400 	.word	0x40013400
 8007380:	40015000 	.word	0x40015000
 8007384:	40000400 	.word	0x40000400
 8007388:	40000800 	.word	0x40000800
 800738c:	40014000 	.word	0x40014000

08007390 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007390:	b480      	push	{r7}
 8007392:	b085      	sub	sp, #20
 8007394:	af00      	add	r7, sp, #0
 8007396:	6078      	str	r0, [r7, #4]
 8007398:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800739a:	2300      	movs	r3, #0
 800739c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80073a4:	2b01      	cmp	r3, #1
 80073a6:	d101      	bne.n	80073ac <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80073a8:	2302      	movs	r3, #2
 80073aa:	e096      	b.n	80074da <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	2201      	movs	r2, #1
 80073b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80073ba:	683b      	ldr	r3, [r7, #0]
 80073bc:	68db      	ldr	r3, [r3, #12]
 80073be:	4313      	orrs	r3, r2
 80073c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80073c8:	683b      	ldr	r3, [r7, #0]
 80073ca:	689b      	ldr	r3, [r3, #8]
 80073cc:	4313      	orrs	r3, r2
 80073ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80073d6:	683b      	ldr	r3, [r7, #0]
 80073d8:	685b      	ldr	r3, [r3, #4]
 80073da:	4313      	orrs	r3, r2
 80073dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80073e4:	683b      	ldr	r3, [r7, #0]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	4313      	orrs	r3, r2
 80073ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80073f2:	683b      	ldr	r3, [r7, #0]
 80073f4:	691b      	ldr	r3, [r3, #16]
 80073f6:	4313      	orrs	r3, r2
 80073f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007400:	683b      	ldr	r3, [r7, #0]
 8007402:	695b      	ldr	r3, [r3, #20]
 8007404:	4313      	orrs	r3, r2
 8007406:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800740e:	683b      	ldr	r3, [r7, #0]
 8007410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007412:	4313      	orrs	r3, r2
 8007414:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800741c:	683b      	ldr	r3, [r7, #0]
 800741e:	699b      	ldr	r3, [r3, #24]
 8007420:	041b      	lsls	r3, r3, #16
 8007422:	4313      	orrs	r3, r2
 8007424:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	4a2f      	ldr	r2, [pc, #188]	; (80074e8 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800742c:	4293      	cmp	r3, r2
 800742e:	d009      	beq.n	8007444 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	4a2d      	ldr	r2, [pc, #180]	; (80074ec <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8007436:	4293      	cmp	r3, r2
 8007438:	d004      	beq.n	8007444 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	4a2c      	ldr	r2, [pc, #176]	; (80074f0 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8007440:	4293      	cmp	r3, r2
 8007442:	d106      	bne.n	8007452 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800744a:	683b      	ldr	r3, [r7, #0]
 800744c:	69db      	ldr	r3, [r3, #28]
 800744e:	4313      	orrs	r3, r2
 8007450:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	4a24      	ldr	r2, [pc, #144]	; (80074e8 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8007458:	4293      	cmp	r3, r2
 800745a:	d009      	beq.n	8007470 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	4a22      	ldr	r2, [pc, #136]	; (80074ec <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8007462:	4293      	cmp	r3, r2
 8007464:	d004      	beq.n	8007470 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	4a21      	ldr	r2, [pc, #132]	; (80074f0 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800746c:	4293      	cmp	r3, r2
 800746e:	d12b      	bne.n	80074c8 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8007476:	683b      	ldr	r3, [r7, #0]
 8007478:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800747a:	051b      	lsls	r3, r3, #20
 800747c:	4313      	orrs	r3, r2
 800747e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007486:	683b      	ldr	r3, [r7, #0]
 8007488:	6a1b      	ldr	r3, [r3, #32]
 800748a:	4313      	orrs	r3, r2
 800748c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007494:	683b      	ldr	r3, [r7, #0]
 8007496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007498:	4313      	orrs	r3, r2
 800749a:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	4a11      	ldr	r2, [pc, #68]	; (80074e8 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 80074a2:	4293      	cmp	r3, r2
 80074a4:	d009      	beq.n	80074ba <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	4a10      	ldr	r2, [pc, #64]	; (80074ec <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 80074ac:	4293      	cmp	r3, r2
 80074ae:	d004      	beq.n	80074ba <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	4a0e      	ldr	r2, [pc, #56]	; (80074f0 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 80074b6:	4293      	cmp	r3, r2
 80074b8:	d106      	bne.n	80074c8 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80074c0:	683b      	ldr	r3, [r7, #0]
 80074c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074c4:	4313      	orrs	r3, r2
 80074c6:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	68fa      	ldr	r2, [r7, #12]
 80074ce:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2200      	movs	r2, #0
 80074d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80074d8:	2300      	movs	r3, #0
}
 80074da:	4618      	mov	r0, r3
 80074dc:	3714      	adds	r7, #20
 80074de:	46bd      	mov	sp, r7
 80074e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e4:	4770      	bx	lr
 80074e6:	bf00      	nop
 80074e8:	40012c00 	.word	0x40012c00
 80074ec:	40013400 	.word	0x40013400
 80074f0:	40015000 	.word	0x40015000

080074f4 <HAL_TIMEx_ConfigBreakInput>:
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakInput(TIM_HandleTypeDef *htim,
                                             uint32_t BreakInput,
                                             TIMEx_BreakInputConfigTypeDef *sBreakInputConfig)

{
 80074f4:	b480      	push	{r7}
 80074f6:	b08b      	sub	sp, #44	; 0x2c
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	60f8      	str	r0, [r7, #12]
 80074fc:	60b9      	str	r1, [r7, #8]
 80074fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007500:	2300      	movs	r3, #0
 8007502:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  assert_param(IS_TIM_BREAKINPUTSOURCE(sBreakInputConfig->Source));
  assert_param(IS_TIM_BREAKINPUTSOURCE_STATE(sBreakInputConfig->Enable));
  assert_param(IS_TIM_BREAKINPUTSOURCE_POLARITY(sBreakInputConfig->Polarity));

  /* Check input state */
  __HAL_LOCK(htim);
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800750c:	2b01      	cmp	r3, #1
 800750e:	d101      	bne.n	8007514 <HAL_TIMEx_ConfigBreakInput+0x20>
 8007510:	2302      	movs	r3, #2
 8007512:	e0c1      	b.n	8007698 <HAL_TIMEx_ConfigBreakInput+0x1a4>
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	2201      	movs	r2, #1
 8007518:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (sBreakInputConfig->Source)
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	3b01      	subs	r3, #1
 8007522:	2b0f      	cmp	r3, #15
 8007524:	d854      	bhi.n	80075d0 <HAL_TIMEx_ConfigBreakInput+0xdc>
 8007526:	a201      	add	r2, pc, #4	; (adr r2, 800752c <HAL_TIMEx_ConfigBreakInput+0x38>)
 8007528:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800752c:	0800756d 	.word	0x0800756d
 8007530:	08007581 	.word	0x08007581
 8007534:	080075d1 	.word	0x080075d1
 8007538:	08007595 	.word	0x08007595
 800753c:	080075d1 	.word	0x080075d1
 8007540:	080075d1 	.word	0x080075d1
 8007544:	080075d1 	.word	0x080075d1
 8007548:	080075a9 	.word	0x080075a9
 800754c:	080075d1 	.word	0x080075d1
 8007550:	080075d1 	.word	0x080075d1
 8007554:	080075d1 	.word	0x080075d1
 8007558:	080075d1 	.word	0x080075d1
 800755c:	080075d1 	.word	0x080075d1
 8007560:	080075d1 	.word	0x080075d1
 8007564:	080075d1 	.word	0x080075d1
 8007568:	080075bd 	.word	0x080075bd
  {
    case TIM_BREAKINPUTSOURCE_BKIN:
    {
      bkin_enable_mask = TIM1_AF1_BKINE;
 800756c:	2301      	movs	r3, #1
 800756e:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKINE_Pos;
 8007570:	2300      	movs	r3, #0
 8007572:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKINP;
 8007574:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007578:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKINP_Pos;
 800757a:	2309      	movs	r3, #9
 800757c:	617b      	str	r3, [r7, #20]
      break;
 800757e:	e030      	b.n	80075e2 <HAL_TIMEx_ConfigBreakInput+0xee>
    }
    case TIM_BREAKINPUTSOURCE_COMP1:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP1E;
 8007580:	2302      	movs	r3, #2
 8007582:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP1E_Pos;
 8007584:	2301      	movs	r3, #1
 8007586:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKCMP1P;
 8007588:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800758c:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP1P_Pos;
 800758e:	230a      	movs	r3, #10
 8007590:	617b      	str	r3, [r7, #20]
      break;
 8007592:	e026      	b.n	80075e2 <HAL_TIMEx_ConfigBreakInput+0xee>
    }
    case TIM_BREAKINPUTSOURCE_COMP2:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP2E;
 8007594:	2304      	movs	r3, #4
 8007596:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP2E_Pos;
 8007598:	2302      	movs	r3, #2
 800759a:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKCMP2P;
 800759c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80075a0:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP2P_Pos;
 80075a2:	230b      	movs	r3, #11
 80075a4:	617b      	str	r3, [r7, #20]
      break;
 80075a6:	e01c      	b.n	80075e2 <HAL_TIMEx_ConfigBreakInput+0xee>
    }
    case TIM_BREAKINPUTSOURCE_COMP3:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP3E;
 80075a8:	2308      	movs	r3, #8
 80075aa:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP3E_Pos;
 80075ac:	2303      	movs	r3, #3
 80075ae:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKCMP3P;
 80075b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80075b4:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP3P_Pos;
 80075b6:	230c      	movs	r3, #12
 80075b8:	617b      	str	r3, [r7, #20]
      break;
 80075ba:	e012      	b.n	80075e2 <HAL_TIMEx_ConfigBreakInput+0xee>
    }
    case TIM_BREAKINPUTSOURCE_COMP4:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP4E;
 80075bc:	2310      	movs	r3, #16
 80075be:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP4E_Pos;
 80075c0:	2304      	movs	r3, #4
 80075c2:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKCMP4P;
 80075c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80075c8:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP4P_Pos;
 80075ca:	230d      	movs	r3, #13
 80075cc:	617b      	str	r3, [r7, #20]
      break;
 80075ce:	e008      	b.n	80075e2 <HAL_TIMEx_ConfigBreakInput+0xee>
    }
#endif /* COMP7 */

    default:
    {
      bkin_enable_mask = 0U;
 80075d0:	2300      	movs	r3, #0
 80075d2:	623b      	str	r3, [r7, #32]
      bkin_polarity_mask = 0U;
 80075d4:	2300      	movs	r3, #0
 80075d6:	61fb      	str	r3, [r7, #28]
      bkin_enable_bitpos = 0U;
 80075d8:	2300      	movs	r3, #0
 80075da:	61bb      	str	r3, [r7, #24]
      bkin_polarity_bitpos = 0U;
 80075dc:	2300      	movs	r3, #0
 80075de:	617b      	str	r3, [r7, #20]
      break;
 80075e0:	bf00      	nop
    }
  }

  switch (BreakInput)
 80075e2:	68bb      	ldr	r3, [r7, #8]
 80075e4:	2b01      	cmp	r3, #1
 80075e6:	d003      	beq.n	80075f0 <HAL_TIMEx_ConfigBreakInput+0xfc>
 80075e8:	68bb      	ldr	r3, [r7, #8]
 80075ea:	2b02      	cmp	r3, #2
 80075ec:	d025      	beq.n	800763a <HAL_TIMEx_ConfigBreakInput+0x146>
 80075ee:	e049      	b.n	8007684 <HAL_TIMEx_ConfigBreakInput+0x190>
  {
    case TIM_BREAKINPUT_BRK:
    {
      /* Get the TIMx_AF1 register value */
      tmporx = htim->Instance->AF1;
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80075f6:	613b      	str	r3, [r7, #16]

      /* Enable the break input */
      tmporx &= ~bkin_enable_mask;
 80075f8:	6a3b      	ldr	r3, [r7, #32]
 80075fa:	43db      	mvns	r3, r3
 80075fc:	693a      	ldr	r2, [r7, #16]
 80075fe:	4013      	ands	r3, r2
 8007600:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	685a      	ldr	r2, [r3, #4]
 8007606:	69bb      	ldr	r3, [r7, #24]
 8007608:	409a      	lsls	r2, r3
 800760a:	6a3b      	ldr	r3, [r7, #32]
 800760c:	4013      	ands	r3, r2
 800760e:	693a      	ldr	r2, [r7, #16]
 8007610:	4313      	orrs	r3, r2
 8007612:	613b      	str	r3, [r7, #16]

      /* Set the break input polarity */
      tmporx &= ~bkin_polarity_mask;
 8007614:	69fb      	ldr	r3, [r7, #28]
 8007616:	43db      	mvns	r3, r3
 8007618:	693a      	ldr	r2, [r7, #16]
 800761a:	4013      	ands	r3, r2
 800761c:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	689a      	ldr	r2, [r3, #8]
 8007622:	697b      	ldr	r3, [r7, #20]
 8007624:	409a      	lsls	r2, r3
 8007626:	69fb      	ldr	r3, [r7, #28]
 8007628:	4013      	ands	r3, r2
 800762a:	693a      	ldr	r2, [r7, #16]
 800762c:	4313      	orrs	r3, r2
 800762e:	613b      	str	r3, [r7, #16]

      /* Set TIMx_AF1 */
      htim->Instance->AF1 = tmporx;
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	693a      	ldr	r2, [r7, #16]
 8007636:	661a      	str	r2, [r3, #96]	; 0x60
      break;
 8007638:	e028      	b.n	800768c <HAL_TIMEx_ConfigBreakInput+0x198>
    }
    case TIM_BREAKINPUT_BRK2:
    {
      /* Get the TIMx_AF2 register value */
      tmporx = htim->Instance->AF2;
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007640:	613b      	str	r3, [r7, #16]

      /* Enable the break input */
      tmporx &= ~bkin_enable_mask;
 8007642:	6a3b      	ldr	r3, [r7, #32]
 8007644:	43db      	mvns	r3, r3
 8007646:	693a      	ldr	r2, [r7, #16]
 8007648:	4013      	ands	r3, r2
 800764a:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	685a      	ldr	r2, [r3, #4]
 8007650:	69bb      	ldr	r3, [r7, #24]
 8007652:	409a      	lsls	r2, r3
 8007654:	6a3b      	ldr	r3, [r7, #32]
 8007656:	4013      	ands	r3, r2
 8007658:	693a      	ldr	r2, [r7, #16]
 800765a:	4313      	orrs	r3, r2
 800765c:	613b      	str	r3, [r7, #16]

      /* Set the break input polarity */
      tmporx &= ~bkin_polarity_mask;
 800765e:	69fb      	ldr	r3, [r7, #28]
 8007660:	43db      	mvns	r3, r3
 8007662:	693a      	ldr	r2, [r7, #16]
 8007664:	4013      	ands	r3, r2
 8007666:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	689a      	ldr	r2, [r3, #8]
 800766c:	697b      	ldr	r3, [r7, #20]
 800766e:	409a      	lsls	r2, r3
 8007670:	69fb      	ldr	r3, [r7, #28]
 8007672:	4013      	ands	r3, r2
 8007674:	693a      	ldr	r2, [r7, #16]
 8007676:	4313      	orrs	r3, r2
 8007678:	613b      	str	r3, [r7, #16]

      /* Set TIMx_AF2 */
      htim->Instance->AF2 = tmporx;
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	693a      	ldr	r2, [r7, #16]
 8007680:	665a      	str	r2, [r3, #100]	; 0x64
      break;
 8007682:	e003      	b.n	800768c <HAL_TIMEx_ConfigBreakInput+0x198>
    }
    default:
      status = HAL_ERROR;
 8007684:	2301      	movs	r3, #1
 8007686:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800768a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	2200      	movs	r2, #0
 8007690:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007694:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8007698:	4618      	mov	r0, r3
 800769a:	372c      	adds	r7, #44	; 0x2c
 800769c:	46bd      	mov	sp, r7
 800769e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a2:	4770      	bx	lr

080076a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80076a4:	b480      	push	{r7}
 80076a6:	b083      	sub	sp, #12
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80076ac:	bf00      	nop
 80076ae:	370c      	adds	r7, #12
 80076b0:	46bd      	mov	sp, r7
 80076b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b6:	4770      	bx	lr

080076b8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80076b8:	b480      	push	{r7}
 80076ba:	b083      	sub	sp, #12
 80076bc:	af00      	add	r7, sp, #0
 80076be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80076c0:	bf00      	nop
 80076c2:	370c      	adds	r7, #12
 80076c4:	46bd      	mov	sp, r7
 80076c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ca:	4770      	bx	lr

080076cc <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80076cc:	b480      	push	{r7}
 80076ce:	b083      	sub	sp, #12
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80076d4:	bf00      	nop
 80076d6:	370c      	adds	r7, #12
 80076d8:	46bd      	mov	sp, r7
 80076da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076de:	4770      	bx	lr

080076e0 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80076e0:	b480      	push	{r7}
 80076e2:	b083      	sub	sp, #12
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80076e8:	bf00      	nop
 80076ea:	370c      	adds	r7, #12
 80076ec:	46bd      	mov	sp, r7
 80076ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f2:	4770      	bx	lr

080076f4 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80076f4:	b480      	push	{r7}
 80076f6:	b083      	sub	sp, #12
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80076fc:	bf00      	nop
 80076fe:	370c      	adds	r7, #12
 8007700:	46bd      	mov	sp, r7
 8007702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007706:	4770      	bx	lr

08007708 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8007708:	b480      	push	{r7}
 800770a:	b083      	sub	sp, #12
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8007710:	bf00      	nop
 8007712:	370c      	adds	r7, #12
 8007714:	46bd      	mov	sp, r7
 8007716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771a:	4770      	bx	lr

0800771c <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 800771c:	b480      	push	{r7}
 800771e:	b08b      	sub	sp, #44	; 0x2c
 8007720:	af00      	add	r7, sp, #0
 8007722:	60f8      	str	r0, [r7, #12]
 8007724:	60b9      	str	r1, [r7, #8]
 8007726:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	681a      	ldr	r2, [r3, #0]
 800772c:	68bb      	ldr	r3, [r7, #8]
 800772e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007730:	697b      	ldr	r3, [r7, #20]
 8007732:	fa93 f3a3 	rbit	r3, r3
 8007736:	613b      	str	r3, [r7, #16]
  return result;
 8007738:	693b      	ldr	r3, [r7, #16]
 800773a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800773c:	69bb      	ldr	r3, [r7, #24]
 800773e:	2b00      	cmp	r3, #0
 8007740:	d101      	bne.n	8007746 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8007742:	2320      	movs	r3, #32
 8007744:	e003      	b.n	800774e <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8007746:	69bb      	ldr	r3, [r7, #24]
 8007748:	fab3 f383 	clz	r3, r3
 800774c:	b2db      	uxtb	r3, r3
 800774e:	005b      	lsls	r3, r3, #1
 8007750:	2103      	movs	r1, #3
 8007752:	fa01 f303 	lsl.w	r3, r1, r3
 8007756:	43db      	mvns	r3, r3
 8007758:	401a      	ands	r2, r3
 800775a:	68bb      	ldr	r3, [r7, #8]
 800775c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800775e:	6a3b      	ldr	r3, [r7, #32]
 8007760:	fa93 f3a3 	rbit	r3, r3
 8007764:	61fb      	str	r3, [r7, #28]
  return result;
 8007766:	69fb      	ldr	r3, [r7, #28]
 8007768:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800776a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800776c:	2b00      	cmp	r3, #0
 800776e:	d101      	bne.n	8007774 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8007770:	2320      	movs	r3, #32
 8007772:	e003      	b.n	800777c <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8007774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007776:	fab3 f383 	clz	r3, r3
 800777a:	b2db      	uxtb	r3, r3
 800777c:	005b      	lsls	r3, r3, #1
 800777e:	6879      	ldr	r1, [r7, #4]
 8007780:	fa01 f303 	lsl.w	r3, r1, r3
 8007784:	431a      	orrs	r2, r3
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	601a      	str	r2, [r3, #0]
}
 800778a:	bf00      	nop
 800778c:	372c      	adds	r7, #44	; 0x2c
 800778e:	46bd      	mov	sp, r7
 8007790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007794:	4770      	bx	lr

08007796 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8007796:	b480      	push	{r7}
 8007798:	b085      	sub	sp, #20
 800779a:	af00      	add	r7, sp, #0
 800779c:	60f8      	str	r0, [r7, #12]
 800779e:	60b9      	str	r1, [r7, #8]
 80077a0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	685a      	ldr	r2, [r3, #4]
 80077a6:	68bb      	ldr	r3, [r7, #8]
 80077a8:	43db      	mvns	r3, r3
 80077aa:	401a      	ands	r2, r3
 80077ac:	68bb      	ldr	r3, [r7, #8]
 80077ae:	6879      	ldr	r1, [r7, #4]
 80077b0:	fb01 f303 	mul.w	r3, r1, r3
 80077b4:	431a      	orrs	r2, r3
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	605a      	str	r2, [r3, #4]
}
 80077ba:	bf00      	nop
 80077bc:	3714      	adds	r7, #20
 80077be:	46bd      	mov	sp, r7
 80077c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c4:	4770      	bx	lr

080077c6 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 80077c6:	b480      	push	{r7}
 80077c8:	b08b      	sub	sp, #44	; 0x2c
 80077ca:	af00      	add	r7, sp, #0
 80077cc:	60f8      	str	r0, [r7, #12]
 80077ce:	60b9      	str	r1, [r7, #8]
 80077d0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	689a      	ldr	r2, [r3, #8]
 80077d6:	68bb      	ldr	r3, [r7, #8]
 80077d8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80077da:	697b      	ldr	r3, [r7, #20]
 80077dc:	fa93 f3a3 	rbit	r3, r3
 80077e0:	613b      	str	r3, [r7, #16]
  return result;
 80077e2:	693b      	ldr	r3, [r7, #16]
 80077e4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80077e6:	69bb      	ldr	r3, [r7, #24]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d101      	bne.n	80077f0 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 80077ec:	2320      	movs	r3, #32
 80077ee:	e003      	b.n	80077f8 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 80077f0:	69bb      	ldr	r3, [r7, #24]
 80077f2:	fab3 f383 	clz	r3, r3
 80077f6:	b2db      	uxtb	r3, r3
 80077f8:	005b      	lsls	r3, r3, #1
 80077fa:	2103      	movs	r1, #3
 80077fc:	fa01 f303 	lsl.w	r3, r1, r3
 8007800:	43db      	mvns	r3, r3
 8007802:	401a      	ands	r2, r3
 8007804:	68bb      	ldr	r3, [r7, #8]
 8007806:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007808:	6a3b      	ldr	r3, [r7, #32]
 800780a:	fa93 f3a3 	rbit	r3, r3
 800780e:	61fb      	str	r3, [r7, #28]
  return result;
 8007810:	69fb      	ldr	r3, [r7, #28]
 8007812:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8007814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007816:	2b00      	cmp	r3, #0
 8007818:	d101      	bne.n	800781e <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 800781a:	2320      	movs	r3, #32
 800781c:	e003      	b.n	8007826 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 800781e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007820:	fab3 f383 	clz	r3, r3
 8007824:	b2db      	uxtb	r3, r3
 8007826:	005b      	lsls	r3, r3, #1
 8007828:	6879      	ldr	r1, [r7, #4]
 800782a:	fa01 f303 	lsl.w	r3, r1, r3
 800782e:	431a      	orrs	r2, r3
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8007834:	bf00      	nop
 8007836:	372c      	adds	r7, #44	; 0x2c
 8007838:	46bd      	mov	sp, r7
 800783a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783e:	4770      	bx	lr

08007840 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8007840:	b480      	push	{r7}
 8007842:	b08b      	sub	sp, #44	; 0x2c
 8007844:	af00      	add	r7, sp, #0
 8007846:	60f8      	str	r0, [r7, #12]
 8007848:	60b9      	str	r1, [r7, #8]
 800784a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	68da      	ldr	r2, [r3, #12]
 8007850:	68bb      	ldr	r3, [r7, #8]
 8007852:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007854:	697b      	ldr	r3, [r7, #20]
 8007856:	fa93 f3a3 	rbit	r3, r3
 800785a:	613b      	str	r3, [r7, #16]
  return result;
 800785c:	693b      	ldr	r3, [r7, #16]
 800785e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8007860:	69bb      	ldr	r3, [r7, #24]
 8007862:	2b00      	cmp	r3, #0
 8007864:	d101      	bne.n	800786a <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8007866:	2320      	movs	r3, #32
 8007868:	e003      	b.n	8007872 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 800786a:	69bb      	ldr	r3, [r7, #24]
 800786c:	fab3 f383 	clz	r3, r3
 8007870:	b2db      	uxtb	r3, r3
 8007872:	005b      	lsls	r3, r3, #1
 8007874:	2103      	movs	r1, #3
 8007876:	fa01 f303 	lsl.w	r3, r1, r3
 800787a:	43db      	mvns	r3, r3
 800787c:	401a      	ands	r2, r3
 800787e:	68bb      	ldr	r3, [r7, #8]
 8007880:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007882:	6a3b      	ldr	r3, [r7, #32]
 8007884:	fa93 f3a3 	rbit	r3, r3
 8007888:	61fb      	str	r3, [r7, #28]
  return result;
 800788a:	69fb      	ldr	r3, [r7, #28]
 800788c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800788e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007890:	2b00      	cmp	r3, #0
 8007892:	d101      	bne.n	8007898 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8007894:	2320      	movs	r3, #32
 8007896:	e003      	b.n	80078a0 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8007898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800789a:	fab3 f383 	clz	r3, r3
 800789e:	b2db      	uxtb	r3, r3
 80078a0:	005b      	lsls	r3, r3, #1
 80078a2:	6879      	ldr	r1, [r7, #4]
 80078a4:	fa01 f303 	lsl.w	r3, r1, r3
 80078a8:	431a      	orrs	r2, r3
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	60da      	str	r2, [r3, #12]
}
 80078ae:	bf00      	nop
 80078b0:	372c      	adds	r7, #44	; 0x2c
 80078b2:	46bd      	mov	sp, r7
 80078b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b8:	4770      	bx	lr

080078ba <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 80078ba:	b480      	push	{r7}
 80078bc:	b08b      	sub	sp, #44	; 0x2c
 80078be:	af00      	add	r7, sp, #0
 80078c0:	60f8      	str	r0, [r7, #12]
 80078c2:	60b9      	str	r1, [r7, #8]
 80078c4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	6a1a      	ldr	r2, [r3, #32]
 80078ca:	68bb      	ldr	r3, [r7, #8]
 80078cc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80078ce:	697b      	ldr	r3, [r7, #20]
 80078d0:	fa93 f3a3 	rbit	r3, r3
 80078d4:	613b      	str	r3, [r7, #16]
  return result;
 80078d6:	693b      	ldr	r3, [r7, #16]
 80078d8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80078da:	69bb      	ldr	r3, [r7, #24]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d101      	bne.n	80078e4 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 80078e0:	2320      	movs	r3, #32
 80078e2:	e003      	b.n	80078ec <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 80078e4:	69bb      	ldr	r3, [r7, #24]
 80078e6:	fab3 f383 	clz	r3, r3
 80078ea:	b2db      	uxtb	r3, r3
 80078ec:	009b      	lsls	r3, r3, #2
 80078ee:	210f      	movs	r1, #15
 80078f0:	fa01 f303 	lsl.w	r3, r1, r3
 80078f4:	43db      	mvns	r3, r3
 80078f6:	401a      	ands	r2, r3
 80078f8:	68bb      	ldr	r3, [r7, #8]
 80078fa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80078fc:	6a3b      	ldr	r3, [r7, #32]
 80078fe:	fa93 f3a3 	rbit	r3, r3
 8007902:	61fb      	str	r3, [r7, #28]
  return result;
 8007904:	69fb      	ldr	r3, [r7, #28]
 8007906:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8007908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800790a:	2b00      	cmp	r3, #0
 800790c:	d101      	bne.n	8007912 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 800790e:	2320      	movs	r3, #32
 8007910:	e003      	b.n	800791a <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8007912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007914:	fab3 f383 	clz	r3, r3
 8007918:	b2db      	uxtb	r3, r3
 800791a:	009b      	lsls	r3, r3, #2
 800791c:	6879      	ldr	r1, [r7, #4]
 800791e:	fa01 f303 	lsl.w	r3, r1, r3
 8007922:	431a      	orrs	r2, r3
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8007928:	bf00      	nop
 800792a:	372c      	adds	r7, #44	; 0x2c
 800792c:	46bd      	mov	sp, r7
 800792e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007932:	4770      	bx	lr

08007934 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8007934:	b480      	push	{r7}
 8007936:	b08b      	sub	sp, #44	; 0x2c
 8007938:	af00      	add	r7, sp, #0
 800793a:	60f8      	str	r0, [r7, #12]
 800793c:	60b9      	str	r1, [r7, #8]
 800793e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007944:	68bb      	ldr	r3, [r7, #8]
 8007946:	0a1b      	lsrs	r3, r3, #8
 8007948:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800794a:	697b      	ldr	r3, [r7, #20]
 800794c:	fa93 f3a3 	rbit	r3, r3
 8007950:	613b      	str	r3, [r7, #16]
  return result;
 8007952:	693b      	ldr	r3, [r7, #16]
 8007954:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8007956:	69bb      	ldr	r3, [r7, #24]
 8007958:	2b00      	cmp	r3, #0
 800795a:	d101      	bne.n	8007960 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 800795c:	2320      	movs	r3, #32
 800795e:	e003      	b.n	8007968 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8007960:	69bb      	ldr	r3, [r7, #24]
 8007962:	fab3 f383 	clz	r3, r3
 8007966:	b2db      	uxtb	r3, r3
 8007968:	009b      	lsls	r3, r3, #2
 800796a:	210f      	movs	r1, #15
 800796c:	fa01 f303 	lsl.w	r3, r1, r3
 8007970:	43db      	mvns	r3, r3
 8007972:	401a      	ands	r2, r3
 8007974:	68bb      	ldr	r3, [r7, #8]
 8007976:	0a1b      	lsrs	r3, r3, #8
 8007978:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800797a:	6a3b      	ldr	r3, [r7, #32]
 800797c:	fa93 f3a3 	rbit	r3, r3
 8007980:	61fb      	str	r3, [r7, #28]
  return result;
 8007982:	69fb      	ldr	r3, [r7, #28]
 8007984:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8007986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007988:	2b00      	cmp	r3, #0
 800798a:	d101      	bne.n	8007990 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 800798c:	2320      	movs	r3, #32
 800798e:	e003      	b.n	8007998 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8007990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007992:	fab3 f383 	clz	r3, r3
 8007996:	b2db      	uxtb	r3, r3
 8007998:	009b      	lsls	r3, r3, #2
 800799a:	6879      	ldr	r1, [r7, #4]
 800799c:	fa01 f303 	lsl.w	r3, r1, r3
 80079a0:	431a      	orrs	r2, r3
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 80079a6:	bf00      	nop
 80079a8:	372c      	adds	r7, #44	; 0x2c
 80079aa:	46bd      	mov	sp, r7
 80079ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b0:	4770      	bx	lr

080079b2 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80079b2:	b580      	push	{r7, lr}
 80079b4:	b088      	sub	sp, #32
 80079b6:	af00      	add	r7, sp, #0
 80079b8:	6078      	str	r0, [r7, #4]
 80079ba:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80079bc:	683b      	ldr	r3, [r7, #0]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80079c2:	693b      	ldr	r3, [r7, #16]
 80079c4:	fa93 f3a3 	rbit	r3, r3
 80079c8:	60fb      	str	r3, [r7, #12]
  return result;
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80079ce:	697b      	ldr	r3, [r7, #20]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d101      	bne.n	80079d8 <LL_GPIO_Init+0x26>
    return 32U;
 80079d4:	2320      	movs	r3, #32
 80079d6:	e003      	b.n	80079e0 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 80079d8:	697b      	ldr	r3, [r7, #20]
 80079da:	fab3 f383 	clz	r3, r3
 80079de:	b2db      	uxtb	r3, r3
 80079e0:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80079e2:	e048      	b.n	8007a76 <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001UL << pinpos);
 80079e4:	683b      	ldr	r3, [r7, #0]
 80079e6:	681a      	ldr	r2, [r3, #0]
 80079e8:	2101      	movs	r1, #1
 80079ea:	69fb      	ldr	r3, [r7, #28]
 80079ec:	fa01 f303 	lsl.w	r3, r1, r3
 80079f0:	4013      	ands	r3, r2
 80079f2:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 80079f4:	69bb      	ldr	r3, [r7, #24]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d03a      	beq.n	8007a70 <LL_GPIO_Init+0xbe>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80079fa:	683b      	ldr	r3, [r7, #0]
 80079fc:	685b      	ldr	r3, [r3, #4]
 80079fe:	2b01      	cmp	r3, #1
 8007a00:	d003      	beq.n	8007a0a <LL_GPIO_Init+0x58>
 8007a02:	683b      	ldr	r3, [r7, #0]
 8007a04:	685b      	ldr	r3, [r3, #4]
 8007a06:	2b02      	cmp	r3, #2
 8007a08:	d10e      	bne.n	8007a28 <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8007a0a:	683b      	ldr	r3, [r7, #0]
 8007a0c:	689b      	ldr	r3, [r3, #8]
 8007a0e:	461a      	mov	r2, r3
 8007a10:	69b9      	ldr	r1, [r7, #24]
 8007a12:	6878      	ldr	r0, [r7, #4]
 8007a14:	f7ff fed7 	bl	80077c6 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8007a18:	683b      	ldr	r3, [r7, #0]
 8007a1a:	6819      	ldr	r1, [r3, #0]
 8007a1c:	683b      	ldr	r3, [r7, #0]
 8007a1e:	68db      	ldr	r3, [r3, #12]
 8007a20:	461a      	mov	r2, r3
 8007a22:	6878      	ldr	r0, [r7, #4]
 8007a24:	f7ff feb7 	bl	8007796 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8007a28:	683b      	ldr	r3, [r7, #0]
 8007a2a:	691b      	ldr	r3, [r3, #16]
 8007a2c:	461a      	mov	r2, r3
 8007a2e:	69b9      	ldr	r1, [r7, #24]
 8007a30:	6878      	ldr	r0, [r7, #4]
 8007a32:	f7ff ff05 	bl	8007840 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8007a36:	683b      	ldr	r3, [r7, #0]
 8007a38:	685b      	ldr	r3, [r3, #4]
 8007a3a:	2b02      	cmp	r3, #2
 8007a3c:	d111      	bne.n	8007a62 <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8007a3e:	69bb      	ldr	r3, [r7, #24]
 8007a40:	2bff      	cmp	r3, #255	; 0xff
 8007a42:	d807      	bhi.n	8007a54 <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8007a44:	683b      	ldr	r3, [r7, #0]
 8007a46:	695b      	ldr	r3, [r3, #20]
 8007a48:	461a      	mov	r2, r3
 8007a4a:	69b9      	ldr	r1, [r7, #24]
 8007a4c:	6878      	ldr	r0, [r7, #4]
 8007a4e:	f7ff ff34 	bl	80078ba <LL_GPIO_SetAFPin_0_7>
 8007a52:	e006      	b.n	8007a62 <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8007a54:	683b      	ldr	r3, [r7, #0]
 8007a56:	695b      	ldr	r3, [r3, #20]
 8007a58:	461a      	mov	r2, r3
 8007a5a:	69b9      	ldr	r1, [r7, #24]
 8007a5c:	6878      	ldr	r0, [r7, #4]
 8007a5e:	f7ff ff69 	bl	8007934 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8007a62:	683b      	ldr	r3, [r7, #0]
 8007a64:	685b      	ldr	r3, [r3, #4]
 8007a66:	461a      	mov	r2, r3
 8007a68:	69b9      	ldr	r1, [r7, #24]
 8007a6a:	6878      	ldr	r0, [r7, #4]
 8007a6c:	f7ff fe56 	bl	800771c <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8007a70:	69fb      	ldr	r3, [r7, #28]
 8007a72:	3301      	adds	r3, #1
 8007a74:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8007a76:	683b      	ldr	r3, [r7, #0]
 8007a78:	681a      	ldr	r2, [r3, #0]
 8007a7a:	69fb      	ldr	r3, [r7, #28]
 8007a7c:	fa22 f303 	lsr.w	r3, r2, r3
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d1af      	bne.n	80079e4 <LL_GPIO_Init+0x32>
  }
  return (SUCCESS);
 8007a84:	2300      	movs	r3, #0
}
 8007a86:	4618      	mov	r0, r3
 8007a88:	3720      	adds	r7, #32
 8007a8a:	46bd      	mov	sp, r7
 8007a8c:	bd80      	pop	{r7, pc}

08007a8e <LL_OPAMP_IsLocked>:
  * @rmtoll CSR      LOCK           LL_OPAMP_IsLocked
  * @param  OPAMPx OPAMP instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_OPAMP_IsLocked(OPAMP_TypeDef *OPAMPx)
{
 8007a8e:	b480      	push	{r7}
 8007a90:	b083      	sub	sp, #12
 8007a92:	af00      	add	r7, sp, #0
 8007a94:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(OPAMPx->CSR, OPAMP_CSR_LOCK) == (OPAMP_CSR_LOCK)) ? 1UL : 0UL);
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007a9e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007aa2:	d101      	bne.n	8007aa8 <LL_OPAMP_IsLocked+0x1a>
 8007aa4:	2301      	movs	r3, #1
 8007aa6:	e000      	b.n	8007aaa <LL_OPAMP_IsLocked+0x1c>
 8007aa8:	2300      	movs	r3, #0
}
 8007aaa:	4618      	mov	r0, r3
 8007aac:	370c      	adds	r7, #12
 8007aae:	46bd      	mov	sp, r7
 8007ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab4:	4770      	bx	lr

08007ab6 <LL_OPAMP_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: OPAMP registers are initialized
  *          - ERROR: OPAMP registers are not initialized
  */
ErrorStatus LL_OPAMP_Init(OPAMP_TypeDef *OPAMPx, LL_OPAMP_InitTypeDef *OPAMP_InitStruct)
{
 8007ab6:	b580      	push	{r7, lr}
 8007ab8:	b084      	sub	sp, #16
 8007aba:	af00      	add	r7, sp, #0
 8007abc:	6078      	str	r0, [r7, #4]
 8007abe:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8007ac0:	2300      	movs	r3, #0
 8007ac2:	73fb      	strb	r3, [r7, #15]
    assert_param(IS_LL_OPAMP_INPUT_INVERTING(OPAMP_InitStruct->InputInverting));
  }

  /* Note: Hardware constraint (refer to description of this function):       */
  /*       OPAMP instance must not be locked.                                 */
  if (LL_OPAMP_IsLocked(OPAMPx) == 0U)
 8007ac4:	6878      	ldr	r0, [r7, #4]
 8007ac6:	f7ff ffe2 	bl	8007a8e <LL_OPAMP_IsLocked>
 8007aca:	4603      	mov	r3, r0
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d129      	bne.n	8007b24 <LL_OPAMP_Init+0x6e>
    /*  - PowerMode                                                             */
    /*  - Functional mode                                                     */
    /*  - Input non-inverting                                                 */
    /*  - Input inverting                                                     */
    /* Note: Bit OPAMP_CSR_CALON reset to ensure to be in functional mode.    */
    if (OPAMP_InitStruct->FunctionalMode != LL_OPAMP_MODE_FOLLOWER)
 8007ad0:	683b      	ldr	r3, [r7, #0]
 8007ad2:	685b      	ldr	r3, [r3, #4]
 8007ad4:	2b60      	cmp	r3, #96	; 0x60
 8007ad6:	d014      	beq.n	8007b02 <LL_OPAMP_Init+0x4c>
    {
      MODIFY_REG(OPAMPx->CSR,
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	f423 23c1 	bic.w	r3, r3, #395264	; 0x60800
 8007ae0:	f023 03ec 	bic.w	r3, r3, #236	; 0xec
 8007ae4:	683a      	ldr	r2, [r7, #0]
 8007ae6:	6811      	ldr	r1, [r2, #0]
 8007ae8:	683a      	ldr	r2, [r7, #0]
 8007aea:	6852      	ldr	r2, [r2, #4]
 8007aec:	4311      	orrs	r1, r2
 8007aee:	683a      	ldr	r2, [r7, #0]
 8007af0:	6892      	ldr	r2, [r2, #8]
 8007af2:	4311      	orrs	r1, r2
 8007af4:	683a      	ldr	r2, [r7, #0]
 8007af6:	68d2      	ldr	r2, [r2, #12]
 8007af8:	430a      	orrs	r2, r1
 8007afa:	431a      	orrs	r2, r3
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	601a      	str	r2, [r3, #0]
 8007b00:	e012      	b.n	8007b28 <LL_OPAMP_Init+0x72>
                 | OPAMP_InitStruct->InputInverting
                );
    }
    else
    {
      MODIFY_REG(OPAMPx->CSR,
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	f423 23c1 	bic.w	r3, r3, #395264	; 0x60800
 8007b0a:	f023 03ec 	bic.w	r3, r3, #236	; 0xec
 8007b0e:	683a      	ldr	r2, [r7, #0]
 8007b10:	6811      	ldr	r1, [r2, #0]
 8007b12:	683a      	ldr	r2, [r7, #0]
 8007b14:	6892      	ldr	r2, [r2, #8]
 8007b16:	430a      	orrs	r2, r1
 8007b18:	4313      	orrs	r3, r2
 8007b1a:	f043 0260 	orr.w	r2, r3, #96	; 0x60
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	601a      	str	r2, [r3, #0]
 8007b22:	e001      	b.n	8007b28 <LL_OPAMP_Init+0x72>
    }
  }
  else
  {
    /* Initialization error: OPAMP instance is locked.                        */
    status = ERROR;
 8007b24:	2301      	movs	r3, #1
 8007b26:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007b28:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b2a:	4618      	mov	r0, r3
 8007b2c:	3710      	adds	r7, #16
 8007b2e:	46bd      	mov	sp, r7
 8007b30:	bd80      	pop	{r7, pc}
	...

08007b34 <__libc_init_array>:
 8007b34:	b570      	push	{r4, r5, r6, lr}
 8007b36:	4d0d      	ldr	r5, [pc, #52]	; (8007b6c <__libc_init_array+0x38>)
 8007b38:	4c0d      	ldr	r4, [pc, #52]	; (8007b70 <__libc_init_array+0x3c>)
 8007b3a:	1b64      	subs	r4, r4, r5
 8007b3c:	10a4      	asrs	r4, r4, #2
 8007b3e:	2600      	movs	r6, #0
 8007b40:	42a6      	cmp	r6, r4
 8007b42:	d109      	bne.n	8007b58 <__libc_init_array+0x24>
 8007b44:	4d0b      	ldr	r5, [pc, #44]	; (8007b74 <__libc_init_array+0x40>)
 8007b46:	4c0c      	ldr	r4, [pc, #48]	; (8007b78 <__libc_init_array+0x44>)
 8007b48:	f000 f820 	bl	8007b8c <_init>
 8007b4c:	1b64      	subs	r4, r4, r5
 8007b4e:	10a4      	asrs	r4, r4, #2
 8007b50:	2600      	movs	r6, #0
 8007b52:	42a6      	cmp	r6, r4
 8007b54:	d105      	bne.n	8007b62 <__libc_init_array+0x2e>
 8007b56:	bd70      	pop	{r4, r5, r6, pc}
 8007b58:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b5c:	4798      	blx	r3
 8007b5e:	3601      	adds	r6, #1
 8007b60:	e7ee      	b.n	8007b40 <__libc_init_array+0xc>
 8007b62:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b66:	4798      	blx	r3
 8007b68:	3601      	adds	r6, #1
 8007b6a:	e7f2      	b.n	8007b52 <__libc_init_array+0x1e>
 8007b6c:	08007bb4 	.word	0x08007bb4
 8007b70:	08007bb4 	.word	0x08007bb4
 8007b74:	08007bb4 	.word	0x08007bb4
 8007b78:	08007bb8 	.word	0x08007bb8

08007b7c <memset>:
 8007b7c:	4402      	add	r2, r0
 8007b7e:	4603      	mov	r3, r0
 8007b80:	4293      	cmp	r3, r2
 8007b82:	d100      	bne.n	8007b86 <memset+0xa>
 8007b84:	4770      	bx	lr
 8007b86:	f803 1b01 	strb.w	r1, [r3], #1
 8007b8a:	e7f9      	b.n	8007b80 <memset+0x4>

08007b8c <_init>:
 8007b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b8e:	bf00      	nop
 8007b90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b92:	bc08      	pop	{r3}
 8007b94:	469e      	mov	lr, r3
 8007b96:	4770      	bx	lr

08007b98 <_fini>:
 8007b98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b9a:	bf00      	nop
 8007b9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b9e:	bc08      	pop	{r3}
 8007ba0:	469e      	mov	lr, r3
 8007ba2:	4770      	bx	lr
